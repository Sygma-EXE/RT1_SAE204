from Crypto.Cipher import DES
import itertools
import multiprocessing
import base64

key = b'uSD-fk83'
texte = b'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus.'

#Chiffrement
enc = DES.new(key, DES.MODE_CFB)
cipher = enc.encrypt(texte)
enc_cipher = base64.b64encode(enc.iv + cipher)
#print(enc_cipher)

#DÃ©chiffrement
decoded = base64.b64decode(enc_cipher)
iv = decoded[:8]
ciphertext = decoded[8:]

def decrypt_aa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'aa'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ab():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ab'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ab')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ad():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ad'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ad')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_af():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'af'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -af')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ah():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ah"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ah')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_al():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "al"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -al')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_an():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "an"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -an')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ap():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ap"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ap')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ar"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ar')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_at():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "at"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -at')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_av():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "av"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -av')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ax():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ax"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ax')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_az():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "az"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -az')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'aA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_a0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_a2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_a4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_a6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_a8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_adquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'a"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_adoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_apar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_avir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_app():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_atp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_amore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_acroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_absl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_acirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_acr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ahl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_atild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1

def decrypt_ba():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ba"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ba')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_br():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "br"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -br')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_b0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_b2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_b4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_b6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_b8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'b"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_band():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_btp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_baro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_besp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_btild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1

def decrypt_da():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "da"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -da')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_db():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "db"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -db')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_df():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "df"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -df')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_d0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_d2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_d4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_d6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_d8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ddquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'd"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ddoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_daro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_desp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fa"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fa"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ff():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ff"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ff')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ft():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ft"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ft')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_f0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_f2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_f4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_f6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_f8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'f"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ftp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_faro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_fhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ftild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ha():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ha"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ha')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ht():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ht"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ht')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_h0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_h2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_h4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_h6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_h8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'h"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_htp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_haro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_htild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ja():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ja"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ja')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_j0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_j2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_j4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_j6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_j8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'j"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_jtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_la():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "la"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -la')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ld():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ld"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ld')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ll"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ll')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ln():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ln"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ln')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_l0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_l2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_l4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_l6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_l8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ldquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'l"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ldoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_land():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_last():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ltp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_laro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ltild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_na():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "na"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -na')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_np():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "np"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -np')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_n0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_n2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_n4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_n6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_n8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ndquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'n"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ndoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_npar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_npp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ntp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_naro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ncroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ncirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ncr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_nhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ntild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pa"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ph():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ph"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ph')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_px():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "px"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -px')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_p0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_p2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_p4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_p6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_p8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'p"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ppar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_past():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ppp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ptp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_paro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_phl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ptild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ra():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ra"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ra')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_r0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_r2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_r4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_r6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_r8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'r"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_raro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_resp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_rtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ta():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ta"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ta')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_td():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "td"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -td')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_th():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "th"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -th')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_t0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_t2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_t4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_t6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_t8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_texcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 't"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ttp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_taro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_thl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ttild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_va():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "va"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -va')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "VB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_v0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_v2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_v4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_v6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_v8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'v"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_varo():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xa"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_x0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_x2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_x4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_x6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_x8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'x"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_xtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_za():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "za"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -za')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_z0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_z2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_z4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_z6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_z8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'z"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ztp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_zhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ztild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Aa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Aa'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Aa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ab():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Ab"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ab')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ad():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Ad"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ad')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Af():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Af"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Af')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ah():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Ah"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ah')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Aj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Aj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Aj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Al():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Al"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Al')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_An():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "An"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -An')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ap():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Ap"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ap')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Ar"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ar')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_At():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "At"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -At')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Av():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Av"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Av')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ax():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Ax"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ax')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Az():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Az"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Az')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_AA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'AA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_AB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_AD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_AF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_AH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_AJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_AL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_AN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_AP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_AR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_AT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_AV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_AX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_AZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_A0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_A2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_A4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_A6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_A8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Aexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Adquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'A"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Adoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Aand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Aquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Apar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Aast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Avir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_App():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Atp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Aless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Amore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Aaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Acroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Absl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Acirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Aesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Acr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ahl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Atild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ba():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Ba"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ba')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Br():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Br"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Br')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_BA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_BB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_BD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_BF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_BH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_BJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_BL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_BN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_BP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_BR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_BT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_BV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_BX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_BZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_B0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_B2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_B4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_B6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_B8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'B"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Band():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Btp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Baro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Besp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Bhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Btild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Da():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Da"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Da')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Db():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Db"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Db')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Dd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Df():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Df"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Df')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Dh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Dj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Dl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Dn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Dp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Dr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Dt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Dv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Dx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Dz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_DA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_DB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_DD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_DF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_DH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_DJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_DL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_DN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_DP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_DR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_DT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_DV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_DX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_DZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_D0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_D2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_D4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_D6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_D8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ddquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'D"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ddoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Daro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Desp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Dtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fa"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ff():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Ff"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ff')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ft():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Ft"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ft')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_FA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_FB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_FD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_FF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_FH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_FJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_FL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_FN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_FP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_FR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_FT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_FV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_FX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_FZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_F0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "F0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_F2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "F2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_F4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "F4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_F6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "F6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_F8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "F8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "F!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "F$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "F&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "F\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "F("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "F*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ftp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Faro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Fhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ftild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ha():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Ha'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ha')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hb'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hd'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hf'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hh'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hj'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hl'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hn'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hp'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hr'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ht():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Ht'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ht')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hv'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hx'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hz'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_HA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_HB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HB'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_HD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HD'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_HF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HF'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_HH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HH'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_HJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HJ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_HL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HL'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_HN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HN'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_HP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HP'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_HR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HR'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_HT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HT'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_HV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HV'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_HX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HX'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_HZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HZ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_H0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_H2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_H4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_H6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_H8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Htp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Haro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Hhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Htild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ja():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Ja'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ja')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jb'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jd'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jf'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jh'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jj'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jl'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jn'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jp'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jr'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jt'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jv'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jx'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jz'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_JA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_JB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JB'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_JD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JD'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_JF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JF'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_JH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JH'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_JJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JJ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_JL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JL'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_JN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JN'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_JP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JP'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_JR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JR'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_JT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JT'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_JV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JV'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_JX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JX'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_JZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JZ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_J0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_J2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_J4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_J6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_J8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Jtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_La():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'La'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -La')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Lb'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ld():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Ld'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ld')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Lf'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Lh'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Lj'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Ll'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ll')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ln():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Ln'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ln')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Lp'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Lr'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Lt'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Lv'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Lx'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Lz'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_LA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_LB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LB'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_LD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LD'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_LF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LF'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_LH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LH'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_LJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LJ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_LL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LL'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_LN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LN'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_LP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LP'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_LR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LR'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_LT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LT'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_LV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LV'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_LX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LX'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_LZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LZ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_L0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_L2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_L4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_L6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_L8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ldquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ldoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Land():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Last():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ltp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Laro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Lhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ltild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Na():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Na'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Na')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Nb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nb'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Nd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nd'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Nf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nf'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Nh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nh'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Nj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nj'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Nl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nl'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Nn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nn'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Np():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Np'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Np')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Nr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nr'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Nt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nt'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Nv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nv'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Nx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nx'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Nz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nz'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_NA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_NB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NB'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ND():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ND'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ND')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_NF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NF'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_NH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NH'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_NJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NJ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_NL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NL'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_NN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NN'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_NP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NP'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_NR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NR'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_NT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NT'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_NV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NV'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_NX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NX'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_NZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NZ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_N0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_N2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_N4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_N6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_N8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Nexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ndquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ndoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Nand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Nquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Npar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Nast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Nvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Npp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ntp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Nless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Nmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Naro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ncroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Nbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ncirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Nesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ncr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Nhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ntild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pa'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pb'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pd'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pf'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ph():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Ph'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ph')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pj'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pl'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pn'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pp'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pr'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pt'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pv'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Px():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Px'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Px')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pz'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_PA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_PB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PB'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_PD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PD'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_PF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PF'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_PH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PH'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_PJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PJ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_PL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PL'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_PN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PN'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_PP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PP'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_PR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PR'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_PT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PT'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_PV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PV'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_PX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PX'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_PZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PZ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_P0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_P2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_P4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_P6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_P8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ppar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Past():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ppp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ptp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Paro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Pcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Phl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ptild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ra():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Ra'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ra')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rb'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rd'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rf'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rh'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rj'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rl'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rn'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rp'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rr'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rt'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rv'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rx'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rz'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_RA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_RB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RB'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_RD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RD'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_RF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RF'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_RH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RH'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_RJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RJ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_RL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RL'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_RN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RN'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_RP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RP'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_RR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RR'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_RT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RT'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_RV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RV'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_RX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RX'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_RZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RZ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_R0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_R2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_R4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_R6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_R8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Raro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Resp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Rtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ta():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Ta'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ta')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Tb'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Td():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Td'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Td')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Tf'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Th():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Th'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Th')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Tj'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Tl'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Tn'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Tp'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Tr'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Tt'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Tv'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Tx'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Tz'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_TA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_TB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TB'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_TD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TD'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_TF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TF'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_TH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TH'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_TJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TJ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_TL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TL'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_TN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TN'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_TP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TP'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_TR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TR'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_TT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TT'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_TV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TV'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_TX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TX'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_TZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TZ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_T0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_T2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_T4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_T6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_T8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Texcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ttp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Taro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Tcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Thl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ttild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Va():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Va'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Va')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vb'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vd'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vf'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vh'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vj'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vl'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vn'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vp'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vr'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vt'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vv'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vx'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vz'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_VA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_VB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VB'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_VD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VD'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_VF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VF'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_VH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VH'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_VJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VJ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_VL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VL'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_VN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VN'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_VP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VP'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_VR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VR'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_VT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VT'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_VV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VV'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_VX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VX'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_VZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VZ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_V0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_V2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_V4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_V6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_V8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Varo():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Vtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xa'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xb'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xd'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xf'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xh'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xj'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xl'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xn'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xp'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xr'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xt'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xv'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xx'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xz'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_XA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_XB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XB'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_XD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XD'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_XF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XF'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_XH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XH'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_XJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XJ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_XL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XL'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_XN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XN'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_XP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XP'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_XR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XR'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_XT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XT'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_XV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XV'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_XX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XX'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_XZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XZ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_X0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_X2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_X4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_X6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_X8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Xtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Za():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Za'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Za')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zb'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zd'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zf'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zh'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zj'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zl'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zn'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zp'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zr'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zt'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zv'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zx'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zz'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ZA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ZB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZB'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ZD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZD'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ZF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZF'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ZH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZH'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ZJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZJ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ZL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZL'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ZN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZN'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ZP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZP'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ZR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZR'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ZT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZT'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ZV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZV'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ZX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZX'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ZZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZZ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Z0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Z2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Z4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Z6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Z8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ztp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Zhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_Ztild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0a():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0b():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0d():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0f():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0h():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0j():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0l():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0n():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0p():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0r():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0t():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0v():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0x():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0z():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0A():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0B():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0D():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0F():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0H():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0J():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0L():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0N():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0P():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0R():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0T():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0V():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0X():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0Z():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_00():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '00'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -00')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_02():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '02'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -02')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_04():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '04'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -04')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_06():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '06'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -06')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_08():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '08'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -08')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0excl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0dquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0doll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0and():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0quote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0par():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0ast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0vir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0pp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0tp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0less():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0more():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0aro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0croc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0bsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0circ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0esp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0cr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0hl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_0tild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2a():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2b():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2d():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2f():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2h():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2j():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2l():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2n():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2p():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2r():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2t():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2v():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2x():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2z():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2A():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2B():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2D():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2F():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2H():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2J():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2L():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2N():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2P():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2R():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2T():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2V():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2X():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2Z():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_20():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '20'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -20')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_22():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '22'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -22')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_24():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '24'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -24')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_26():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '26'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -26')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_28():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '28'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -28')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2excl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2dquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2doll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2and():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2quote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2par():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2ast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2vir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2pp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2tp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2less():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2more():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2aro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2croc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2bsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2circ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2esp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2cr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2hl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_2tild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4a():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4b():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4d():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4f():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4h():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4j():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4l():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4n():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4p():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4r():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4t():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4v():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4x():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4z():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4A():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4B():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4D():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4F():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4H():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4J():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4L():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4N():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4P():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4R():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4T():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4V():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4X():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4Z():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_40():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '40'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -40')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_42():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '42'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -42')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_44():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '44'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -44')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_46():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '46'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -46')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_48():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '48'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -48')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4excl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4dquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4doll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4and():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4quote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4par():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4ast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4vir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4pp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4tp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4less():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4more():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4aro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4croc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4bsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4circ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4esp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4cr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4hl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_4tild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6a():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6b():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6d():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6f():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6h():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6j():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6l():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6n():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6p():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6r():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6t():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6v():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6x():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6z():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6A():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6B():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6D():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6F():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6H():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6J():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6L():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6N():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6P():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6R():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6T():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6V():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6X():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6Z():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_60():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '60'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -60')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_62():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '62'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -62')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_64():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '64'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -64')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_66():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '66'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -66')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_68():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '68'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -68')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6excl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6dquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6doll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6and():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6quote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6par():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6ast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6vir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6pp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6tp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6less():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6more():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6aro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6croc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6bsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6circ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6esp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6cr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6hl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_6tild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8a():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8b():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8d():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8f():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8h():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8j():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8l():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8n():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8p():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8r():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8t():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8v():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8x():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8z():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8A():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8B():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8D():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8F():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8H():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8J():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8L():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8N():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8P():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8R():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8T():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8V():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8X():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8Z():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_80():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '80'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -80')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_82():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '82'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -82')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_84():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '84'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -84')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_86():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '86'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -86')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_88():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '88'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -88')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8excl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8dquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8doll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8and():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8quote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8par():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8ast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8vir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8pp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8tp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8less():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8more():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8aro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8croc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8bsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8circ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8esp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8cr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8hl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_8tild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_excla():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_excld():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_excll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_excln():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_excl0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_excl2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_excl4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_excl6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_excl8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_excldquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_excldoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_excland():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -excl(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_excltp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -![')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_exclhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_excltild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquota():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquoth():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquott():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquot0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquot2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquot4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquot6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquot8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '""'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -""')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dquote(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '",'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -",')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '".'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -".')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquottp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '":'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -":')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '">'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -">')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquotcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquothl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubquottild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dolla():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dolld():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dolll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dolln():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doll0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doll2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doll4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doll6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doll8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dolldquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dolldoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dolland():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -doll(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dolltp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '${'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -${')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dollhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_dolltild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespab():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespad():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespah():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespal():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespan():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespap():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespat():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespav():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespax():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespa0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespa2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespa4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespa6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespa8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespadquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespadoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespapar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'and('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -and(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespavir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespapp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespatp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespamore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespacroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespabsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespacirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespaesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespacr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespahl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decryptespatild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quota():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quoth():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quott():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quot0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quot2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quot4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quot6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quot8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\','+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\',')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quottp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\':'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\':')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'\\'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'\\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quotcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quothl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_quottild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parena():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parend():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parent():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_paren0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_paren2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_paren4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_paren6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_paren8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parendquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '("'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -("')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parendoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '($'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -($')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parpara():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -par(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parentp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parencroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -([')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parencirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parencr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '({'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -({')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parenhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_parentild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espea():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espeb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esped():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espef():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espeh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espej():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espel():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espen():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espep():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esper():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espet():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espev():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espex():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espez():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espeA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espeB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espeD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espeF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espeH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espeJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espeL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espeN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espeP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espeR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espeT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espeV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espeX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espeZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espe0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espe2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espe4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espe6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espe8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espeexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espedquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espedoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espeand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espequote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_astpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ast(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espeast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '**'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -**')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espevir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espepp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espetp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espeless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espemore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espearo():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_especroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espebsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_especirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espeesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_especr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espehl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_espetild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vira():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vird():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vir0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vir2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vir4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vir6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vir8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vir(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_viraro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vircroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vircirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_viresp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vircr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_virtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poina():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poind():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_point():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poin0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poin2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poin4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poin6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poin8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poindquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '."'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -."')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poindoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pppar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pp(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '..'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -..')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pointp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poincroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poincirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poincr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_poinhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_pointild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoina():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoind():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoint():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoin0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoin2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoin4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoin6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoin8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoindquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoindoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tppar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tp(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpointp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '::'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -::')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoincroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoincirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoincr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpoinhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_doubpointild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lesst():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_less0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_less2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_less4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_less6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_less8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_morepar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -less(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lesspp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lesstp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lesscroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lesscirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lessesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lesscr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lesshl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lesstild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_morea():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moreb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_mored():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moref():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moreh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_morej():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_morel():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moren():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_morep():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_morer():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moret():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_morev():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_morex():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_morez():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moreA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moreB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moreD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moreF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moreH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moreJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moreL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moreN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moreP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moreR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moreT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moreV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moreX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moreZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_more0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_more2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_more4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_more6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_more8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moreexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moredquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moredoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moreand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_morequote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_lesspar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -more(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moreast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_morevir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_morepp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moretp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moreless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '><'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -><')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moremore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_morearo():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_morecroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_morebsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_morecirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moreesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_morecr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_morehl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_moretild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobash():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobas0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobas2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobas4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobas6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobas8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_aropar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aro(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobaspp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobastp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobascroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobascirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobasesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobascr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobashl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_arobastild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crocha():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crocht():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_croch0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_croch2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_croch4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_croch6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_croch8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '["'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -["')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crocpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -croc(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crocharo():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bst():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\\x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\\N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bs0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bs2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bs4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bs6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bs8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\\\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bslpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bsl(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bspp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bstp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bscroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\\\'+x 
        fkey = x.encode('utf-8')
        #print(fkey, ' -\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bscirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\\^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bsesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bscr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bshl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_bstild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cira():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cird():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cir0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cir2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cir4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cir6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cir8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_circpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -circ(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ciraro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_circroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_circirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_ciresp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_circr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_cirtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esua():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esub():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esud():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esul():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esun():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esup():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esur():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esut():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esux():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esu0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esu2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esu4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esu6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esu8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esudquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esudoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esppar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -esp(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esupp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esutp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esumore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esucroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esubsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esucirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '``'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -``')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esucr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esuhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_esutild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crocha():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crocht():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_croch0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_croch2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_croch4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_croch6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_croch8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -cr(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crocharo():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{'+'{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_crochtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vsla():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vsld():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vsll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vsln():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vsl0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vsl2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vsl4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vsl6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vsl8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vsldquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vsldoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vsland():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_hlpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hl(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vsltp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vslhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '||'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -||')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_vsltild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tila():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_till():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tiln():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_til0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_til2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_til4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_til6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_til8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tildquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tildoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tiland():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tild(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tiltp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tilhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1


def decrypt_tiltild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if  i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            break
        i += 1

if __name__ == "__main__":
    Process1 = multiprocessing.Process(target=decrypt_aa)
    Process2 = multiprocessing.Process(target=decrypt_ab)
    Process3 = multiprocessing.Process(target=decrypt_ad)
    Process4 = multiprocessing.Process(target=decrypt_af)
    Process5 = multiprocessing.Process(target=decrypt_ah)
    Process6 = multiprocessing.Process(target=decrypt_aj)
    Process7 = multiprocessing.Process(target=decrypt_al)
    Process8 = multiprocessing.Process(target=decrypt_an)
    Process9 = multiprocessing.Process(target=decrypt_ap)
    Process10 = multiprocessing.Process(target=decrypt_ar)
    Process11 = multiprocessing.Process(target=decrypt_at)
    Process12 = multiprocessing.Process(target=decrypt_av)
    Process13 = multiprocessing.Process(target=decrypt_ax)
    Process14 = multiprocessing.Process(target=decrypt_az)
    Process15 = multiprocessing.Process(target=decrypt_aA)
    Process16 = multiprocessing.Process(target=decrypt_aB)
    Process17 = multiprocessing.Process(target=decrypt_aD)
    Process18 = multiprocessing.Process(target=decrypt_aF)
    Process19 = multiprocessing.Process(target=decrypt_aH)
    Process20 = multiprocessing.Process(target=decrypt_aJ)
    Process21 = multiprocessing.Process(target=decrypt_aL)
    Process22 = multiprocessing.Process(target=decrypt_aN)
    Process23 = multiprocessing.Process(target=decrypt_aP)
    Process24 = multiprocessing.Process(target=decrypt_aR)
    Process25 = multiprocessing.Process(target=decrypt_aT)
    Process26 = multiprocessing.Process(target=decrypt_aV)
    Process27 = multiprocessing.Process(target=decrypt_aX)
    Process28 = multiprocessing.Process(target=decrypt_aZ)
    Process29 = multiprocessing.Process(target=decrypt_a0)
    Process30 = multiprocessing.Process(target=decrypt_a2)
    Process31 = multiprocessing.Process(target=decrypt_a4)
    Process32 = multiprocessing.Process(target=decrypt_a6)
    Process33 = multiprocessing.Process(target=decrypt_a8)
    Process34 = multiprocessing.Process(target=decrypt_aexcl)
    Process35 = multiprocessing.Process(target=decrypt_adquote)
    Process36 = multiprocessing.Process(target=decrypt_adoll)
    Process37 = multiprocessing.Process(target=decrypt_aand)
    Process38 = multiprocessing.Process(target=decrypt_aquote)
    Process39 = multiprocessing.Process(target=decrypt_apar)
    Process40 = multiprocessing.Process(target=decrypt_aast)
    Process41 = multiprocessing.Process(target=decrypt_avir)
    Process42 = multiprocessing.Process(target=decrypt_app)
    Process43 = multiprocessing.Process(target=decrypt_atp)
    Process44 = multiprocessing.Process(target=decrypt_aless)
    Process45 = multiprocessing.Process(target=decrypt_amore)
    Process46 = multiprocessing.Process(target=decrypt_aaro)
    Process47 = multiprocessing.Process(target=decrypt_acroc)
    Process48 = multiprocessing.Process(target=decrypt_absl)
    Process49 = multiprocessing.Process(target=decrypt_acirc)
    Process50 = multiprocessing.Process(target=decrypt_aesp)
    Process51 = multiprocessing.Process(target=decrypt_acr)
    Process52 = multiprocessing.Process(target=decrypt_ahl)
    Process53 = multiprocessing.Process(target=decrypt_atild)
    Process54 = multiprocessing.Process(target=decrypt_ba)
    Process55 = multiprocessing.Process(target=decrypt_bb)
    Process56 = multiprocessing.Process(target=decrypt_bd)
    Process57 = multiprocessing.Process(target=decrypt_bf)
    Process58 = multiprocessing.Process(target=decrypt_bh)
    Process59 = multiprocessing.Process(target=decrypt_bj)
    Process60 = multiprocessing.Process(target=decrypt_bl)
    Process61 = multiprocessing.Process(target=decrypt_bn)
    Process62 = multiprocessing.Process(target=decrypt_bp)
    Process63 = multiprocessing.Process(target=decrypt_br)
    Process64 = multiprocessing.Process(target=decrypt_bt)
    Process65 = multiprocessing.Process(target=decrypt_bv)
    Process66 = multiprocessing.Process(target=decrypt_bx)
    Process67 = multiprocessing.Process(target=decrypt_bz)
    Process68 = multiprocessing.Process(target=decrypt_bA)
    Process69 = multiprocessing.Process(target=decrypt_bB)
    Process70 = multiprocessing.Process(target=decrypt_bD)
    Process71 = multiprocessing.Process(target=decrypt_bF)
    Process72 = multiprocessing.Process(target=decrypt_bH)
    Process73 = multiprocessing.Process(target=decrypt_bJ)
    Process74 = multiprocessing.Process(target=decrypt_bL)
    Process75 = multiprocessing.Process(target=decrypt_bN)
    Process76 = multiprocessing.Process(target=decrypt_bP)
    Process77 = multiprocessing.Process(target=decrypt_bR)
    Process78 = multiprocessing.Process(target=decrypt_bT)
    Process79 = multiprocessing.Process(target=decrypt_bV)
    Process80 = multiprocessing.Process(target=decrypt_bX)
    Process81 = multiprocessing.Process(target=decrypt_bZ)
    Process82 = multiprocessing.Process(target=decrypt_b0)
    Process83 = multiprocessing.Process(target=decrypt_b2)
    Process84 = multiprocessing.Process(target=decrypt_b4)
    Process85 = multiprocessing.Process(target=decrypt_b6)
    Process86 = multiprocessing.Process(target=decrypt_b8)
    Process87 = multiprocessing.Process(target=decrypt_bexcl)
    Process88 = multiprocessing.Process(target=decrypt_bdquote)
    Process89 = multiprocessing.Process(target=decrypt_bdoll)
    Process90 = multiprocessing.Process(target=decrypt_band)
    Process91 = multiprocessing.Process(target=decrypt_bquote)
    Process92 = multiprocessing.Process(target=decrypt_bpar)
    Process93 = multiprocessing.Process(target=decrypt_bast)
    Process94 = multiprocessing.Process(target=decrypt_bvir)
    Process95 = multiprocessing.Process(target=decrypt_bpp)
    Process96 = multiprocessing.Process(target=decrypt_btp)
    Process97 = multiprocessing.Process(target=decrypt_bless)
    Process98 = multiprocessing.Process(target=decrypt_bmore)
    Process99 = multiprocessing.Process(target=decrypt_baro)
    Process100 = multiprocessing.Process(target=decrypt_bcroc)
    Process101 = multiprocessing.Process(target=decrypt_bbsl)
    Process102 = multiprocessing.Process(target=decrypt_bcirc)
    Process103 = multiprocessing.Process(target=decrypt_besp)
    Process104 = multiprocessing.Process(target=decrypt_bcr)
    Process105 = multiprocessing.Process(target=decrypt_bhl)
    Process106 = multiprocessing.Process(target=decrypt_btild)
    Process107 = multiprocessing.Process(target=decrypt_da)
    Process108 = multiprocessing.Process(target=decrypt_db)
    Process109 = multiprocessing.Process(target=decrypt_dd)
    Process110 = multiprocessing.Process(target=decrypt_df)
    Process111 = multiprocessing.Process(target=decrypt_dh)
    Process112 = multiprocessing.Process(target=decrypt_dj)
    Process113 = multiprocessing.Process(target=decrypt_dl)
    Process114 = multiprocessing.Process(target=decrypt_dn)
    Process115 = multiprocessing.Process(target=decrypt_dp)
    Process116 = multiprocessing.Process(target=decrypt_dr)
    Process117 = multiprocessing.Process(target=decrypt_dt)
    Process118 = multiprocessing.Process(target=decrypt_dv)
    Process119 = multiprocessing.Process(target=decrypt_dx)
    Process120 = multiprocessing.Process(target=decrypt_dz)
    Process121 = multiprocessing.Process(target=decrypt_dA)
    Process122 = multiprocessing.Process(target=decrypt_dB)
    Process123 = multiprocessing.Process(target=decrypt_dD)
    Process124 = multiprocessing.Process(target=decrypt_dF)
    Process125 = multiprocessing.Process(target=decrypt_dH)
    Process126 = multiprocessing.Process(target=decrypt_dJ)
    Process127 = multiprocessing.Process(target=decrypt_dL)
    Process128 = multiprocessing.Process(target=decrypt_dN)
    Process129 = multiprocessing.Process(target=decrypt_dP)
    Process130 = multiprocessing.Process(target=decrypt_dR)
    Process131 = multiprocessing.Process(target=decrypt_dT)
    Process132 = multiprocessing.Process(target=decrypt_dV)
    Process133 = multiprocessing.Process(target=decrypt_dX)
    Process134 = multiprocessing.Process(target=decrypt_dZ)
    Process135 = multiprocessing.Process(target=decrypt_d0)
    Process136 = multiprocessing.Process(target=decrypt_d2)
    Process137 = multiprocessing.Process(target=decrypt_d4)
    Process138 = multiprocessing.Process(target=decrypt_d6)
    Process139 = multiprocessing.Process(target=decrypt_d8)
    Process140 = multiprocessing.Process(target=decrypt_dexcl)
    Process141 = multiprocessing.Process(target=decrypt_ddquote)
    Process142 = multiprocessing.Process(target=decrypt_ddoll)
    Process143 = multiprocessing.Process(target=decrypt_dand)
    Process144 = multiprocessing.Process(target=decrypt_dquote)
    Process145 = multiprocessing.Process(target=decrypt_dpar)
    Process146 = multiprocessing.Process(target=decrypt_dast)
    Process147 = multiprocessing.Process(target=decrypt_dvir)
    Process148 = multiprocessing.Process(target=decrypt_dpp)
    Process149 = multiprocessing.Process(target=decrypt_dtp)
    Process150 = multiprocessing.Process(target=decrypt_dless)
    Process151 = multiprocessing.Process(target=decrypt_dmore)
    Process152 = multiprocessing.Process(target=decrypt_daro)
    Process153 = multiprocessing.Process(target=decrypt_dcroc)
    Process154 = multiprocessing.Process(target=decrypt_dbsl)
    Process155 = multiprocessing.Process(target=decrypt_dcirc)
    Process156 = multiprocessing.Process(target=decrypt_desp)
    Process157 = multiprocessing.Process(target=decrypt_dcr)
    Process158 = multiprocessing.Process(target=decrypt_dhl)
    Process159 = multiprocessing.Process(target=decrypt_dtild)
    Process160 = multiprocessing.Process(target=decrypt_fa)
    Process161 = multiprocessing.Process(target=decrypt_fb)
    Process162 = multiprocessing.Process(target=decrypt_fd)
    Process163 = multiprocessing.Process(target=decrypt_ff)
    Process164 = multiprocessing.Process(target=decrypt_fh)
    Process165 = multiprocessing.Process(target=decrypt_fj)
    Process166 = multiprocessing.Process(target=decrypt_fl)
    Process167 = multiprocessing.Process(target=decrypt_fn)
    Process168 = multiprocessing.Process(target=decrypt_fp)
    Process169 = multiprocessing.Process(target=decrypt_fr)
    Process170 = multiprocessing.Process(target=decrypt_ft)
    Process171 = multiprocessing.Process(target=decrypt_fv)
    Process172 = multiprocessing.Process(target=decrypt_fx)
    Process173 = multiprocessing.Process(target=decrypt_fz)
    Process174 = multiprocessing.Process(target=decrypt_fA)
    Process175 = multiprocessing.Process(target=decrypt_fB)
    Process176 = multiprocessing.Process(target=decrypt_fD)
    Process177 = multiprocessing.Process(target=decrypt_fF)
    Process178 = multiprocessing.Process(target=decrypt_fH)
    Process179 = multiprocessing.Process(target=decrypt_fJ)
    Process180 = multiprocessing.Process(target=decrypt_fL)
    Process181 = multiprocessing.Process(target=decrypt_fN)
    Process182 = multiprocessing.Process(target=decrypt_fP)
    Process183 = multiprocessing.Process(target=decrypt_fR)
    Process184 = multiprocessing.Process(target=decrypt_fT)
    Process185 = multiprocessing.Process(target=decrypt_fV)
    Process186 = multiprocessing.Process(target=decrypt_fX)
    Process187 = multiprocessing.Process(target=decrypt_fZ)
    Process188 = multiprocessing.Process(target=decrypt_f0)
    Process189 = multiprocessing.Process(target=decrypt_f2)
    Process190 = multiprocessing.Process(target=decrypt_f4)
    Process191 = multiprocessing.Process(target=decrypt_f6)
    Process192 = multiprocessing.Process(target=decrypt_f8)
    Process193 = multiprocessing.Process(target=decrypt_fexcl)
    Process194 = multiprocessing.Process(target=decrypt_fdquote)
    Process195 = multiprocessing.Process(target=decrypt_fdoll)
    Process196 = multiprocessing.Process(target=decrypt_fand)
    Process197 = multiprocessing.Process(target=decrypt_fquote)
    Process198 = multiprocessing.Process(target=decrypt_fpar)
    Process199 = multiprocessing.Process(target=decrypt_fast)
    Process200 = multiprocessing.Process(target=decrypt_fvir)
    Process201 = multiprocessing.Process(target=decrypt_fpp)
    Process202 = multiprocessing.Process(target=decrypt_ftp)
    Process203 = multiprocessing.Process(target=decrypt_fless)
    Process204 = multiprocessing.Process(target=decrypt_fmore)
    Process205 = multiprocessing.Process(target=decrypt_faro)
    Process206 = multiprocessing.Process(target=decrypt_fcroc)
    Process207 = multiprocessing.Process(target=decrypt_fbsl)
    Process208 = multiprocessing.Process(target=decrypt_fcirc)
    Process209 = multiprocessing.Process(target=decrypt_fesp)
    Process210 = multiprocessing.Process(target=decrypt_fcr)
    Process211 = multiprocessing.Process(target=decrypt_fhl)
    Process212 = multiprocessing.Process(target=decrypt_ftild)
    Process213 = multiprocessing.Process(target=decrypt_ha)
    Process214 = multiprocessing.Process(target=decrypt_hb)
    Process215 = multiprocessing.Process(target=decrypt_hd)
    Process216 = multiprocessing.Process(target=decrypt_hf)
    Process217 = multiprocessing.Process(target=decrypt_hh)
    Process218 = multiprocessing.Process(target=decrypt_hj)
    Process219 = multiprocessing.Process(target=decrypt_hl)
    Process220 = multiprocessing.Process(target=decrypt_hn)
    Process221 = multiprocessing.Process(target=decrypt_hp)
    Process222 = multiprocessing.Process(target=decrypt_hr)
    Process223 = multiprocessing.Process(target=decrypt_ht)
    Process224 = multiprocessing.Process(target=decrypt_hv)
    Process225 = multiprocessing.Process(target=decrypt_hx)
    Process226 = multiprocessing.Process(target=decrypt_hz)
    Process227 = multiprocessing.Process(target=decrypt_hA)
    Process228 = multiprocessing.Process(target=decrypt_hB)
    Process229 = multiprocessing.Process(target=decrypt_hD)
    Process230 = multiprocessing.Process(target=decrypt_hF)
    Process231 = multiprocessing.Process(target=decrypt_hH)
    Process232 = multiprocessing.Process(target=decrypt_hJ)
    Process233 = multiprocessing.Process(target=decrypt_hL)
    Process234 = multiprocessing.Process(target=decrypt_hN)
    Process235 = multiprocessing.Process(target=decrypt_hP)
    Process236 = multiprocessing.Process(target=decrypt_hR)
    Process237 = multiprocessing.Process(target=decrypt_hT)
    Process238 = multiprocessing.Process(target=decrypt_hV)
    Process239 = multiprocessing.Process(target=decrypt_hX)
    Process240 = multiprocessing.Process(target=decrypt_hZ)
    Process241 = multiprocessing.Process(target=decrypt_h0)
    Process242 = multiprocessing.Process(target=decrypt_h2)
    Process243 = multiprocessing.Process(target=decrypt_h4)
    Process244 = multiprocessing.Process(target=decrypt_h6)
    Process245 = multiprocessing.Process(target=decrypt_h8)
    Process246 = multiprocessing.Process(target=decrypt_hexcl)
    Process247 = multiprocessing.Process(target=decrypt_hdquote)
    Process248 = multiprocessing.Process(target=decrypt_hdoll)
    Process249 = multiprocessing.Process(target=decrypt_hand)
    Process250 = multiprocessing.Process(target=decrypt_hquote)
    Process251 = multiprocessing.Process(target=decrypt_hpar)
    Process252 = multiprocessing.Process(target=decrypt_hast)
    Process253 = multiprocessing.Process(target=decrypt_hvir)
    Process254 = multiprocessing.Process(target=decrypt_hpp)
    Process255 = multiprocessing.Process(target=decrypt_htp)
    Process256 = multiprocessing.Process(target=decrypt_hless)
    Process257 = multiprocessing.Process(target=decrypt_hmore)
    Process258 = multiprocessing.Process(target=decrypt_haro)
    Process259 = multiprocessing.Process(target=decrypt_hcroc)
    Process260 = multiprocessing.Process(target=decrypt_hbsl)
    Process261 = multiprocessing.Process(target=decrypt_hcirc)
    Process262 = multiprocessing.Process(target=decrypt_hesp)
    Process263 = multiprocessing.Process(target=decrypt_hcr)
    Process264 = multiprocessing.Process(target=decrypt_hhl)
    Process265 = multiprocessing.Process(target=decrypt_htild)
    Process266 = multiprocessing.Process(target=decrypt_ja)
    Process267 = multiprocessing.Process(target=decrypt_jb)
    Process268 = multiprocessing.Process(target=decrypt_jd)
    Process269 = multiprocessing.Process(target=decrypt_jf)
    Process270 = multiprocessing.Process(target=decrypt_jh)
    Process271 = multiprocessing.Process(target=decrypt_jj)
    Process272 = multiprocessing.Process(target=decrypt_jl)
    Process273 = multiprocessing.Process(target=decrypt_jn)
    Process274 = multiprocessing.Process(target=decrypt_jp)
    Process275 = multiprocessing.Process(target=decrypt_jr)
    Process276 = multiprocessing.Process(target=decrypt_jt)
    Process277 = multiprocessing.Process(target=decrypt_jv)
    Process278 = multiprocessing.Process(target=decrypt_jx)
    Process279 = multiprocessing.Process(target=decrypt_jz)
    Process280 = multiprocessing.Process(target=decrypt_jA)
    Process281 = multiprocessing.Process(target=decrypt_jB)
    Process282 = multiprocessing.Process(target=decrypt_jD)
    Process283 = multiprocessing.Process(target=decrypt_jF)
    Process284 = multiprocessing.Process(target=decrypt_jH)
    Process285 = multiprocessing.Process(target=decrypt_jJ)
    Process286 = multiprocessing.Process(target=decrypt_jL)
    Process287 = multiprocessing.Process(target=decrypt_jN)
    Process288 = multiprocessing.Process(target=decrypt_jP)
    Process289 = multiprocessing.Process(target=decrypt_jR)
    Process290 = multiprocessing.Process(target=decrypt_jT)
    Process291 = multiprocessing.Process(target=decrypt_jV)
    Process292 = multiprocessing.Process(target=decrypt_jX)
    Process293 = multiprocessing.Process(target=decrypt_jZ)
    Process294 = multiprocessing.Process(target=decrypt_j0)
    Process295 = multiprocessing.Process(target=decrypt_j2)
    Process296 = multiprocessing.Process(target=decrypt_j4)
    Process297 = multiprocessing.Process(target=decrypt_j6)
    Process298 = multiprocessing.Process(target=decrypt_j8)
    Process299 = multiprocessing.Process(target=decrypt_jexcl)
    Process300 = multiprocessing.Process(target=decrypt_jdquote)
    Process301 = multiprocessing.Process(target=decrypt_jdoll)
    Process302 = multiprocessing.Process(target=decrypt_jand)
    Process303 = multiprocessing.Process(target=decrypt_jquote)
    Process304 = multiprocessing.Process(target=decrypt_jpar)
    Process305 = multiprocessing.Process(target=decrypt_jast)
    Process306 = multiprocessing.Process(target=decrypt_jvir)
    Process307 = multiprocessing.Process(target=decrypt_jpp)
    Process308 = multiprocessing.Process(target=decrypt_jtp)
    Process309 = multiprocessing.Process(target=decrypt_jless)
    Process310 = multiprocessing.Process(target=decrypt_jmore)
    Process311 = multiprocessing.Process(target=decrypt_jaro)
    Process312 = multiprocessing.Process(target=decrypt_jcroc)
    Process313 = multiprocessing.Process(target=decrypt_jbsl)
    Process314 = multiprocessing.Process(target=decrypt_jcirc)
    Process315 = multiprocessing.Process(target=decrypt_jesp)
    Process316 = multiprocessing.Process(target=decrypt_jcr)
    Process317 = multiprocessing.Process(target=decrypt_jhl)
    Process318 = multiprocessing.Process(target=decrypt_jtild)
    Process319 = multiprocessing.Process(target=decrypt_la)
    Process320 = multiprocessing.Process(target=decrypt_lb)
    Process321 = multiprocessing.Process(target=decrypt_ld)
    Process322 = multiprocessing.Process(target=decrypt_lf)
    Process323 = multiprocessing.Process(target=decrypt_lh)
    Process324 = multiprocessing.Process(target=decrypt_lj)
    Process325 = multiprocessing.Process(target=decrypt_ll)
    Process326 = multiprocessing.Process(target=decrypt_ln)
    Process327 = multiprocessing.Process(target=decrypt_lp)
    Process328 = multiprocessing.Process(target=decrypt_lr)
    Process329 = multiprocessing.Process(target=decrypt_lt)
    Process330 = multiprocessing.Process(target=decrypt_lv)
    Process331 = multiprocessing.Process(target=decrypt_lx)
    Process332 = multiprocessing.Process(target=decrypt_lz)
    Process333 = multiprocessing.Process(target=decrypt_lA)
    Process334 = multiprocessing.Process(target=decrypt_lB)
    Process335 = multiprocessing.Process(target=decrypt_lD)
    Process336 = multiprocessing.Process(target=decrypt_lF)
    Process337 = multiprocessing.Process(target=decrypt_lH)
    Process338 = multiprocessing.Process(target=decrypt_lJ)
    Process339 = multiprocessing.Process(target=decrypt_lL)
    Process340 = multiprocessing.Process(target=decrypt_lN)
    Process341 = multiprocessing.Process(target=decrypt_lP)
    Process342 = multiprocessing.Process(target=decrypt_lR)
    Process343 = multiprocessing.Process(target=decrypt_lT)
    Process344 = multiprocessing.Process(target=decrypt_lV)
    Process345 = multiprocessing.Process(target=decrypt_lX)
    Process346 = multiprocessing.Process(target=decrypt_lZ)
    Process347 = multiprocessing.Process(target=decrypt_l0)
    Process348 = multiprocessing.Process(target=decrypt_l2)
    Process349 = multiprocessing.Process(target=decrypt_l4)
    Process350 = multiprocessing.Process(target=decrypt_l6)
    Process351 = multiprocessing.Process(target=decrypt_l8)
    Process352 = multiprocessing.Process(target=decrypt_lexcl)
    Process353 = multiprocessing.Process(target=decrypt_ldquote)
    Process354 = multiprocessing.Process(target=decrypt_ldoll)
    Process355 = multiprocessing.Process(target=decrypt_land)
    Process356 = multiprocessing.Process(target=decrypt_lquote)
    Process357 = multiprocessing.Process(target=decrypt_lpar)
    Process358 = multiprocessing.Process(target=decrypt_last)
    Process359 = multiprocessing.Process(target=decrypt_lvir)
    Process360 = multiprocessing.Process(target=decrypt_lpp)
    Process361 = multiprocessing.Process(target=decrypt_ltp)
    Process362 = multiprocessing.Process(target=decrypt_lless)
    Process363 = multiprocessing.Process(target=decrypt_lmore)
    Process364 = multiprocessing.Process(target=decrypt_laro)
    Process365 = multiprocessing.Process(target=decrypt_lcroc)
    Process366 = multiprocessing.Process(target=decrypt_lbsl)
    Process367 = multiprocessing.Process(target=decrypt_lcirc)
    Process368 = multiprocessing.Process(target=decrypt_lesp)
    Process369 = multiprocessing.Process(target=decrypt_lcr)
    Process370 = multiprocessing.Process(target=decrypt_lhl)
    Process371 = multiprocessing.Process(target=decrypt_ltild)
    Process372 = multiprocessing.Process(target=decrypt_na)
    Process373 = multiprocessing.Process(target=decrypt_nb)
    Process374 = multiprocessing.Process(target=decrypt_nd)
    Process375 = multiprocessing.Process(target=decrypt_nf)
    Process376 = multiprocessing.Process(target=decrypt_nh)
    Process377 = multiprocessing.Process(target=decrypt_nj)
    Process378 = multiprocessing.Process(target=decrypt_nl)
    Process379 = multiprocessing.Process(target=decrypt_nn)
    Process380 = multiprocessing.Process(target=decrypt_np)
    Process381 = multiprocessing.Process(target=decrypt_nr)
    Process382 = multiprocessing.Process(target=decrypt_nt)
    Process383 = multiprocessing.Process(target=decrypt_nv)
    Process384 = multiprocessing.Process(target=decrypt_nx)
    Process385 = multiprocessing.Process(target=decrypt_nz)
    Process386 = multiprocessing.Process(target=decrypt_nA)
    Process387 = multiprocessing.Process(target=decrypt_nB)
    Process388 = multiprocessing.Process(target=decrypt_nD)
    Process389 = multiprocessing.Process(target=decrypt_nF)
    Process390 = multiprocessing.Process(target=decrypt_nH)
    Process391 = multiprocessing.Process(target=decrypt_nJ)
    Process392 = multiprocessing.Process(target=decrypt_nL)
    Process393 = multiprocessing.Process(target=decrypt_nN)
    Process394 = multiprocessing.Process(target=decrypt_nP)
    Process395 = multiprocessing.Process(target=decrypt_nR)
    Process396 = multiprocessing.Process(target=decrypt_nT)
    Process397 = multiprocessing.Process(target=decrypt_nV)
    Process398 = multiprocessing.Process(target=decrypt_nX)
    Process399 = multiprocessing.Process(target=decrypt_nZ)
    Process400 = multiprocessing.Process(target=decrypt_n0)
    Process401 = multiprocessing.Process(target=decrypt_n2)
    Process402 = multiprocessing.Process(target=decrypt_n4)
    Process403 = multiprocessing.Process(target=decrypt_n6)
    Process404 = multiprocessing.Process(target=decrypt_n8)
    Process405 = multiprocessing.Process(target=decrypt_nexcl)
    Process406 = multiprocessing.Process(target=decrypt_ndquote)
    Process407 = multiprocessing.Process(target=decrypt_ndoll)
    Process408 = multiprocessing.Process(target=decrypt_nand)
    Process409 = multiprocessing.Process(target=decrypt_nquote)
    Process410 = multiprocessing.Process(target=decrypt_npar)
    Process411 = multiprocessing.Process(target=decrypt_nast)
    Process412 = multiprocessing.Process(target=decrypt_nvir)
    Process413 = multiprocessing.Process(target=decrypt_npp)
    Process414 = multiprocessing.Process(target=decrypt_ntp)
    Process415 = multiprocessing.Process(target=decrypt_nless)
    Process416 = multiprocessing.Process(target=decrypt_nmore)
    Process417 = multiprocessing.Process(target=decrypt_naro)
    Process418 = multiprocessing.Process(target=decrypt_ncroc)
    Process419 = multiprocessing.Process(target=decrypt_nbsl)
    Process420 = multiprocessing.Process(target=decrypt_ncirc)
    Process421 = multiprocessing.Process(target=decrypt_nesp)
    Process422 = multiprocessing.Process(target=decrypt_ncr)
    Process423 = multiprocessing.Process(target=decrypt_nhl)
    Process424 = multiprocessing.Process(target=decrypt_ntild)
    Process425 = multiprocessing.Process(target=decrypt_pa)
    Process426 = multiprocessing.Process(target=decrypt_pb)
    Process427 = multiprocessing.Process(target=decrypt_pd)
    Process428 = multiprocessing.Process(target=decrypt_pf)
    Process429 = multiprocessing.Process(target=decrypt_ph)
    Process430 = multiprocessing.Process(target=decrypt_pj)
    Process431 = multiprocessing.Process(target=decrypt_pl)
    Process432 = multiprocessing.Process(target=decrypt_pn)
    Process433 = multiprocessing.Process(target=decrypt_pp)
    Process434 = multiprocessing.Process(target=decrypt_pr)
    Process435 = multiprocessing.Process(target=decrypt_pt)
    Process436 = multiprocessing.Process(target=decrypt_pv)
    Process437 = multiprocessing.Process(target=decrypt_px)
    Process438 = multiprocessing.Process(target=decrypt_pz)
    Process439 = multiprocessing.Process(target=decrypt_pA)
    Process440 = multiprocessing.Process(target=decrypt_pB)
    Process441 = multiprocessing.Process(target=decrypt_pD)
    Process442 = multiprocessing.Process(target=decrypt_pF)
    Process443 = multiprocessing.Process(target=decrypt_pH)
    Process444 = multiprocessing.Process(target=decrypt_pJ)
    Process445 = multiprocessing.Process(target=decrypt_pL)
    Process446 = multiprocessing.Process(target=decrypt_pN)
    Process447 = multiprocessing.Process(target=decrypt_pP)
    Process448 = multiprocessing.Process(target=decrypt_pR)
    Process449 = multiprocessing.Process(target=decrypt_pT)
    Process450 = multiprocessing.Process(target=decrypt_pV)
    Process451 = multiprocessing.Process(target=decrypt_pX)
    Process452 = multiprocessing.Process(target=decrypt_pZ)
    Process453 = multiprocessing.Process(target=decrypt_p0)
    Process454 = multiprocessing.Process(target=decrypt_p2)
    Process455 = multiprocessing.Process(target=decrypt_p4)
    Process456 = multiprocessing.Process(target=decrypt_p6)
    Process457 = multiprocessing.Process(target=decrypt_p8)
    Process458 = multiprocessing.Process(target=decrypt_pexcl)
    Process459 = multiprocessing.Process(target=decrypt_pdquote)
    Process460 = multiprocessing.Process(target=decrypt_pdoll)
    Process461 = multiprocessing.Process(target=decrypt_pand)
    Process462 = multiprocessing.Process(target=decrypt_pquote)
    Process463 = multiprocessing.Process(target=decrypt_ppar)
    Process464 = multiprocessing.Process(target=decrypt_past)
    Process465 = multiprocessing.Process(target=decrypt_pvir)
    Process466 = multiprocessing.Process(target=decrypt_ppp)
    Process467 = multiprocessing.Process(target=decrypt_ptp)
    Process468 = multiprocessing.Process(target=decrypt_pless)
    Process469 = multiprocessing.Process(target=decrypt_pmore)
    Process470 = multiprocessing.Process(target=decrypt_paro)
    Process471 = multiprocessing.Process(target=decrypt_pcroc)
    Process472 = multiprocessing.Process(target=decrypt_pbsl)
    Process473 = multiprocessing.Process(target=decrypt_pcirc)
    Process474 = multiprocessing.Process(target=decrypt_pesp)
    Process475 = multiprocessing.Process(target=decrypt_pcr)
    Process476 = multiprocessing.Process(target=decrypt_phl)
    Process477 = multiprocessing.Process(target=decrypt_ptild)
    Process478 = multiprocessing.Process(target=decrypt_ra)
    Process479 = multiprocessing.Process(target=decrypt_rb)
    Process480 = multiprocessing.Process(target=decrypt_rd)
    Process481 = multiprocessing.Process(target=decrypt_rf)
    Process482 = multiprocessing.Process(target=decrypt_rh)
    Process483 = multiprocessing.Process(target=decrypt_rj)
    Process484 = multiprocessing.Process(target=decrypt_rl)
    Process485 = multiprocessing.Process(target=decrypt_rn)
    Process486 = multiprocessing.Process(target=decrypt_rp)
    Process487 = multiprocessing.Process(target=decrypt_rr)
    Process488 = multiprocessing.Process(target=decrypt_rt)
    Process489 = multiprocessing.Process(target=decrypt_rv)
    Process490 = multiprocessing.Process(target=decrypt_rx)
    Process491 = multiprocessing.Process(target=decrypt_rz)
    Process492 = multiprocessing.Process(target=decrypt_rA)
    Process493 = multiprocessing.Process(target=decrypt_rB)
    Process494 = multiprocessing.Process(target=decrypt_rD)
    Process495 = multiprocessing.Process(target=decrypt_rF)
    Process496 = multiprocessing.Process(target=decrypt_rH)
    Process497 = multiprocessing.Process(target=decrypt_rJ)
    Process498 = multiprocessing.Process(target=decrypt_rL)
    Process499 = multiprocessing.Process(target=decrypt_rN)
    Process500 = multiprocessing.Process(target=decrypt_rP)
    Process501 = multiprocessing.Process(target=decrypt_rR)
    Process502 = multiprocessing.Process(target=decrypt_rT)
    Process503 = multiprocessing.Process(target=decrypt_rV)
    Process504 = multiprocessing.Process(target=decrypt_rX)
    Process505 = multiprocessing.Process(target=decrypt_rZ)
    Process506 = multiprocessing.Process(target=decrypt_r0)
    Process507 = multiprocessing.Process(target=decrypt_r2)
    Process508 = multiprocessing.Process(target=decrypt_r4)
    Process509 = multiprocessing.Process(target=decrypt_r6)
    Process510 = multiprocessing.Process(target=decrypt_r8)
    Process511 = multiprocessing.Process(target=decrypt_rexcl)
    Process512 = multiprocessing.Process(target=decrypt_rdquote)
    Process513 = multiprocessing.Process(target=decrypt_rdoll)
    Process514 = multiprocessing.Process(target=decrypt_rand)
    Process515 = multiprocessing.Process(target=decrypt_rquote)
    Process516 = multiprocessing.Process(target=decrypt_rpar)
    Process517 = multiprocessing.Process(target=decrypt_rast)
    Process518 = multiprocessing.Process(target=decrypt_rvir)
    Process519 = multiprocessing.Process(target=decrypt_rpp)
    Process520 = multiprocessing.Process(target=decrypt_rtp)
    Process521 = multiprocessing.Process(target=decrypt_rless)
    Process522 = multiprocessing.Process(target=decrypt_rmore)
    Process523 = multiprocessing.Process(target=decrypt_raro)
    Process524 = multiprocessing.Process(target=decrypt_rcroc)
    Process525 = multiprocessing.Process(target=decrypt_rbsl)
    Process526 = multiprocessing.Process(target=decrypt_rcirc)
    Process527 = multiprocessing.Process(target=decrypt_resp)
    Process528 = multiprocessing.Process(target=decrypt_rcr)
    Process529 = multiprocessing.Process(target=decrypt_rhl)
    Process530 = multiprocessing.Process(target=decrypt_rtild)
    Process531 = multiprocessing.Process(target=decrypt_ta)
    Process532 = multiprocessing.Process(target=decrypt_tb)
    Process533 = multiprocessing.Process(target=decrypt_td)
    Process534 = multiprocessing.Process(target=decrypt_tf)
    Process535 = multiprocessing.Process(target=decrypt_th)
    Process536 = multiprocessing.Process(target=decrypt_tj)
    Process537 = multiprocessing.Process(target=decrypt_tl)
    Process538 = multiprocessing.Process(target=decrypt_tn)
    Process539 = multiprocessing.Process(target=decrypt_tp)
    Process540 = multiprocessing.Process(target=decrypt_tr)
    Process541 = multiprocessing.Process(target=decrypt_tt)
    Process542 = multiprocessing.Process(target=decrypt_tv)
    Process543 = multiprocessing.Process(target=decrypt_tx)
    Process544 = multiprocessing.Process(target=decrypt_tz)
    Process545 = multiprocessing.Process(target=decrypt_tA)
    Process546 = multiprocessing.Process(target=decrypt_tB)
    Process547 = multiprocessing.Process(target=decrypt_tD)
    Process548 = multiprocessing.Process(target=decrypt_tF)
    Process549 = multiprocessing.Process(target=decrypt_tH)
    Process550 = multiprocessing.Process(target=decrypt_tJ)
    Process551 = multiprocessing.Process(target=decrypt_tL)
    Process552 = multiprocessing.Process(target=decrypt_tN)
    Process553 = multiprocessing.Process(target=decrypt_tP)
    Process554 = multiprocessing.Process(target=decrypt_tR)
    Process555 = multiprocessing.Process(target=decrypt_tT)
    Process556 = multiprocessing.Process(target=decrypt_tV)
    Process557 = multiprocessing.Process(target=decrypt_tX)
    Process558 = multiprocessing.Process(target=decrypt_tZ)
    Process559 = multiprocessing.Process(target=decrypt_t0)
    Process560 = multiprocessing.Process(target=decrypt_t2)
    Process561 = multiprocessing.Process(target=decrypt_t4)
    Process562 = multiprocessing.Process(target=decrypt_t6)
    Process563 = multiprocessing.Process(target=decrypt_t8)
    Process564 = multiprocessing.Process(target=decrypt_texcl)
    Process565 = multiprocessing.Process(target=decrypt_tdquote)
    Process566 = multiprocessing.Process(target=decrypt_tdoll)
    Process567 = multiprocessing.Process(target=decrypt_tand)
    Process568 = multiprocessing.Process(target=decrypt_tquote)
    Process569 = multiprocessing.Process(target=decrypt_tpar)
    Process570 = multiprocessing.Process(target=decrypt_tast)
    Process571 = multiprocessing.Process(target=decrypt_tvir)
    Process572 = multiprocessing.Process(target=decrypt_tpp)
    Process573 = multiprocessing.Process(target=decrypt_ttp)
    Process574 = multiprocessing.Process(target=decrypt_tless)
    Process575 = multiprocessing.Process(target=decrypt_tmore)
    Process576 = multiprocessing.Process(target=decrypt_taro)
    Process577 = multiprocessing.Process(target=decrypt_tcroc)
    Process578 = multiprocessing.Process(target=decrypt_tbsl)
    Process579 = multiprocessing.Process(target=decrypt_tcirc)
    Process580 = multiprocessing.Process(target=decrypt_tesp)
    Process581 = multiprocessing.Process(target=decrypt_tcr)
    Process582 = multiprocessing.Process(target=decrypt_thl)
    Process583 = multiprocessing.Process(target=decrypt_ttild)
    Process584 = multiprocessing.Process(target=decrypt_va)
    Process585 = multiprocessing.Process(target=decrypt_vb)
    Process586 = multiprocessing.Process(target=decrypt_vd)
    Process587 = multiprocessing.Process(target=decrypt_vf)
    Process588 = multiprocessing.Process(target=decrypt_vh)
    Process589 = multiprocessing.Process(target=decrypt_vj)
    Process590 = multiprocessing.Process(target=decrypt_vl)
    Process591 = multiprocessing.Process(target=decrypt_vn)
    Process592 = multiprocessing.Process(target=decrypt_vp)
    Process593 = multiprocessing.Process(target=decrypt_vr)
    Process594 = multiprocessing.Process(target=decrypt_vt)
    Process595 = multiprocessing.Process(target=decrypt_vv)
    Process596 = multiprocessing.Process(target=decrypt_vx)
    Process597 = multiprocessing.Process(target=decrypt_vz)
    Process598 = multiprocessing.Process(target=decrypt_vA)
    Process599 = multiprocessing.Process(target=decrypt_vB)
    Process600 = multiprocessing.Process(target=decrypt_vD)
    Process601 = multiprocessing.Process(target=decrypt_vF)
    Process602 = multiprocessing.Process(target=decrypt_vH)
    Process603 = multiprocessing.Process(target=decrypt_vJ)
    Process604 = multiprocessing.Process(target=decrypt_vL)
    Process605 = multiprocessing.Process(target=decrypt_vN)
    Process606 = multiprocessing.Process(target=decrypt_vP)
    Process607 = multiprocessing.Process(target=decrypt_vR)
    Process608 = multiprocessing.Process(target=decrypt_vT)
    Process609 = multiprocessing.Process(target=decrypt_vV)
    Process610 = multiprocessing.Process(target=decrypt_vX)
    Process611 = multiprocessing.Process(target=decrypt_vZ)
    Process612 = multiprocessing.Process(target=decrypt_v0)
    Process613 = multiprocessing.Process(target=decrypt_v2)
    Process614 = multiprocessing.Process(target=decrypt_v4)
    Process615 = multiprocessing.Process(target=decrypt_v6)
    Process616 = multiprocessing.Process(target=decrypt_v8)
    Process617 = multiprocessing.Process(target=decrypt_vexcl)
    Process618 = multiprocessing.Process(target=decrypt_vdquote)
    Process619 = multiprocessing.Process(target=decrypt_vdoll)
    Process620 = multiprocessing.Process(target=decrypt_vand)
    Process621 = multiprocessing.Process(target=decrypt_vquote)
    Process622 = multiprocessing.Process(target=decrypt_vpar)
    Process623 = multiprocessing.Process(target=decrypt_vast)
    Process624 = multiprocessing.Process(target=decrypt_vvir)
    Process625 = multiprocessing.Process(target=decrypt_vpp)
    Process626 = multiprocessing.Process(target=decrypt_vtp)
    Process627 = multiprocessing.Process(target=decrypt_vless)
    Process628 = multiprocessing.Process(target=decrypt_vmore)
    Process629 = multiprocessing.Process(target=decrypt_varo)
    Process630 = multiprocessing.Process(target=decrypt_vcroc)
    Process631 = multiprocessing.Process(target=decrypt_vbsl)
    Process632 = multiprocessing.Process(target=decrypt_vcirc)
    Process633 = multiprocessing.Process(target=decrypt_vesp)
    Process634 = multiprocessing.Process(target=decrypt_vcr)
    Process635 = multiprocessing.Process(target=decrypt_vhl)
    Process636 = multiprocessing.Process(target=decrypt_vtild)
    Process637 = multiprocessing.Process(target=decrypt_xa)
    Process638 = multiprocessing.Process(target=decrypt_xb)
    Process639 = multiprocessing.Process(target=decrypt_xd)
    Process640 = multiprocessing.Process(target=decrypt_xf)
    Process641 = multiprocessing.Process(target=decrypt_xh)
    Process642 = multiprocessing.Process(target=decrypt_xj)
    Process643 = multiprocessing.Process(target=decrypt_xl)
    Process644 = multiprocessing.Process(target=decrypt_xn)
    Process645 = multiprocessing.Process(target=decrypt_xp)
    Process646 = multiprocessing.Process(target=decrypt_xr)
    Process647 = multiprocessing.Process(target=decrypt_xt)
    Process648 = multiprocessing.Process(target=decrypt_xv)
    Process649 = multiprocessing.Process(target=decrypt_xx)
    Process650 = multiprocessing.Process(target=decrypt_xz)
    Process651 = multiprocessing.Process(target=decrypt_xA)
    Process652 = multiprocessing.Process(target=decrypt_xB)
    Process653 = multiprocessing.Process(target=decrypt_xD)
    Process654 = multiprocessing.Process(target=decrypt_xF)
    Process655 = multiprocessing.Process(target=decrypt_xH)
    Process656 = multiprocessing.Process(target=decrypt_xJ)
    Process657 = multiprocessing.Process(target=decrypt_xL)
    Process658 = multiprocessing.Process(target=decrypt_xN)
    Process659 = multiprocessing.Process(target=decrypt_xP)
    Process660 = multiprocessing.Process(target=decrypt_xR)
    Process661 = multiprocessing.Process(target=decrypt_xT)
    Process662 = multiprocessing.Process(target=decrypt_xV)
    Process663 = multiprocessing.Process(target=decrypt_xX)
    Process664 = multiprocessing.Process(target=decrypt_xZ)
    Process665 = multiprocessing.Process(target=decrypt_x0)
    Process666 = multiprocessing.Process(target=decrypt_x2)
    Process667 = multiprocessing.Process(target=decrypt_x4)
    Process668 = multiprocessing.Process(target=decrypt_x6)
    Process669 = multiprocessing.Process(target=decrypt_x8)
    Process670 = multiprocessing.Process(target=decrypt_xexcl)
    Process671 = multiprocessing.Process(target=decrypt_xdquote)
    Process672 = multiprocessing.Process(target=decrypt_xdoll)
    Process673 = multiprocessing.Process(target=decrypt_xand)
    Process674 = multiprocessing.Process(target=decrypt_xquote)
    Process675 = multiprocessing.Process(target=decrypt_xpar)
    Process676 = multiprocessing.Process(target=decrypt_xast)
    Process677 = multiprocessing.Process(target=decrypt_xvir)
    Process678 = multiprocessing.Process(target=decrypt_xpp)
    Process679 = multiprocessing.Process(target=decrypt_xtp)
    Process680 = multiprocessing.Process(target=decrypt_xless)
    Process681 = multiprocessing.Process(target=decrypt_xmore)
    Process682 = multiprocessing.Process(target=decrypt_xaro)
    Process683 = multiprocessing.Process(target=decrypt_xcroc)
    Process684 = multiprocessing.Process(target=decrypt_xbsl)
    Process685 = multiprocessing.Process(target=decrypt_xcirc)
    Process686 = multiprocessing.Process(target=decrypt_xesp)
    Process687 = multiprocessing.Process(target=decrypt_xcr)
    Process688 = multiprocessing.Process(target=decrypt_xhl)
    Process689 = multiprocessing.Process(target=decrypt_xtild)
    Process690 = multiprocessing.Process(target=decrypt_za)
    Process691 = multiprocessing.Process(target=decrypt_zb)
    Process692 = multiprocessing.Process(target=decrypt_zd)
    Process693 = multiprocessing.Process(target=decrypt_zf)
    Process694 = multiprocessing.Process(target=decrypt_zh)
    Process695 = multiprocessing.Process(target=decrypt_zj)
    Process696 = multiprocessing.Process(target=decrypt_zl)
    Process697 = multiprocessing.Process(target=decrypt_zn)
    Process698 = multiprocessing.Process(target=decrypt_zp)
    Process699 = multiprocessing.Process(target=decrypt_zr)
    Process700 = multiprocessing.Process(target=decrypt_zt)
    Process701 = multiprocessing.Process(target=decrypt_zv)
    Process702 = multiprocessing.Process(target=decrypt_zx)
    Process703 = multiprocessing.Process(target=decrypt_zz)
    Process704 = multiprocessing.Process(target=decrypt_zA)
    Process705 = multiprocessing.Process(target=decrypt_zB)
    Process706 = multiprocessing.Process(target=decrypt_zD)
    Process707 = multiprocessing.Process(target=decrypt_zF)
    Process708 = multiprocessing.Process(target=decrypt_zH)
    Process709 = multiprocessing.Process(target=decrypt_zJ)
    Process710 = multiprocessing.Process(target=decrypt_zL)
    Process711 = multiprocessing.Process(target=decrypt_zN)
    Process712 = multiprocessing.Process(target=decrypt_zP)
    Process713 = multiprocessing.Process(target=decrypt_zR)
    Process714 = multiprocessing.Process(target=decrypt_zT)
    Process715 = multiprocessing.Process(target=decrypt_zV)
    Process716 = multiprocessing.Process(target=decrypt_zX)
    Process717 = multiprocessing.Process(target=decrypt_zZ)
    Process718 = multiprocessing.Process(target=decrypt_z0)
    Process719 = multiprocessing.Process(target=decrypt_z2)
    Process720 = multiprocessing.Process(target=decrypt_z4)
    Process721 = multiprocessing.Process(target=decrypt_z6)
    Process722 = multiprocessing.Process(target=decrypt_z8)
    Process723 = multiprocessing.Process(target=decrypt_zexcl)
    Process724 = multiprocessing.Process(target=decrypt_zdquote)
    Process725 = multiprocessing.Process(target=decrypt_zdoll)
    Process726 = multiprocessing.Process(target=decrypt_zand)
    Process727 = multiprocessing.Process(target=decrypt_zquote)
    Process728 = multiprocessing.Process(target=decrypt_zpar)
    Process729 = multiprocessing.Process(target=decrypt_zast)
    Process730 = multiprocessing.Process(target=decrypt_zvir)
    Process731 = multiprocessing.Process(target=decrypt_zpp)
    Process732 = multiprocessing.Process(target=decrypt_ztp)
    Process733 = multiprocessing.Process(target=decrypt_zless)
    Process734 = multiprocessing.Process(target=decrypt_zmore)
    Process735 = multiprocessing.Process(target=decrypt_zaro)
    Process736 = multiprocessing.Process(target=decrypt_zcroc)
    Process737 = multiprocessing.Process(target=decrypt_zbsl)
    Process738 = multiprocessing.Process(target=decrypt_zcirc)
    Process739 = multiprocessing.Process(target=decrypt_zesp)
    Process740 = multiprocessing.Process(target=decrypt_zcr)
    Process741 = multiprocessing.Process(target=decrypt_zhl)
    Process742 = multiprocessing.Process(target=decrypt_ztild)
    Process743 = multiprocessing.Process(target=decrypt_Aa)
    Process744 = multiprocessing.Process(target=decrypt_Ab)
    Process745 = multiprocessing.Process(target=decrypt_Ad)
    Process746 = multiprocessing.Process(target=decrypt_Af)
    Process747 = multiprocessing.Process(target=decrypt_Ah)
    Process748 = multiprocessing.Process(target=decrypt_Aj)
    Process749 = multiprocessing.Process(target=decrypt_Al)
    Process750 = multiprocessing.Process(target=decrypt_An)
    Process751 = multiprocessing.Process(target=decrypt_Ap)
    Process752 = multiprocessing.Process(target=decrypt_Ar)
    Process753 = multiprocessing.Process(target=decrypt_At)
    Process754 = multiprocessing.Process(target=decrypt_Av)
    Process755 = multiprocessing.Process(target=decrypt_Ax)
    Process756 = multiprocessing.Process(target=decrypt_Az)
    Process757 = multiprocessing.Process(target=decrypt_AA)
    Process758 = multiprocessing.Process(target=decrypt_AB)
    Process759 = multiprocessing.Process(target=decrypt_AD)
    Process760 = multiprocessing.Process(target=decrypt_AF)
    Process761 = multiprocessing.Process(target=decrypt_AH)
    Process762 = multiprocessing.Process(target=decrypt_AJ)
    Process763 = multiprocessing.Process(target=decrypt_AL)
    Process764 = multiprocessing.Process(target=decrypt_AN)
    Process765 = multiprocessing.Process(target=decrypt_AP)
    Process766 = multiprocessing.Process(target=decrypt_AR)
    Process767 = multiprocessing.Process(target=decrypt_AT)
    Process768 = multiprocessing.Process(target=decrypt_AV)
    Process769 = multiprocessing.Process(target=decrypt_AX)
    Process770 = multiprocessing.Process(target=decrypt_AZ)
    Process771 = multiprocessing.Process(target=decrypt_A0)
    Process772 = multiprocessing.Process(target=decrypt_A2)
    Process773 = multiprocessing.Process(target=decrypt_A4)
    Process774 = multiprocessing.Process(target=decrypt_A6)
    Process775 = multiprocessing.Process(target=decrypt_A8)
    Process776 = multiprocessing.Process(target=decrypt_Aexcl)
    Process777 = multiprocessing.Process(target=decrypt_Adquote)
    Process778 = multiprocessing.Process(target=decrypt_Adoll)
    Process779 = multiprocessing.Process(target=decrypt_Aand)
    Process780 = multiprocessing.Process(target=decrypt_Aquote)
    Process781 = multiprocessing.Process(target=decrypt_Apar)
    Process782 = multiprocessing.Process(target=decrypt_Aast)
    Process783 = multiprocessing.Process(target=decrypt_Avir)
    Process784 = multiprocessing.Process(target=decrypt_App)
    Process785 = multiprocessing.Process(target=decrypt_Atp)
    Process786 = multiprocessing.Process(target=decrypt_Aless)
    Process787 = multiprocessing.Process(target=decrypt_Amore)
    Process788 = multiprocessing.Process(target=decrypt_Aaro)
    Process789 = multiprocessing.Process(target=decrypt_Acroc)
    Process790 = multiprocessing.Process(target=decrypt_Absl)
    Process791 = multiprocessing.Process(target=decrypt_Acirc)
    Process792 = multiprocessing.Process(target=decrypt_Aesp)
    Process793 = multiprocessing.Process(target=decrypt_Acr)
    Process794 = multiprocessing.Process(target=decrypt_Ahl)
    Process795 = multiprocessing.Process(target=decrypt_Atild)
    Process796 = multiprocessing.Process(target=decrypt_Ba)
    Process797 = multiprocessing.Process(target=decrypt_Bb)
    Process798 = multiprocessing.Process(target=decrypt_Bd)
    Process799 = multiprocessing.Process(target=decrypt_Bf)
    Process800 = multiprocessing.Process(target=decrypt_Bh)
    Process801 = multiprocessing.Process(target=decrypt_Bj)
    Process802 = multiprocessing.Process(target=decrypt_Bl)
    Process803 = multiprocessing.Process(target=decrypt_Bn)
    Process804 = multiprocessing.Process(target=decrypt_Bp)
    Process805 = multiprocessing.Process(target=decrypt_Br)
    Process806 = multiprocessing.Process(target=decrypt_Bt)
    Process807 = multiprocessing.Process(target=decrypt_Bv)
    Process808 = multiprocessing.Process(target=decrypt_Bx)
    Process809 = multiprocessing.Process(target=decrypt_Bz)
    Process810 = multiprocessing.Process(target=decrypt_BA)
    Process811 = multiprocessing.Process(target=decrypt_BB)
    Process812 = multiprocessing.Process(target=decrypt_BD)
    Process813 = multiprocessing.Process(target=decrypt_BF)
    Process814 = multiprocessing.Process(target=decrypt_BH)
    Process815 = multiprocessing.Process(target=decrypt_BJ)
    Process816 = multiprocessing.Process(target=decrypt_BL)
    Process817 = multiprocessing.Process(target=decrypt_BN)
    Process818 = multiprocessing.Process(target=decrypt_BP)
    Process819 = multiprocessing.Process(target=decrypt_BR)
    Process820 = multiprocessing.Process(target=decrypt_BT)
    Process821 = multiprocessing.Process(target=decrypt_BV)
    Process822 = multiprocessing.Process(target=decrypt_BX)
    Process823 = multiprocessing.Process(target=decrypt_BZ)
    Process824 = multiprocessing.Process(target=decrypt_B0)
    Process825 = multiprocessing.Process(target=decrypt_B2)
    Process826 = multiprocessing.Process(target=decrypt_B4)
    Process827 = multiprocessing.Process(target=decrypt_B6)
    Process828 = multiprocessing.Process(target=decrypt_B8)
    Process829 = multiprocessing.Process(target=decrypt_Bexcl)
    Process830 = multiprocessing.Process(target=decrypt_Bdquote)
    Process831 = multiprocessing.Process(target=decrypt_Bdoll)
    Process832 = multiprocessing.Process(target=decrypt_Band)
    Process833 = multiprocessing.Process(target=decrypt_Bquote)
    Process834 = multiprocessing.Process(target=decrypt_Bpar)
    Process835 = multiprocessing.Process(target=decrypt_Bast)
    Process836 = multiprocessing.Process(target=decrypt_Bvir)
    Process837 = multiprocessing.Process(target=decrypt_Bpp)
    Process838 = multiprocessing.Process(target=decrypt_Btp)
    Process839 = multiprocessing.Process(target=decrypt_Bless)
    Process840 = multiprocessing.Process(target=decrypt_Bmore)
    Process841 = multiprocessing.Process(target=decrypt_Baro)
    Process842 = multiprocessing.Process(target=decrypt_Bcroc)
    Process843 = multiprocessing.Process(target=decrypt_Bbsl)
    Process844 = multiprocessing.Process(target=decrypt_Bcirc)
    Process845 = multiprocessing.Process(target=decrypt_Besp)
    Process846 = multiprocessing.Process(target=decrypt_Bcr)
    Process847 = multiprocessing.Process(target=decrypt_Bhl)
    Process848 = multiprocessing.Process(target=decrypt_Btild)
    Process849 = multiprocessing.Process(target=decrypt_Da)
    Process850 = multiprocessing.Process(target=decrypt_Db)
    Process851 = multiprocessing.Process(target=decrypt_Dd)
    Process852 = multiprocessing.Process(target=decrypt_Df)
    Process853 = multiprocessing.Process(target=decrypt_Dh)
    Process854 = multiprocessing.Process(target=decrypt_Dj)
    Process855 = multiprocessing.Process(target=decrypt_Dl)
    Process856 = multiprocessing.Process(target=decrypt_Dn)
    Process857 = multiprocessing.Process(target=decrypt_Dp)
    Process858 = multiprocessing.Process(target=decrypt_Dr)
    Process859 = multiprocessing.Process(target=decrypt_Dt)
    Process860 = multiprocessing.Process(target=decrypt_Dv)
    Process861 = multiprocessing.Process(target=decrypt_Dx)
    Process862 = multiprocessing.Process(target=decrypt_Dz)
    Process863 = multiprocessing.Process(target=decrypt_DA)
    Process864 = multiprocessing.Process(target=decrypt_DB)
    Process865 = multiprocessing.Process(target=decrypt_DD)
    Process866 = multiprocessing.Process(target=decrypt_DF)
    Process867 = multiprocessing.Process(target=decrypt_DH)
    Process868 = multiprocessing.Process(target=decrypt_DJ)
    Process869 = multiprocessing.Process(target=decrypt_DL)
    Process870 = multiprocessing.Process(target=decrypt_DN)
    Process871 = multiprocessing.Process(target=decrypt_DP)
    Process872 = multiprocessing.Process(target=decrypt_DR)
    Process873 = multiprocessing.Process(target=decrypt_DT)
    Process874 = multiprocessing.Process(target=decrypt_DV)
    Process875 = multiprocessing.Process(target=decrypt_DX)
    Process876 = multiprocessing.Process(target=decrypt_DZ)
    Process877 = multiprocessing.Process(target=decrypt_D0)
    Process878 = multiprocessing.Process(target=decrypt_D2)
    Process879 = multiprocessing.Process(target=decrypt_D4)
    Process880 = multiprocessing.Process(target=decrypt_D6)
    Process881 = multiprocessing.Process(target=decrypt_D8)
    Process882 = multiprocessing.Process(target=decrypt_Dexcl)
    Process883 = multiprocessing.Process(target=decrypt_Ddquote)
    Process884 = multiprocessing.Process(target=decrypt_Ddoll)
    Process885 = multiprocessing.Process(target=decrypt_Dand)
    Process886 = multiprocessing.Process(target=decrypt_Dquote)
    Process887 = multiprocessing.Process(target=decrypt_Dpar)
    Process888 = multiprocessing.Process(target=decrypt_Dast)
    Process889 = multiprocessing.Process(target=decrypt_Dvir)
    Process890 = multiprocessing.Process(target=decrypt_Dpp)
    Process891 = multiprocessing.Process(target=decrypt_Dtp)
    Process892 = multiprocessing.Process(target=decrypt_Dless)
    Process893 = multiprocessing.Process(target=decrypt_Dmore)
    Process894 = multiprocessing.Process(target=decrypt_Daro)
    Process895 = multiprocessing.Process(target=decrypt_Dcroc)
    Process896 = multiprocessing.Process(target=decrypt_Dbsl)
    Process897 = multiprocessing.Process(target=decrypt_Dcirc)
    Process898 = multiprocessing.Process(target=decrypt_Desp)
    Process899 = multiprocessing.Process(target=decrypt_Dcr)
    Process900 = multiprocessing.Process(target=decrypt_Dhl)
    Process901 = multiprocessing.Process(target=decrypt_Dtild)
    Process902 = multiprocessing.Process(target=decrypt_Fa)
    Process903 = multiprocessing.Process(target=decrypt_Fb)
    Process904 = multiprocessing.Process(target=decrypt_Fd)
    Process905 = multiprocessing.Process(target=decrypt_Ff)
    Process906 = multiprocessing.Process(target=decrypt_Fh)
    Process907 = multiprocessing.Process(target=decrypt_Fj)
    Process908 = multiprocessing.Process(target=decrypt_Fl)
    Process909 = multiprocessing.Process(target=decrypt_Fn)
    Process910 = multiprocessing.Process(target=decrypt_Fp)
    Process911 = multiprocessing.Process(target=decrypt_Fr)
    Process912 = multiprocessing.Process(target=decrypt_Ft)
    Process913 = multiprocessing.Process(target=decrypt_Fv)
    Process914 = multiprocessing.Process(target=decrypt_Fx)
    Process915 = multiprocessing.Process(target=decrypt_Fz)
    Process916 = multiprocessing.Process(target=decrypt_FA)
    Process917 = multiprocessing.Process(target=decrypt_FB)
    Process918 = multiprocessing.Process(target=decrypt_FD)
    Process919 = multiprocessing.Process(target=decrypt_FF)
    Process920 = multiprocessing.Process(target=decrypt_FH)
    Process921 = multiprocessing.Process(target=decrypt_FJ)
    Process922 = multiprocessing.Process(target=decrypt_FL)
    Process923 = multiprocessing.Process(target=decrypt_FN)
    Process924 = multiprocessing.Process(target=decrypt_FP)
    Process925 = multiprocessing.Process(target=decrypt_FR)
    Process926 = multiprocessing.Process(target=decrypt_FT)
    Process927 = multiprocessing.Process(target=decrypt_FV)
    Process928 = multiprocessing.Process(target=decrypt_FX)
    Process929 = multiprocessing.Process(target=decrypt_FZ)
    Process930 = multiprocessing.Process(target=decrypt_F0)
    Process931 = multiprocessing.Process(target=decrypt_F2)
    Process932 = multiprocessing.Process(target=decrypt_F4)
    Process933 = multiprocessing.Process(target=decrypt_F6)
    Process934 = multiprocessing.Process(target=decrypt_F8)
    Process935 = multiprocessing.Process(target=decrypt_Fexcl)
    Process936 = multiprocessing.Process(target=decrypt_Fdquote)
    Process937 = multiprocessing.Process(target=decrypt_Fdoll)
    Process938 = multiprocessing.Process(target=decrypt_Fand)
    Process939 = multiprocessing.Process(target=decrypt_Fquote)
    Process940 = multiprocessing.Process(target=decrypt_Fpar)
    Process941 = multiprocessing.Process(target=decrypt_Fast)
    Process942 = multiprocessing.Process(target=decrypt_Fvir)
    Process943 = multiprocessing.Process(target=decrypt_Fpp)
    Process944 = multiprocessing.Process(target=decrypt_Ftp)
    Process945 = multiprocessing.Process(target=decrypt_Fless)
    Process946 = multiprocessing.Process(target=decrypt_Fmore)
    Process947 = multiprocessing.Process(target=decrypt_Faro)
    Process948 = multiprocessing.Process(target=decrypt_Fcroc)
    Process949 = multiprocessing.Process(target=decrypt_Fbsl)
    Process950 = multiprocessing.Process(target=decrypt_Fcirc)
    Process951 = multiprocessing.Process(target=decrypt_Fesp)
    Process952 = multiprocessing.Process(target=decrypt_Fcr)
    Process953 = multiprocessing.Process(target=decrypt_Fhl)
    Process954 = multiprocessing.Process(target=decrypt_Ftild)
    Process955 = multiprocessing.Process(target=decrypt_Ha)
    Process956 = multiprocessing.Process(target=decrypt_Hb)
    Process957 = multiprocessing.Process(target=decrypt_Hd)
    Process958 = multiprocessing.Process(target=decrypt_Hf)
    Process959 = multiprocessing.Process(target=decrypt_Hh)
    Process960 = multiprocessing.Process(target=decrypt_Hj)
    Process961 = multiprocessing.Process(target=decrypt_Hl)
    Process962 = multiprocessing.Process(target=decrypt_Hn)
    Process963 = multiprocessing.Process(target=decrypt_Hp)
    Process964 = multiprocessing.Process(target=decrypt_Hr)
    Process965 = multiprocessing.Process(target=decrypt_Ht)
    Process966 = multiprocessing.Process(target=decrypt_Hv)
    Process967 = multiprocessing.Process(target=decrypt_Hx)
    Process968 = multiprocessing.Process(target=decrypt_Hz)
    Process969 = multiprocessing.Process(target=decrypt_HA)
    Process970 = multiprocessing.Process(target=decrypt_HB)
    Process971 = multiprocessing.Process(target=decrypt_HD)
    Process972 = multiprocessing.Process(target=decrypt_HF)
    Process973 = multiprocessing.Process(target=decrypt_HH)
    Process974 = multiprocessing.Process(target=decrypt_HJ)
    Process975 = multiprocessing.Process(target=decrypt_HL)
    Process976 = multiprocessing.Process(target=decrypt_HN)
    Process977 = multiprocessing.Process(target=decrypt_HP)
    Process978 = multiprocessing.Process(target=decrypt_HR)
    Process979 = multiprocessing.Process(target=decrypt_HT)
    Process980 = multiprocessing.Process(target=decrypt_HV)
    Process981 = multiprocessing.Process(target=decrypt_HX)
    Process982 = multiprocessing.Process(target=decrypt_HZ)
    Process983 = multiprocessing.Process(target=decrypt_H0)
    Process984 = multiprocessing.Process(target=decrypt_H2)
    Process985 = multiprocessing.Process(target=decrypt_H4)
    Process986 = multiprocessing.Process(target=decrypt_H6)
    Process987 = multiprocessing.Process(target=decrypt_H8)
    Process988 = multiprocessing.Process(target=decrypt_Hexcl)
    Process989 = multiprocessing.Process(target=decrypt_Hdquote)
    Process990 = multiprocessing.Process(target=decrypt_Hdoll)
    Process991 = multiprocessing.Process(target=decrypt_Hand)
    Process992 = multiprocessing.Process(target=decrypt_Hquote)
    Process993 = multiprocessing.Process(target=decrypt_Hpar)
    Process994 = multiprocessing.Process(target=decrypt_Hast)
    Process995 = multiprocessing.Process(target=decrypt_Hvir)
    Process996 = multiprocessing.Process(target=decrypt_Hpp)
    Process997 = multiprocessing.Process(target=decrypt_Htp)
    Process998 = multiprocessing.Process(target=decrypt_Hless)
    Process999 = multiprocessing.Process(target=decrypt_Hmore)
    Process1000 = multiprocessing.Process(target=decrypt_Haro)
    Process1001 = multiprocessing.Process(target=decrypt_Hcroc)
    Process1002 = multiprocessing.Process(target=decrypt_Hbsl)
    Process1003 = multiprocessing.Process(target=decrypt_Hcirc)
    Process1004 = multiprocessing.Process(target=decrypt_Hesp)
    Process1005 = multiprocessing.Process(target=decrypt_Hcr)
    Process1006 = multiprocessing.Process(target=decrypt_Hhl)
    Process1007 = multiprocessing.Process(target=decrypt_Htild)
    Process1008 = multiprocessing.Process(target=decrypt_Ja)
    Process1009 = multiprocessing.Process(target=decrypt_Jb)
    Process1010 = multiprocessing.Process(target=decrypt_Jd)
    Process1011 = multiprocessing.Process(target=decrypt_Jf)
    Process1012 = multiprocessing.Process(target=decrypt_Jh)
    Process1013 = multiprocessing.Process(target=decrypt_Jj)
    Process1014 = multiprocessing.Process(target=decrypt_Jl)
    Process1015 = multiprocessing.Process(target=decrypt_Jn)
    Process1016 = multiprocessing.Process(target=decrypt_Jp)
    Process1017 = multiprocessing.Process(target=decrypt_Jr)
    Process1018 = multiprocessing.Process(target=decrypt_Jt)
    Process1019 = multiprocessing.Process(target=decrypt_Jv)
    Process1020 = multiprocessing.Process(target=decrypt_Jx)
    Process1021 = multiprocessing.Process(target=decrypt_Jz)
    Process1022 = multiprocessing.Process(target=decrypt_JA)
    Process1023 = multiprocessing.Process(target=decrypt_JB)
    Process1024 = multiprocessing.Process(target=decrypt_JD)
    Process1025 = multiprocessing.Process(target=decrypt_JF)
    Process1026 = multiprocessing.Process(target=decrypt_JH)
    Process1027 = multiprocessing.Process(target=decrypt_JJ)
    Process1028 = multiprocessing.Process(target=decrypt_JL)
    Process1029 = multiprocessing.Process(target=decrypt_JN)
    Process1030 = multiprocessing.Process(target=decrypt_JP)
    Process1031 = multiprocessing.Process(target=decrypt_JR)
    Process1032 = multiprocessing.Process(target=decrypt_JT)
    Process1033 = multiprocessing.Process(target=decrypt_JV)
    Process1034 = multiprocessing.Process(target=decrypt_JX)
    Process1035 = multiprocessing.Process(target=decrypt_JZ)
    Process1036 = multiprocessing.Process(target=decrypt_J0)
    Process1037 = multiprocessing.Process(target=decrypt_J2)
    Process1038 = multiprocessing.Process(target=decrypt_J4)
    Process1039 = multiprocessing.Process(target=decrypt_J6)
    Process1040 = multiprocessing.Process(target=decrypt_J8)
    Process1041 = multiprocessing.Process(target=decrypt_Jexcl)
    Process1042 = multiprocessing.Process(target=decrypt_Jdquote)
    Process1043 = multiprocessing.Process(target=decrypt_Jdoll)
    Process1044 = multiprocessing.Process(target=decrypt_Jand)
    Process1045 = multiprocessing.Process(target=decrypt_Jquote)
    Process1046 = multiprocessing.Process(target=decrypt_Jpar)
    Process1047 = multiprocessing.Process(target=decrypt_Jast)
    Process1048 = multiprocessing.Process(target=decrypt_Jvir)
    Process1049 = multiprocessing.Process(target=decrypt_Jpp)
    Process1050 = multiprocessing.Process(target=decrypt_Jtp)
    Process1051 = multiprocessing.Process(target=decrypt_Jless)
    Process1052 = multiprocessing.Process(target=decrypt_Jmore)
    Process1053 = multiprocessing.Process(target=decrypt_Jaro)
    Process1054 = multiprocessing.Process(target=decrypt_Jcroc)
    Process1055 = multiprocessing.Process(target=decrypt_Jbsl)
    Process1056 = multiprocessing.Process(target=decrypt_Jcirc)
    Process1057 = multiprocessing.Process(target=decrypt_Jesp)
    Process1058 = multiprocessing.Process(target=decrypt_Jcr)
    Process1059 = multiprocessing.Process(target=decrypt_Jhl)
    Process1060 = multiprocessing.Process(target=decrypt_Jtild)
    Process1061 = multiprocessing.Process(target=decrypt_La)
    Process1062 = multiprocessing.Process(target=decrypt_Lb)
    Process1063 = multiprocessing.Process(target=decrypt_Ld)
    Process1064 = multiprocessing.Process(target=decrypt_Lf)
    Process1065 = multiprocessing.Process(target=decrypt_Lh)
    Process1066 = multiprocessing.Process(target=decrypt_Lj)
    Process1067 = multiprocessing.Process(target=decrypt_Ll)
    Process1068 = multiprocessing.Process(target=decrypt_Ln)
    Process1069 = multiprocessing.Process(target=decrypt_Lp)
    Process1070 = multiprocessing.Process(target=decrypt_Lr)
    Process1071 = multiprocessing.Process(target=decrypt_Lt)
    Process1072 = multiprocessing.Process(target=decrypt_Lv)
    Process1073 = multiprocessing.Process(target=decrypt_Lx)
    Process1074 = multiprocessing.Process(target=decrypt_Lz)
    Process1075 = multiprocessing.Process(target=decrypt_LA)
    Process1076 = multiprocessing.Process(target=decrypt_LB)
    Process1077 = multiprocessing.Process(target=decrypt_LD)
    Process1078 = multiprocessing.Process(target=decrypt_LF)
    Process1079 = multiprocessing.Process(target=decrypt_LH)
    Process1080 = multiprocessing.Process(target=decrypt_LJ)
    Process1081 = multiprocessing.Process(target=decrypt_LL)
    Process1082 = multiprocessing.Process(target=decrypt_LN)
    Process1083 = multiprocessing.Process(target=decrypt_LP)
    Process1084 = multiprocessing.Process(target=decrypt_LR)
    Process1085 = multiprocessing.Process(target=decrypt_LT)
    Process1086 = multiprocessing.Process(target=decrypt_LV)
    Process1087 = multiprocessing.Process(target=decrypt_LX)
    Process1088 = multiprocessing.Process(target=decrypt_LZ)
    Process1089 = multiprocessing.Process(target=decrypt_L0)
    Process1090 = multiprocessing.Process(target=decrypt_L2)
    Process1091 = multiprocessing.Process(target=decrypt_L4)
    Process1092 = multiprocessing.Process(target=decrypt_L6)
    Process1093 = multiprocessing.Process(target=decrypt_L8)
    Process1094 = multiprocessing.Process(target=decrypt_Lexcl)
    Process1095 = multiprocessing.Process(target=decrypt_Ldquote)
    Process1096 = multiprocessing.Process(target=decrypt_Ldoll)
    Process1097 = multiprocessing.Process(target=decrypt_Land)
    Process1098 = multiprocessing.Process(target=decrypt_Lquote)
    Process1099 = multiprocessing.Process(target=decrypt_Lpar)
    Process1100 = multiprocessing.Process(target=decrypt_Last)
    Process1101 = multiprocessing.Process(target=decrypt_Lvir)
    Process1102 = multiprocessing.Process(target=decrypt_Lpp)
    Process1103 = multiprocessing.Process(target=decrypt_Ltp)
    Process1104 = multiprocessing.Process(target=decrypt_Lless)
    Process1105 = multiprocessing.Process(target=decrypt_Lmore)
    Process1106 = multiprocessing.Process(target=decrypt_Laro)
    Process1107 = multiprocessing.Process(target=decrypt_Lcroc)
    Process1108 = multiprocessing.Process(target=decrypt_Lbsl)
    Process1109 = multiprocessing.Process(target=decrypt_Lcirc)
    Process1110 = multiprocessing.Process(target=decrypt_Lesp)
    Process1111 = multiprocessing.Process(target=decrypt_Lcr)
    Process1112 = multiprocessing.Process(target=decrypt_Lhl)
    Process1113 = multiprocessing.Process(target=decrypt_Ltild)
    Process1114 = multiprocessing.Process(target=decrypt_Na)
    Process1115 = multiprocessing.Process(target=decrypt_Nb)
    Process1116 = multiprocessing.Process(target=decrypt_Nd)
    Process1117 = multiprocessing.Process(target=decrypt_Nf)
    Process1118 = multiprocessing.Process(target=decrypt_Nh)
    Process1119 = multiprocessing.Process(target=decrypt_Nj)
    Process1120 = multiprocessing.Process(target=decrypt_Nl)
    Process1121 = multiprocessing.Process(target=decrypt_Nn)
    Process1122 = multiprocessing.Process(target=decrypt_Np)
    Process1123 = multiprocessing.Process(target=decrypt_Nr)
    Process1124 = multiprocessing.Process(target=decrypt_Nt)
    Process1125 = multiprocessing.Process(target=decrypt_Nv)
    Process1126 = multiprocessing.Process(target=decrypt_Nx)
    Process1127 = multiprocessing.Process(target=decrypt_Nz)
    Process1128 = multiprocessing.Process(target=decrypt_NA)
    Process1129 = multiprocessing.Process(target=decrypt_NB)
    Process1130 = multiprocessing.Process(target=decrypt_ND)
    Process1131 = multiprocessing.Process(target=decrypt_NF)
    Process1132 = multiprocessing.Process(target=decrypt_NH)
    Process1133 = multiprocessing.Process(target=decrypt_NJ)
    Process1134 = multiprocessing.Process(target=decrypt_NL)
    Process1135 = multiprocessing.Process(target=decrypt_NN)
    Process1136 = multiprocessing.Process(target=decrypt_NP)
    Process1137 = multiprocessing.Process(target=decrypt_NR)
    Process1138 = multiprocessing.Process(target=decrypt_NT)
    Process1139 = multiprocessing.Process(target=decrypt_NV)
    Process1140 = multiprocessing.Process(target=decrypt_NX)
    Process1141 = multiprocessing.Process(target=decrypt_NZ)
    Process1142 = multiprocessing.Process(target=decrypt_N0)
    Process1143 = multiprocessing.Process(target=decrypt_N2)
    Process1144 = multiprocessing.Process(target=decrypt_N4)
    Process1145 = multiprocessing.Process(target=decrypt_N6)
    Process1146 = multiprocessing.Process(target=decrypt_N8)
    Process1147 = multiprocessing.Process(target=decrypt_Nexcl)
    Process1148 = multiprocessing.Process(target=decrypt_Ndquote)
    Process1149 = multiprocessing.Process(target=decrypt_Ndoll)
    Process1150 = multiprocessing.Process(target=decrypt_Nand)
    Process1151 = multiprocessing.Process(target=decrypt_Nquote)
    Process1152 = multiprocessing.Process(target=decrypt_Npar)
    Process1153 = multiprocessing.Process(target=decrypt_Nast)
    Process1154 = multiprocessing.Process(target=decrypt_Nvir)
    Process1155 = multiprocessing.Process(target=decrypt_Npp)
    Process1156 = multiprocessing.Process(target=decrypt_Ntp)
    Process1157 = multiprocessing.Process(target=decrypt_Nless)
    Process1158 = multiprocessing.Process(target=decrypt_Nmore)
    Process1159 = multiprocessing.Process(target=decrypt_Naro)
    Process1160 = multiprocessing.Process(target=decrypt_Ncroc)
    Process1161 = multiprocessing.Process(target=decrypt_Nbsl)
    Process1162 = multiprocessing.Process(target=decrypt_Ncirc)
    Process1163 = multiprocessing.Process(target=decrypt_Nesp)
    Process1164 = multiprocessing.Process(target=decrypt_Ncr)
    Process1165 = multiprocessing.Process(target=decrypt_Nhl)
    Process1166 = multiprocessing.Process(target=decrypt_Ntild)
    Process1167 = multiprocessing.Process(target=decrypt_Pa)
    Process1168 = multiprocessing.Process(target=decrypt_Pb)
    Process1169 = multiprocessing.Process(target=decrypt_Pd)
    Process1170 = multiprocessing.Process(target=decrypt_Pf)
    Process1171 = multiprocessing.Process(target=decrypt_Ph)
    Process1172 = multiprocessing.Process(target=decrypt_Pj)
    Process1173 = multiprocessing.Process(target=decrypt_Pl)
    Process1174 = multiprocessing.Process(target=decrypt_Pn)
    Process1175 = multiprocessing.Process(target=decrypt_Pp)
    Process1176 = multiprocessing.Process(target=decrypt_Pr)
    Process1177 = multiprocessing.Process(target=decrypt_Pt)
    Process1178 = multiprocessing.Process(target=decrypt_Pv)
    Process1179 = multiprocessing.Process(target=decrypt_Px)
    Process1180 = multiprocessing.Process(target=decrypt_Pz)
    Process1181 = multiprocessing.Process(target=decrypt_PA)
    Process1182 = multiprocessing.Process(target=decrypt_PB)
    Process1183 = multiprocessing.Process(target=decrypt_PD)
    Process1184 = multiprocessing.Process(target=decrypt_PF)
    Process1185 = multiprocessing.Process(target=decrypt_PH)
    Process1186 = multiprocessing.Process(target=decrypt_PJ)
    Process1187 = multiprocessing.Process(target=decrypt_PL)
    Process1188 = multiprocessing.Process(target=decrypt_PN)
    Process1189 = multiprocessing.Process(target=decrypt_PP)
    Process1190 = multiprocessing.Process(target=decrypt_PR)
    Process1191 = multiprocessing.Process(target=decrypt_PT)
    Process1192 = multiprocessing.Process(target=decrypt_PV)
    Process1193 = multiprocessing.Process(target=decrypt_PX)
    Process1194 = multiprocessing.Process(target=decrypt_PZ)
    Process1195 = multiprocessing.Process(target=decrypt_P0)
    Process1196 = multiprocessing.Process(target=decrypt_P2)
    Process1197 = multiprocessing.Process(target=decrypt_P4)
    Process1198 = multiprocessing.Process(target=decrypt_P6)
    Process1199 = multiprocessing.Process(target=decrypt_P8)
    Process1200 = multiprocessing.Process(target=decrypt_Pexcl)
    Process1201 = multiprocessing.Process(target=decrypt_Pdquote)
    Process1202 = multiprocessing.Process(target=decrypt_Pdoll)
    Process1203 = multiprocessing.Process(target=decrypt_Pand)
    Process1204 = multiprocessing.Process(target=decrypt_Pquote)
    Process1205 = multiprocessing.Process(target=decrypt_Ppar)
    Process1206 = multiprocessing.Process(target=decrypt_Past)
    Process1207 = multiprocessing.Process(target=decrypt_Pvir)
    Process1208 = multiprocessing.Process(target=decrypt_Ppp)
    Process1209 = multiprocessing.Process(target=decrypt_Ptp)
    Process1210 = multiprocessing.Process(target=decrypt_Pless)
    Process1211 = multiprocessing.Process(target=decrypt_Pmore)
    Process1212 = multiprocessing.Process(target=decrypt_Paro)
    Process1213 = multiprocessing.Process(target=decrypt_Pcroc)
    Process1214 = multiprocessing.Process(target=decrypt_Pbsl)
    Process1215 = multiprocessing.Process(target=decrypt_Pcirc)
    Process1216 = multiprocessing.Process(target=decrypt_Pesp)
    Process1217 = multiprocessing.Process(target=decrypt_Pcr)
    Process1218 = multiprocessing.Process(target=decrypt_Phl)
    Process1219 = multiprocessing.Process(target=decrypt_Ptild)
    Process1220 = multiprocessing.Process(target=decrypt_Ra)
    Process1221 = multiprocessing.Process(target=decrypt_Rb)
    Process1222 = multiprocessing.Process(target=decrypt_Rd)
    Process1223 = multiprocessing.Process(target=decrypt_Rf)
    Process1224 = multiprocessing.Process(target=decrypt_Rh)
    Process1225 = multiprocessing.Process(target=decrypt_Rj)
    Process1226 = multiprocessing.Process(target=decrypt_Rl)
    Process1227 = multiprocessing.Process(target=decrypt_Rn)
    Process1228 = multiprocessing.Process(target=decrypt_Rp)
    Process1229 = multiprocessing.Process(target=decrypt_Rr)
    Process1230 = multiprocessing.Process(target=decrypt_Rt)
    Process1231 = multiprocessing.Process(target=decrypt_Rv)
    Process1232 = multiprocessing.Process(target=decrypt_Rx)
    Process1233 = multiprocessing.Process(target=decrypt_Rz)
    Process1234 = multiprocessing.Process(target=decrypt_RA)
    Process1235 = multiprocessing.Process(target=decrypt_RB)
    Process1236 = multiprocessing.Process(target=decrypt_RD)
    Process1237 = multiprocessing.Process(target=decrypt_RF)
    Process1238 = multiprocessing.Process(target=decrypt_RH)
    Process1239 = multiprocessing.Process(target=decrypt_RJ)
    Process1240 = multiprocessing.Process(target=decrypt_RL)
    Process1241 = multiprocessing.Process(target=decrypt_RN)
    Process1242 = multiprocessing.Process(target=decrypt_RP)
    Process1243 = multiprocessing.Process(target=decrypt_RR)
    Process1244 = multiprocessing.Process(target=decrypt_RT)
    Process1245 = multiprocessing.Process(target=decrypt_RV)
    Process1246 = multiprocessing.Process(target=decrypt_RX)
    Process1247 = multiprocessing.Process(target=decrypt_RZ)
    Process1248 = multiprocessing.Process(target=decrypt_R0)
    Process1249 = multiprocessing.Process(target=decrypt_R2)
    Process1250 = multiprocessing.Process(target=decrypt_R4)
    Process1251 = multiprocessing.Process(target=decrypt_R6)
    Process1252 = multiprocessing.Process(target=decrypt_R8)
    Process1253 = multiprocessing.Process(target=decrypt_Rexcl)
    Process1254 = multiprocessing.Process(target=decrypt_Rdquote)
    Process1255 = multiprocessing.Process(target=decrypt_Rdoll)
    Process1256 = multiprocessing.Process(target=decrypt_Rand)
    Process1257 = multiprocessing.Process(target=decrypt_Rquote)
    Process1258 = multiprocessing.Process(target=decrypt_Rpar)
    Process1259 = multiprocessing.Process(target=decrypt_Rast)
    Process1260 = multiprocessing.Process(target=decrypt_Rvir)
    Process1261 = multiprocessing.Process(target=decrypt_Rpp)
    Process1262 = multiprocessing.Process(target=decrypt_Rtp)
    Process1263 = multiprocessing.Process(target=decrypt_Rless)
    Process1264 = multiprocessing.Process(target=decrypt_Rmore)
    Process1265 = multiprocessing.Process(target=decrypt_Raro)
    Process1266 = multiprocessing.Process(target=decrypt_Rcroc)
    Process1267 = multiprocessing.Process(target=decrypt_Rbsl)
    Process1268 = multiprocessing.Process(target=decrypt_Rcirc)
    Process1269 = multiprocessing.Process(target=decrypt_Resp)
    Process1270 = multiprocessing.Process(target=decrypt_Rcr)
    Process1271 = multiprocessing.Process(target=decrypt_Rhl)
    Process1272 = multiprocessing.Process(target=decrypt_Rtild)
    Process1273 = multiprocessing.Process(target=decrypt_Ta)
    Process1274 = multiprocessing.Process(target=decrypt_Tb)
    Process1275 = multiprocessing.Process(target=decrypt_Td)
    Process1276 = multiprocessing.Process(target=decrypt_Tf)
    Process1277 = multiprocessing.Process(target=decrypt_Th)
    Process1278 = multiprocessing.Process(target=decrypt_Tj)
    Process1279 = multiprocessing.Process(target=decrypt_Tl)
    Process1280 = multiprocessing.Process(target=decrypt_Tn)
    Process1281 = multiprocessing.Process(target=decrypt_Tp)
    Process1282 = multiprocessing.Process(target=decrypt_Tr)
    Process1283 = multiprocessing.Process(target=decrypt_Tt)
    Process1284 = multiprocessing.Process(target=decrypt_Tv)
    Process1285 = multiprocessing.Process(target=decrypt_Tx)
    Process1286 = multiprocessing.Process(target=decrypt_Tz)
    Process1287 = multiprocessing.Process(target=decrypt_TA)
    Process1288 = multiprocessing.Process(target=decrypt_TB)
    Process1289 = multiprocessing.Process(target=decrypt_TD)
    Process1290 = multiprocessing.Process(target=decrypt_TF)
    Process1291 = multiprocessing.Process(target=decrypt_TH)
    Process1292 = multiprocessing.Process(target=decrypt_TJ)
    Process1293 = multiprocessing.Process(target=decrypt_TL)
    Process1294 = multiprocessing.Process(target=decrypt_TN)
    Process1295 = multiprocessing.Process(target=decrypt_TP)
    Process1296 = multiprocessing.Process(target=decrypt_TR)
    Process1297 = multiprocessing.Process(target=decrypt_TT)
    Process1298 = multiprocessing.Process(target=decrypt_TV)
    Process1299 = multiprocessing.Process(target=decrypt_TX)
    Process1300 = multiprocessing.Process(target=decrypt_TZ)
    Process1301 = multiprocessing.Process(target=decrypt_T0)
    Process1302 = multiprocessing.Process(target=decrypt_T2)
    Process1303 = multiprocessing.Process(target=decrypt_T4)
    Process1304 = multiprocessing.Process(target=decrypt_T6)
    Process1305 = multiprocessing.Process(target=decrypt_T8)
    Process1306 = multiprocessing.Process(target=decrypt_Texcl)
    Process1307 = multiprocessing.Process(target=decrypt_Tdquote)
    Process1308 = multiprocessing.Process(target=decrypt_Tdoll)
    Process1309 = multiprocessing.Process(target=decrypt_Tand)
    Process1310 = multiprocessing.Process(target=decrypt_Tquote)
    Process1311 = multiprocessing.Process(target=decrypt_Tpar)
    Process1312 = multiprocessing.Process(target=decrypt_Tast)
    Process1313 = multiprocessing.Process(target=decrypt_Tvir)
    Process1314 = multiprocessing.Process(target=decrypt_Tpp)
    Process1315 = multiprocessing.Process(target=decrypt_Ttp)
    Process1316 = multiprocessing.Process(target=decrypt_Tless)
    Process1317 = multiprocessing.Process(target=decrypt_Tmore)
    Process1318 = multiprocessing.Process(target=decrypt_Taro)
    Process1319 = multiprocessing.Process(target=decrypt_Tcroc)
    Process1320 = multiprocessing.Process(target=decrypt_Tbsl)
    Process1321 = multiprocessing.Process(target=decrypt_Tcirc)
    Process1322 = multiprocessing.Process(target=decrypt_Tesp)
    Process1323 = multiprocessing.Process(target=decrypt_Tcr)
    Process1324 = multiprocessing.Process(target=decrypt_Thl)
    Process1325 = multiprocessing.Process(target=decrypt_Ttild)
    Process1326 = multiprocessing.Process(target=decrypt_Va)
    Process1327 = multiprocessing.Process(target=decrypt_Vb)
    Process1328 = multiprocessing.Process(target=decrypt_Vd)
    Process1329 = multiprocessing.Process(target=decrypt_Vf)
    Process1330 = multiprocessing.Process(target=decrypt_Vh)
    Process1331 = multiprocessing.Process(target=decrypt_Vj)
    Process1332 = multiprocessing.Process(target=decrypt_Vl)
    Process1333 = multiprocessing.Process(target=decrypt_Vn)
    Process1334 = multiprocessing.Process(target=decrypt_Vp)
    Process1335 = multiprocessing.Process(target=decrypt_Vr)
    Process1336 = multiprocessing.Process(target=decrypt_Vt)
    Process1337 = multiprocessing.Process(target=decrypt_Vv)
    Process1338 = multiprocessing.Process(target=decrypt_Vx)
    Process1339 = multiprocessing.Process(target=decrypt_Vz)
    Process1340 = multiprocessing.Process(target=decrypt_VA)
    Process1341 = multiprocessing.Process(target=decrypt_VB)
    Process1342 = multiprocessing.Process(target=decrypt_VD)
    Process1343 = multiprocessing.Process(target=decrypt_VF)
    Process1344 = multiprocessing.Process(target=decrypt_VH)
    Process1345 = multiprocessing.Process(target=decrypt_VJ)
    Process1346 = multiprocessing.Process(target=decrypt_VL)
    Process1347 = multiprocessing.Process(target=decrypt_VN)
    Process1348 = multiprocessing.Process(target=decrypt_VP)
    Process1349 = multiprocessing.Process(target=decrypt_VR)
    Process1350 = multiprocessing.Process(target=decrypt_VT)
    Process1351 = multiprocessing.Process(target=decrypt_VV)
    Process1352 = multiprocessing.Process(target=decrypt_VX)
    Process1353 = multiprocessing.Process(target=decrypt_VZ)
    Process1354 = multiprocessing.Process(target=decrypt_V0)
    Process1355 = multiprocessing.Process(target=decrypt_V2)
    Process1356 = multiprocessing.Process(target=decrypt_V4)
    Process1357 = multiprocessing.Process(target=decrypt_V6)
    Process1358 = multiprocessing.Process(target=decrypt_V8)
    Process1359 = multiprocessing.Process(target=decrypt_Vexcl)
    Process1360 = multiprocessing.Process(target=decrypt_Vdquote)
    Process1361 = multiprocessing.Process(target=decrypt_Vdoll)
    Process1362 = multiprocessing.Process(target=decrypt_Vand)
    Process1363 = multiprocessing.Process(target=decrypt_Vquote)
    Process1364 = multiprocessing.Process(target=decrypt_Vpar)
    Process1365 = multiprocessing.Process(target=decrypt_Vast)
    Process1366 = multiprocessing.Process(target=decrypt_Vvir)
    Process1367 = multiprocessing.Process(target=decrypt_Vpp)
    Process1368 = multiprocessing.Process(target=decrypt_Vtp)
    Process1369 = multiprocessing.Process(target=decrypt_Vless)
    Process1370 = multiprocessing.Process(target=decrypt_Vmore)
    Process1371 = multiprocessing.Process(target=decrypt_Varo)
    Process1372 = multiprocessing.Process(target=decrypt_Vcroc)
    Process1373 = multiprocessing.Process(target=decrypt_Vbsl)
    Process1374 = multiprocessing.Process(target=decrypt_Vcirc)
    Process1375 = multiprocessing.Process(target=decrypt_Vesp)
    Process1376 = multiprocessing.Process(target=decrypt_Vcr)
    Process1377 = multiprocessing.Process(target=decrypt_Vhl)
    Process1378 = multiprocessing.Process(target=decrypt_Vtild)
    Process1379 = multiprocessing.Process(target=decrypt_Xa)
    Process1380 = multiprocessing.Process(target=decrypt_Xb)
    Process1381 = multiprocessing.Process(target=decrypt_Xd)
    Process1382 = multiprocessing.Process(target=decrypt_Xf)
    Process1383 = multiprocessing.Process(target=decrypt_Xh)
    Process1384 = multiprocessing.Process(target=decrypt_Xj)
    Process1385 = multiprocessing.Process(target=decrypt_Xl)
    Process1386 = multiprocessing.Process(target=decrypt_Xn)
    Process1387 = multiprocessing.Process(target=decrypt_Xp)
    Process1388 = multiprocessing.Process(target=decrypt_Xr)
    Process1389 = multiprocessing.Process(target=decrypt_Xt)
    Process1390 = multiprocessing.Process(target=decrypt_Xv)
    Process1391 = multiprocessing.Process(target=decrypt_Xx)
    Process1392 = multiprocessing.Process(target=decrypt_Xz)
    Process1393 = multiprocessing.Process(target=decrypt_XA)
    Process1394 = multiprocessing.Process(target=decrypt_XB)
    Process1395 = multiprocessing.Process(target=decrypt_XD)
    Process1396 = multiprocessing.Process(target=decrypt_XF)
    Process1397 = multiprocessing.Process(target=decrypt_XH)
    Process1398 = multiprocessing.Process(target=decrypt_XJ)
    Process1399 = multiprocessing.Process(target=decrypt_XL)
    Process1400 = multiprocessing.Process(target=decrypt_XN)
    Process1401 = multiprocessing.Process(target=decrypt_XP)
    Process1402 = multiprocessing.Process(target=decrypt_XR)
    Process1403 = multiprocessing.Process(target=decrypt_XT)
    Process1404 = multiprocessing.Process(target=decrypt_XV)
    Process1405 = multiprocessing.Process(target=decrypt_XX)
    Process1406 = multiprocessing.Process(target=decrypt_XZ)
    Process1407 = multiprocessing.Process(target=decrypt_X0)
    Process1408 = multiprocessing.Process(target=decrypt_X2)
    Process1409 = multiprocessing.Process(target=decrypt_X4)
    Process1410 = multiprocessing.Process(target=decrypt_X6)
    Process1411 = multiprocessing.Process(target=decrypt_X8)
    Process1412 = multiprocessing.Process(target=decrypt_Xexcl)
    Process1413 = multiprocessing.Process(target=decrypt_Xdquote)
    Process1414 = multiprocessing.Process(target=decrypt_Xdoll)
    Process1415 = multiprocessing.Process(target=decrypt_Xand)
    Process1416 = multiprocessing.Process(target=decrypt_Xquote)
    Process1417 = multiprocessing.Process(target=decrypt_Xpar)
    Process1418 = multiprocessing.Process(target=decrypt_Xast)
    Process1419 = multiprocessing.Process(target=decrypt_Xvir)
    Process1420 = multiprocessing.Process(target=decrypt_Xpp)
    Process1421 = multiprocessing.Process(target=decrypt_Xtp)
    Process1422 = multiprocessing.Process(target=decrypt_Xless)
    Process1423 = multiprocessing.Process(target=decrypt_Xmore)
    Process1424 = multiprocessing.Process(target=decrypt_Xaro)
    Process1425 = multiprocessing.Process(target=decrypt_Xcroc)
    Process1426 = multiprocessing.Process(target=decrypt_Xbsl)
    Process1427 = multiprocessing.Process(target=decrypt_Xcirc)
    Process1428 = multiprocessing.Process(target=decrypt_Xesp)
    Process1429 = multiprocessing.Process(target=decrypt_Xcr)
    Process1430 = multiprocessing.Process(target=decrypt_Xhl)
    Process1431 = multiprocessing.Process(target=decrypt_Xtild)
    Process1432 = multiprocessing.Process(target=decrypt_Za)
    Process1433 = multiprocessing.Process(target=decrypt_Zb)
    Process1434 = multiprocessing.Process(target=decrypt_Zd)
    Process1435 = multiprocessing.Process(target=decrypt_Zf)
    Process1436 = multiprocessing.Process(target=decrypt_Zh)
    Process1437 = multiprocessing.Process(target=decrypt_Zj)
    Process1438 = multiprocessing.Process(target=decrypt_Zl)
    Process1439 = multiprocessing.Process(target=decrypt_Zn)
    Process1440 = multiprocessing.Process(target=decrypt_Zp)
    Process1441 = multiprocessing.Process(target=decrypt_Zr)
    Process1442 = multiprocessing.Process(target=decrypt_Zt)
    Process1443 = multiprocessing.Process(target=decrypt_Zv)
    Process1444 = multiprocessing.Process(target=decrypt_Zx)
    Process1445 = multiprocessing.Process(target=decrypt_Zz)
    Process1446 = multiprocessing.Process(target=decrypt_ZA)
    Process1447 = multiprocessing.Process(target=decrypt_ZB)
    Process1448 = multiprocessing.Process(target=decrypt_ZD)
    Process1449 = multiprocessing.Process(target=decrypt_ZF)
    Process1450 = multiprocessing.Process(target=decrypt_ZH)
    Process1451 = multiprocessing.Process(target=decrypt_ZJ)
    Process1452 = multiprocessing.Process(target=decrypt_ZL)
    Process1453 = multiprocessing.Process(target=decrypt_ZN)
    Process1454 = multiprocessing.Process(target=decrypt_ZP)
    Process1455 = multiprocessing.Process(target=decrypt_ZR)
    Process1456 = multiprocessing.Process(target=decrypt_ZT)
    Process1457 = multiprocessing.Process(target=decrypt_ZV)
    Process1458 = multiprocessing.Process(target=decrypt_ZX)
    Process1459 = multiprocessing.Process(target=decrypt_ZZ)
    Process1460 = multiprocessing.Process(target=decrypt_Z0)
    Process1461 = multiprocessing.Process(target=decrypt_Z2)
    Process1462 = multiprocessing.Process(target=decrypt_Z4)
    Process1463 = multiprocessing.Process(target=decrypt_Z6)
    Process1464 = multiprocessing.Process(target=decrypt_Z8)
    Process1465 = multiprocessing.Process(target=decrypt_Zexcl)
    Process1466 = multiprocessing.Process(target=decrypt_Zdquote)
    Process1467 = multiprocessing.Process(target=decrypt_Zdoll)
    Process1468 = multiprocessing.Process(target=decrypt_Zand)
    Process1469 = multiprocessing.Process(target=decrypt_Zquote)
    Process1470 = multiprocessing.Process(target=decrypt_Zpar)
    Process1471 = multiprocessing.Process(target=decrypt_Zast)
    Process1472 = multiprocessing.Process(target=decrypt_Zvir)
    Process1473 = multiprocessing.Process(target=decrypt_Zpp)
    Process1474 = multiprocessing.Process(target=decrypt_Ztp)
    Process1475 = multiprocessing.Process(target=decrypt_Zless)
    Process1476 = multiprocessing.Process(target=decrypt_Zmore)
    Process1477 = multiprocessing.Process(target=decrypt_Zaro)
    Process1478 = multiprocessing.Process(target=decrypt_Zcroc)
    Process1479 = multiprocessing.Process(target=decrypt_Zbsl)
    Process1480 = multiprocessing.Process(target=decrypt_Zcirc)
    Process1481 = multiprocessing.Process(target=decrypt_Zesp)
    Process1482 = multiprocessing.Process(target=decrypt_Zcr)
    Process1483 = multiprocessing.Process(target=decrypt_Zhl)
    Process1484 = multiprocessing.Process(target=decrypt_Ztild)
    Process1485 = multiprocessing.Process(target=decrypt_0a)
    Process1486 = multiprocessing.Process(target=decrypt_0b)
    Process1487 = multiprocessing.Process(target=decrypt_0d)
    Process1488 = multiprocessing.Process(target=decrypt_0f)
    Process1489 = multiprocessing.Process(target=decrypt_0h)
    Process1490 = multiprocessing.Process(target=decrypt_0j)
    Process1491 = multiprocessing.Process(target=decrypt_0l)
    Process1492 = multiprocessing.Process(target=decrypt_0n)
    Process1493 = multiprocessing.Process(target=decrypt_0p)
    Process1494 = multiprocessing.Process(target=decrypt_0r)
    Process1495 = multiprocessing.Process(target=decrypt_0t)
    Process1496 = multiprocessing.Process(target=decrypt_0v)
    Process1497 = multiprocessing.Process(target=decrypt_0x)
    Process1498 = multiprocessing.Process(target=decrypt_0z)
    Process1499 = multiprocessing.Process(target=decrypt_0A)
    Process1500 = multiprocessing.Process(target=decrypt_0B)
    Process1501 = multiprocessing.Process(target=decrypt_0D)
    Process1502 = multiprocessing.Process(target=decrypt_0F)
    Process1503 = multiprocessing.Process(target=decrypt_0H)
    Process1504 = multiprocessing.Process(target=decrypt_0J)
    Process1505 = multiprocessing.Process(target=decrypt_0L)
    Process1506 = multiprocessing.Process(target=decrypt_0N)
    Process1507 = multiprocessing.Process(target=decrypt_0P)
    Process1508 = multiprocessing.Process(target=decrypt_0R)
    Process1509 = multiprocessing.Process(target=decrypt_0T)
    Process1510 = multiprocessing.Process(target=decrypt_0V)
    Process1511 = multiprocessing.Process(target=decrypt_0X)
    Process1512 = multiprocessing.Process(target=decrypt_0Z)
    Process1513 = multiprocessing.Process(target=decrypt_00)
    Process1514 = multiprocessing.Process(target=decrypt_02)
    Process1515 = multiprocessing.Process(target=decrypt_04)
    Process1516 = multiprocessing.Process(target=decrypt_06)
    Process1517 = multiprocessing.Process(target=decrypt_08)
    Process1518 = multiprocessing.Process(target=decrypt_0excl)
    Process1519 = multiprocessing.Process(target=decrypt_0dquote)
    Process1520 = multiprocessing.Process(target=decrypt_0doll)
    Process1521 = multiprocessing.Process(target=decrypt_0and)
    Process1522 = multiprocessing.Process(target=decrypt_0quote)
    Process1523 = multiprocessing.Process(target=decrypt_0par)
    Process1524 = multiprocessing.Process(target=decrypt_0ast)
    Process1525 = multiprocessing.Process(target=decrypt_0vir)
    Process1526 = multiprocessing.Process(target=decrypt_0pp)
    Process1527 = multiprocessing.Process(target=decrypt_0tp)
    Process1528 = multiprocessing.Process(target=decrypt_0less)
    Process1529 = multiprocessing.Process(target=decrypt_0more)
    Process1530 = multiprocessing.Process(target=decrypt_0aro)
    Process1531 = multiprocessing.Process(target=decrypt_0croc)
    Process1532 = multiprocessing.Process(target=decrypt_0bsl)
    Process1533 = multiprocessing.Process(target=decrypt_0circ)
    Process1534 = multiprocessing.Process(target=decrypt_0esp)
    Process1535 = multiprocessing.Process(target=decrypt_0cr)
    Process1536 = multiprocessing.Process(target=decrypt_0hl)
    Process1537 = multiprocessing.Process(target=decrypt_0tild)
    Process1538 = multiprocessing.Process(target=decrypt_2a)
    Process1539 = multiprocessing.Process(target=decrypt_2b)
    Process1540 = multiprocessing.Process(target=decrypt_2d)
    Process1541 = multiprocessing.Process(target=decrypt_2f)
    Process1542 = multiprocessing.Process(target=decrypt_2h)
    Process1543 = multiprocessing.Process(target=decrypt_2j)
    Process1544 = multiprocessing.Process(target=decrypt_2l)
    Process1545 = multiprocessing.Process(target=decrypt_2n)
    Process1546 = multiprocessing.Process(target=decrypt_2p)
    Process1547 = multiprocessing.Process(target=decrypt_2r)
    Process1548 = multiprocessing.Process(target=decrypt_2t)
    Process1549 = multiprocessing.Process(target=decrypt_2v)
    Process1550 = multiprocessing.Process(target=decrypt_2x)
    Process1551 = multiprocessing.Process(target=decrypt_2z)
    Process1552 = multiprocessing.Process(target=decrypt_2A)
    Process1553 = multiprocessing.Process(target=decrypt_2B)
    Process1554 = multiprocessing.Process(target=decrypt_2D)
    Process1555 = multiprocessing.Process(target=decrypt_2F)
    Process1556 = multiprocessing.Process(target=decrypt_2H)
    Process1557 = multiprocessing.Process(target=decrypt_2J)
    Process1558 = multiprocessing.Process(target=decrypt_2L)
    Process1559 = multiprocessing.Process(target=decrypt_2N)
    Process1560 = multiprocessing.Process(target=decrypt_2P)
    Process1561 = multiprocessing.Process(target=decrypt_2R)
    Process1562 = multiprocessing.Process(target=decrypt_2T)
    Process1563 = multiprocessing.Process(target=decrypt_2V)
    Process1564 = multiprocessing.Process(target=decrypt_2X)
    Process1565 = multiprocessing.Process(target=decrypt_2Z)
    Process1566 = multiprocessing.Process(target=decrypt_20)
    Process1567 = multiprocessing.Process(target=decrypt_22)
    Process1568 = multiprocessing.Process(target=decrypt_24)
    Process1569 = multiprocessing.Process(target=decrypt_26)
    Process1570 = multiprocessing.Process(target=decrypt_28)
    Process1571 = multiprocessing.Process(target=decrypt_2excl)
    Process1572 = multiprocessing.Process(target=decrypt_2dquote)
    Process1573 = multiprocessing.Process(target=decrypt_2doll)
    Process1574 = multiprocessing.Process(target=decrypt_2and)
    Process1575 = multiprocessing.Process(target=decrypt_2quote)
    Process1576 = multiprocessing.Process(target=decrypt_2par)
    Process1577 = multiprocessing.Process(target=decrypt_2ast)
    Process1578 = multiprocessing.Process(target=decrypt_2vir)
    Process1579 = multiprocessing.Process(target=decrypt_2pp)
    Process1580 = multiprocessing.Process(target=decrypt_2tp)
    Process1581 = multiprocessing.Process(target=decrypt_2less)
    Process1582 = multiprocessing.Process(target=decrypt_2more)
    Process1583 = multiprocessing.Process(target=decrypt_2aro)
    Process1584 = multiprocessing.Process(target=decrypt_2croc)
    Process1585 = multiprocessing.Process(target=decrypt_2bsl)
    Process1586 = multiprocessing.Process(target=decrypt_2circ)
    Process1587 = multiprocessing.Process(target=decrypt_2esp)
    Process1588 = multiprocessing.Process(target=decrypt_2cr)
    Process1589 = multiprocessing.Process(target=decrypt_2hl)
    Process1590 = multiprocessing.Process(target=decrypt_2tild)
    Process1591 = multiprocessing.Process(target=decrypt_4a)
    Process1592 = multiprocessing.Process(target=decrypt_4b)
    Process1593 = multiprocessing.Process(target=decrypt_4d)
    Process1594 = multiprocessing.Process(target=decrypt_4f)
    Process1595 = multiprocessing.Process(target=decrypt_4h)
    Process1596 = multiprocessing.Process(target=decrypt_4j)
    Process1597 = multiprocessing.Process(target=decrypt_4l)
    Process1598 = multiprocessing.Process(target=decrypt_4n)
    Process1599 = multiprocessing.Process(target=decrypt_4p)
    Process1600 = multiprocessing.Process(target=decrypt_4r)
    Process1601 = multiprocessing.Process(target=decrypt_4t)
    Process1602 = multiprocessing.Process(target=decrypt_4v)
    Process1603 = multiprocessing.Process(target=decrypt_4x)
    Process1604 = multiprocessing.Process(target=decrypt_4z)
    Process1605 = multiprocessing.Process(target=decrypt_4A)
    Process1606 = multiprocessing.Process(target=decrypt_4B)
    Process1607 = multiprocessing.Process(target=decrypt_4D)
    Process1608 = multiprocessing.Process(target=decrypt_4F)
    Process1609 = multiprocessing.Process(target=decrypt_4H)
    Process1610 = multiprocessing.Process(target=decrypt_4J)
    Process1611 = multiprocessing.Process(target=decrypt_4L)
    Process1612 = multiprocessing.Process(target=decrypt_4N)
    Process1613 = multiprocessing.Process(target=decrypt_4P)
    Process1614 = multiprocessing.Process(target=decrypt_4R)
    Process1615 = multiprocessing.Process(target=decrypt_4T)
    Process1616 = multiprocessing.Process(target=decrypt_4V)
    Process1617 = multiprocessing.Process(target=decrypt_4X)
    Process1618 = multiprocessing.Process(target=decrypt_4Z)
    Process1619 = multiprocessing.Process(target=decrypt_40)
    Process1620 = multiprocessing.Process(target=decrypt_42)
    Process1621 = multiprocessing.Process(target=decrypt_44)
    Process1622 = multiprocessing.Process(target=decrypt_46)
    Process1623 = multiprocessing.Process(target=decrypt_48)
    Process1624 = multiprocessing.Process(target=decrypt_4excl)
    Process1625 = multiprocessing.Process(target=decrypt_4dquote)
    Process1626 = multiprocessing.Process(target=decrypt_4doll)
    Process1627 = multiprocessing.Process(target=decrypt_4and)
    Process1628 = multiprocessing.Process(target=decrypt_4quote)
    Process1629 = multiprocessing.Process(target=decrypt_4par)
    Process1630 = multiprocessing.Process(target=decrypt_4ast)
    Process1631 = multiprocessing.Process(target=decrypt_4vir)
    Process1632 = multiprocessing.Process(target=decrypt_4pp)
    Process1633 = multiprocessing.Process(target=decrypt_4tp)
    Process1634 = multiprocessing.Process(target=decrypt_4less)
    Process1635 = multiprocessing.Process(target=decrypt_4more)
    Process1636 = multiprocessing.Process(target=decrypt_4aro)
    Process1637 = multiprocessing.Process(target=decrypt_4croc)
    Process1638 = multiprocessing.Process(target=decrypt_4bsl)
    Process1639 = multiprocessing.Process(target=decrypt_4circ)
    Process1640 = multiprocessing.Process(target=decrypt_4esp)
    Process1641 = multiprocessing.Process(target=decrypt_4cr)
    Process1642 = multiprocessing.Process(target=decrypt_4hl)
    Process1643 = multiprocessing.Process(target=decrypt_4tild)
    Process1644 = multiprocessing.Process(target=decrypt_6a)
    Process1645 = multiprocessing.Process(target=decrypt_6b)
    Process1646 = multiprocessing.Process(target=decrypt_6d)
    Process1647 = multiprocessing.Process(target=decrypt_6f)
    Process1648 = multiprocessing.Process(target=decrypt_6h)
    Process1649 = multiprocessing.Process(target=decrypt_6j)
    Process1650 = multiprocessing.Process(target=decrypt_6l)
    Process1651 = multiprocessing.Process(target=decrypt_6n)
    Process1652 = multiprocessing.Process(target=decrypt_6p)
    Process1653 = multiprocessing.Process(target=decrypt_6r)
    Process1654 = multiprocessing.Process(target=decrypt_6t)
    Process1655 = multiprocessing.Process(target=decrypt_6v)
    Process1656 = multiprocessing.Process(target=decrypt_6x)
    Process1657 = multiprocessing.Process(target=decrypt_6z)
    Process1658 = multiprocessing.Process(target=decrypt_6A)
    Process1659 = multiprocessing.Process(target=decrypt_6B)
    Process1660 = multiprocessing.Process(target=decrypt_6D)
    Process1661 = multiprocessing.Process(target=decrypt_6F)
    Process1662 = multiprocessing.Process(target=decrypt_6H)
    Process1663 = multiprocessing.Process(target=decrypt_6J)
    Process1664 = multiprocessing.Process(target=decrypt_6L)
    Process1665 = multiprocessing.Process(target=decrypt_6N)
    Process1666 = multiprocessing.Process(target=decrypt_6P)
    Process1667 = multiprocessing.Process(target=decrypt_6R)
    Process1668 = multiprocessing.Process(target=decrypt_6T)
    Process1669 = multiprocessing.Process(target=decrypt_6V)
    Process1670 = multiprocessing.Process(target=decrypt_6X)
    Process1671 = multiprocessing.Process(target=decrypt_6Z)
    Process1672 = multiprocessing.Process(target=decrypt_60)
    Process1673 = multiprocessing.Process(target=decrypt_62)
    Process1674 = multiprocessing.Process(target=decrypt_64)
    Process1675 = multiprocessing.Process(target=decrypt_66)
    Process1676 = multiprocessing.Process(target=decrypt_68)
    Process1677 = multiprocessing.Process(target=decrypt_6excl)
    Process1678 = multiprocessing.Process(target=decrypt_6dquote)
    Process1679 = multiprocessing.Process(target=decrypt_6doll)
    Process1680 = multiprocessing.Process(target=decrypt_6and)
    Process1681 = multiprocessing.Process(target=decrypt_6quote)
    Process1682 = multiprocessing.Process(target=decrypt_6par)
    Process1683 = multiprocessing.Process(target=decrypt_6ast)
    Process1684 = multiprocessing.Process(target=decrypt_6vir)
    Process1685 = multiprocessing.Process(target=decrypt_6pp)
    Process1686 = multiprocessing.Process(target=decrypt_6tp)
    Process1687 = multiprocessing.Process(target=decrypt_6less)
    Process1688 = multiprocessing.Process(target=decrypt_6more)
    Process1689 = multiprocessing.Process(target=decrypt_6aro)
    Process1690 = multiprocessing.Process(target=decrypt_6croc)
    Process1691 = multiprocessing.Process(target=decrypt_6bsl)
    Process1692 = multiprocessing.Process(target=decrypt_6circ)
    Process1693 = multiprocessing.Process(target=decrypt_6esp)
    Process1694 = multiprocessing.Process(target=decrypt_6cr)
    Process1695 = multiprocessing.Process(target=decrypt_6hl)
    Process1696 = multiprocessing.Process(target=decrypt_6tild)
    Process1697 = multiprocessing.Process(target=decrypt_8a)
    Process1698 = multiprocessing.Process(target=decrypt_8b)
    Process1699 = multiprocessing.Process(target=decrypt_8d)
    Process1700 = multiprocessing.Process(target=decrypt_8f)
    Process1701 = multiprocessing.Process(target=decrypt_8h)
    Process1702 = multiprocessing.Process(target=decrypt_8j)
    Process1703 = multiprocessing.Process(target=decrypt_8l)
    Process1704 = multiprocessing.Process(target=decrypt_8n)
    Process1705 = multiprocessing.Process(target=decrypt_8p)
    Process1706 = multiprocessing.Process(target=decrypt_8r)
    Process1707 = multiprocessing.Process(target=decrypt_8t)
    Process1708 = multiprocessing.Process(target=decrypt_8v)
    Process1709 = multiprocessing.Process(target=decrypt_8x)
    Process1710 = multiprocessing.Process(target=decrypt_8z)
    Process1711 = multiprocessing.Process(target=decrypt_8A)
    Process1712 = multiprocessing.Process(target=decrypt_8B)
    Process1713 = multiprocessing.Process(target=decrypt_8D)
    Process1714 = multiprocessing.Process(target=decrypt_8F)
    Process1715 = multiprocessing.Process(target=decrypt_8H)
    Process1716 = multiprocessing.Process(target=decrypt_8J)
    Process1717 = multiprocessing.Process(target=decrypt_8L)
    Process1718 = multiprocessing.Process(target=decrypt_8N)
    Process1719 = multiprocessing.Process(target=decrypt_8P)
    Process1720 = multiprocessing.Process(target=decrypt_8R)
    Process1721 = multiprocessing.Process(target=decrypt_8T)
    Process1722 = multiprocessing.Process(target=decrypt_8V)
    Process1723 = multiprocessing.Process(target=decrypt_8X)
    Process1724 = multiprocessing.Process(target=decrypt_8Z)
    Process1725 = multiprocessing.Process(target=decrypt_80)
    Process1726 = multiprocessing.Process(target=decrypt_82)
    Process1727 = multiprocessing.Process(target=decrypt_84)
    Process1728 = multiprocessing.Process(target=decrypt_86)
    Process1729 = multiprocessing.Process(target=decrypt_88)
    Process1730 = multiprocessing.Process(target=decrypt_8excl)
    Process1731 = multiprocessing.Process(target=decrypt_8dquote)
    Process1732 = multiprocessing.Process(target=decrypt_8doll)
    Process1733 = multiprocessing.Process(target=decrypt_8and)
    Process1734 = multiprocessing.Process(target=decrypt_8quote)
    Process1735 = multiprocessing.Process(target=decrypt_8par)
    Process1736 = multiprocessing.Process(target=decrypt_8ast)
    Process1737 = multiprocessing.Process(target=decrypt_8vir)
    Process1738 = multiprocessing.Process(target=decrypt_8pp)
    Process1739 = multiprocessing.Process(target=decrypt_8tp)
    Process1740 = multiprocessing.Process(target=decrypt_8less)
    Process1741 = multiprocessing.Process(target=decrypt_8more)
    Process1742 = multiprocessing.Process(target=decrypt_8aro)
    Process1743 = multiprocessing.Process(target=decrypt_8croc)
    Process1744 = multiprocessing.Process(target=decrypt_8bsl)
    Process1745 = multiprocessing.Process(target=decrypt_8circ)
    Process1746 = multiprocessing.Process(target=decrypt_8esp)
    Process1747 = multiprocessing.Process(target=decrypt_8cr)
    Process1748 = multiprocessing.Process(target=decrypt_8hl)
    Process1749 = multiprocessing.Process(target=decrypt_8tild)
    Process1750 = multiprocessing.Process(target=decrypt_excla)
    Process1751 = multiprocessing.Process(target=decrypt_exclb)
    Process1752 = multiprocessing.Process(target=decrypt_excld)
    Process1753 = multiprocessing.Process(target=decrypt_exclf)
    Process1754 = multiprocessing.Process(target=decrypt_exclh)
    Process1755 = multiprocessing.Process(target=decrypt_exclj)
    Process1756 = multiprocessing.Process(target=decrypt_excll)
    Process1757 = multiprocessing.Process(target=decrypt_excln)
    Process1758 = multiprocessing.Process(target=decrypt_exclp)
    Process1759 = multiprocessing.Process(target=decrypt_exclr)
    Process1760 = multiprocessing.Process(target=decrypt_exclt)
    Process1761 = multiprocessing.Process(target=decrypt_exclv)
    Process1762 = multiprocessing.Process(target=decrypt_exclx)
    Process1763 = multiprocessing.Process(target=decrypt_exclz)
    Process1764 = multiprocessing.Process(target=decrypt_exclA)
    Process1765 = multiprocessing.Process(target=decrypt_exclB)
    Process1766 = multiprocessing.Process(target=decrypt_exclD)
    Process1767 = multiprocessing.Process(target=decrypt_exclF)
    Process1768 = multiprocessing.Process(target=decrypt_exclH)
    Process1769 = multiprocessing.Process(target=decrypt_exclJ)
    Process1770 = multiprocessing.Process(target=decrypt_exclL)
    Process1771 = multiprocessing.Process(target=decrypt_exclN)
    Process1772 = multiprocessing.Process(target=decrypt_exclP)
    Process1773 = multiprocessing.Process(target=decrypt_exclR)
    Process1774 = multiprocessing.Process(target=decrypt_exclT)
    Process1775 = multiprocessing.Process(target=decrypt_exclV)
    Process1776 = multiprocessing.Process(target=decrypt_exclX)
    Process1777 = multiprocessing.Process(target=decrypt_exclZ)
    Process1778 = multiprocessing.Process(target=decrypt_excl0)
    Process1779 = multiprocessing.Process(target=decrypt_excl2)
    Process1780 = multiprocessing.Process(target=decrypt_excl4)
    Process1781 = multiprocessing.Process(target=decrypt_excl6)
    Process1782 = multiprocessing.Process(target=decrypt_excl8)
    Process1783 = multiprocessing.Process(target=decrypt_exclexcl)
    Process1784 = multiprocessing.Process(target=decrypt_excldquote)
    Process1785 = multiprocessing.Process(target=decrypt_excldoll)
    Process1786 = multiprocessing.Process(target=decrypt_excland)
    Process1787 = multiprocessing.Process(target=decrypt_exclquote)
    Process1788 = multiprocessing.Process(target=decrypt_exclpar)
    Process1789 = multiprocessing.Process(target=decrypt_exclast)
    Process1790 = multiprocessing.Process(target=decrypt_exclvir)
    Process1791 = multiprocessing.Process(target=decrypt_exclpp)
    Process1792 = multiprocessing.Process(target=decrypt_excltp)
    Process1793 = multiprocessing.Process(target=decrypt_exclless)
    Process1794 = multiprocessing.Process(target=decrypt_exclmore)
    Process1795 = multiprocessing.Process(target=decrypt_exclaro)
    Process1796 = multiprocessing.Process(target=decrypt_exclcroc)
    Process1797 = multiprocessing.Process(target=decrypt_exclbsl)
    Process1798 = multiprocessing.Process(target=decrypt_exclcirc)
    Process1799 = multiprocessing.Process(target=decrypt_exclesp)
    Process1800 = multiprocessing.Process(target=decrypt_exclcr)
    Process1801 = multiprocessing.Process(target=decrypt_exclhl)
    Process1802 = multiprocessing.Process(target=decrypt_excltild)
    Process1803 = multiprocessing.Process(target=decrypt_doubquota)
    Process1804 = multiprocessing.Process(target=decrypt_doubquotb)
    Process1805 = multiprocessing.Process(target=decrypt_doubquotd)
    Process1806 = multiprocessing.Process(target=decrypt_doubquotf)
    Process1807 = multiprocessing.Process(target=decrypt_doubquoth)
    Process1808 = multiprocessing.Process(target=decrypt_doubquotj)
    Process1809 = multiprocessing.Process(target=decrypt_doubquotl)
    Process1810 = multiprocessing.Process(target=decrypt_doubquotn)
    Process1811 = multiprocessing.Process(target=decrypt_doubquotp)
    Process1812 = multiprocessing.Process(target=decrypt_doubquotr)
    Process1813 = multiprocessing.Process(target=decrypt_doubquott)
    Process1814 = multiprocessing.Process(target=decrypt_doubquotv)
    Process1815 = multiprocessing.Process(target=decrypt_doubquotx)
    Process1816 = multiprocessing.Process(target=decrypt_doubquotz)
    Process1817 = multiprocessing.Process(target=decrypt_doubquotA)
    Process1818 = multiprocessing.Process(target=decrypt_doubquotB)
    Process1819 = multiprocessing.Process(target=decrypt_doubquotD)
    Process1820 = multiprocessing.Process(target=decrypt_doubquotF)
    Process1821 = multiprocessing.Process(target=decrypt_doubquotH)
    Process1822 = multiprocessing.Process(target=decrypt_doubquotJ)
    Process1823 = multiprocessing.Process(target=decrypt_doubquotL)
    Process1824 = multiprocessing.Process(target=decrypt_doubquotN)
    Process1825 = multiprocessing.Process(target=decrypt_doubquotP)
    Process1826 = multiprocessing.Process(target=decrypt_doubquotR)
    Process1827 = multiprocessing.Process(target=decrypt_doubquotT)
    Process1828 = multiprocessing.Process(target=decrypt_doubquotV)
    Process1829 = multiprocessing.Process(target=decrypt_doubquotX)
    Process1830 = multiprocessing.Process(target=decrypt_doubquotZ)
    Process1831 = multiprocessing.Process(target=decrypt_doubquot0)
    Process1832 = multiprocessing.Process(target=decrypt_doubquot2)
    Process1833 = multiprocessing.Process(target=decrypt_doubquot4)
    Process1834 = multiprocessing.Process(target=decrypt_doubquot6)
    Process1835 = multiprocessing.Process(target=decrypt_doubquot8)
    Process1836 = multiprocessing.Process(target=decrypt_doubquotexcl)
    Process1837 = multiprocessing.Process(target=decrypt_doubquotdquote)
    Process1838 = multiprocessing.Process(target=decrypt_doubquotdoll)
    Process1839 = multiprocessing.Process(target=decrypt_doubquotand)
    Process1840 = multiprocessing.Process(target=decrypt_doubquotquote)
    Process1841 = multiprocessing.Process(target=decrypt_doubquotpar)
    Process1842 = multiprocessing.Process(target=decrypt_doubquotast)
    Process1843 = multiprocessing.Process(target=decrypt_doubquotvir)
    Process1844 = multiprocessing.Process(target=decrypt_doubquotpp)
    Process1845 = multiprocessing.Process(target=decrypt_doubquottp)
    Process1846 = multiprocessing.Process(target=decrypt_doubquotless)
    Process1847 = multiprocessing.Process(target=decrypt_doubquotmore)
    Process1848 = multiprocessing.Process(target=decrypt_doubquotaro)
    Process1849 = multiprocessing.Process(target=decrypt_doubquotcroc)
    Process1850 = multiprocessing.Process(target=decrypt_doubquotbsl)
    Process1851 = multiprocessing.Process(target=decrypt_doubquotcirc)
    Process1852 = multiprocessing.Process(target=decrypt_doubquotesp)
    Process1853 = multiprocessing.Process(target=decrypt_doubquotcr)
    Process1854 = multiprocessing.Process(target=decrypt_doubquothl)
    Process1855 = multiprocessing.Process(target=decrypt_doubquottild)
    Process1856 = multiprocessing.Process(target=decrypt_dolla)
    Process1857 = multiprocessing.Process(target=decrypt_dollb)
    Process1858 = multiprocessing.Process(target=decrypt_dolld)
    Process1859 = multiprocessing.Process(target=decrypt_dollf)
    Process1860 = multiprocessing.Process(target=decrypt_dollh)
    Process1861 = multiprocessing.Process(target=decrypt_dollj)
    Process1862 = multiprocessing.Process(target=decrypt_dolll)
    Process1863 = multiprocessing.Process(target=decrypt_dolln)
    Process1864 = multiprocessing.Process(target=decrypt_dollp)
    Process1865 = multiprocessing.Process(target=decrypt_dollr)
    Process1866 = multiprocessing.Process(target=decrypt_dollt)
    Process1867 = multiprocessing.Process(target=decrypt_dollv)
    Process1868 = multiprocessing.Process(target=decrypt_dollx)
    Process1869 = multiprocessing.Process(target=decrypt_dollz)
    Process1870 = multiprocessing.Process(target=decrypt_dollA)
    Process1871 = multiprocessing.Process(target=decrypt_dollB)
    Process1872 = multiprocessing.Process(target=decrypt_dollD)
    Process1873 = multiprocessing.Process(target=decrypt_dollF)
    Process1874 = multiprocessing.Process(target=decrypt_dollH)
    Process1875 = multiprocessing.Process(target=decrypt_dollJ)
    Process1876 = multiprocessing.Process(target=decrypt_dollL)
    Process1877 = multiprocessing.Process(target=decrypt_dollN)
    Process1878 = multiprocessing.Process(target=decrypt_dollP)
    Process1879 = multiprocessing.Process(target=decrypt_dollR)
    Process1880 = multiprocessing.Process(target=decrypt_dollT)
    Process1881 = multiprocessing.Process(target=decrypt_dollV)
    Process1882 = multiprocessing.Process(target=decrypt_dollX)
    Process1883 = multiprocessing.Process(target=decrypt_dollZ)
    Process1884 = multiprocessing.Process(target=decrypt_doll0)
    Process1885 = multiprocessing.Process(target=decrypt_doll2)
    Process1886 = multiprocessing.Process(target=decrypt_doll4)
    Process1887 = multiprocessing.Process(target=decrypt_doll6)
    Process1888 = multiprocessing.Process(target=decrypt_doll8)
    Process1889 = multiprocessing.Process(target=decrypt_dollexcl)
    Process1890 = multiprocessing.Process(target=decrypt_dolldquote)
    Process1891 = multiprocessing.Process(target=decrypt_dolldoll)
    Process1892 = multiprocessing.Process(target=decrypt_dolland)
    Process1893 = multiprocessing.Process(target=decrypt_dollquote)
    Process1894 = multiprocessing.Process(target=decrypt_dollpar)
    Process1895 = multiprocessing.Process(target=decrypt_dollast)
    Process1896 = multiprocessing.Process(target=decrypt_dollvir)
    Process1897 = multiprocessing.Process(target=decrypt_dollpp)
    Process1898 = multiprocessing.Process(target=decrypt_dolltp)
    Process1899 = multiprocessing.Process(target=decrypt_dollless)
    Process1900 = multiprocessing.Process(target=decrypt_dollmore)
    Process1901 = multiprocessing.Process(target=decrypt_dollaro)
    Process1902 = multiprocessing.Process(target=decrypt_dollcroc)
    Process1903 = multiprocessing.Process(target=decrypt_dollbsl)
    Process1904 = multiprocessing.Process(target=decrypt_dollcirc)
    Process1905 = multiprocessing.Process(target=decrypt_dollesp)
    Process1906 = multiprocessing.Process(target=decrypt_dollcr)
    Process1907 = multiprocessing.Process(target=decrypt_dollhl)
    Process1908 = multiprocessing.Process(target=decrypt_dolltild)
    Process1909 = multiprocessing.Process(target=decrypt_quota)
    Process1910 = multiprocessing.Process(target=decrypt_quotb)
    Process1911 = multiprocessing.Process(target=decrypt_quotd)
    Process1912 = multiprocessing.Process(target=decrypt_quotf)
    Process1913 = multiprocessing.Process(target=decrypt_quoth)
    Process1914 = multiprocessing.Process(target=decrypt_quotj)
    Process1915 = multiprocessing.Process(target=decrypt_quotl)
    Process1916 = multiprocessing.Process(target=decrypt_quotn)
    Process1917 = multiprocessing.Process(target=decrypt_quotp)
    Process1918 = multiprocessing.Process(target=decrypt_quotr)
    Process1919 = multiprocessing.Process(target=decrypt_quott)
    Process1920 = multiprocessing.Process(target=decrypt_quotv)
    Process1921 = multiprocessing.Process(target=decrypt_quotx)
    Process1922 = multiprocessing.Process(target=decrypt_quotz)
    Process1923 = multiprocessing.Process(target=decrypt_quotA)
    Process1924 = multiprocessing.Process(target=decrypt_quotB)
    Process1925 = multiprocessing.Process(target=decrypt_quotD)
    Process1926 = multiprocessing.Process(target=decrypt_quotF)
    Process1927 = multiprocessing.Process(target=decrypt_quotH)
    Process1928 = multiprocessing.Process(target=decrypt_quotJ)
    Process1929 = multiprocessing.Process(target=decrypt_quotL)
    Process1930 = multiprocessing.Process(target=decrypt_quotN)
    Process1931 = multiprocessing.Process(target=decrypt_quotP)
    Process1932 = multiprocessing.Process(target=decrypt_quotR)
    Process1933 = multiprocessing.Process(target=decrypt_quotT)
    Process1934 = multiprocessing.Process(target=decrypt_quotV)
    Process1935 = multiprocessing.Process(target=decrypt_quotX)
    Process1936 = multiprocessing.Process(target=decrypt_quotZ)
    Process1937 = multiprocessing.Process(target=decrypt_quot0)
    Process1938 = multiprocessing.Process(target=decrypt_quot2)
    Process1939 = multiprocessing.Process(target=decrypt_quot4)
    Process1940 = multiprocessing.Process(target=decrypt_quot6)
    Process1941 = multiprocessing.Process(target=decrypt_quot8)
    Process1942 = multiprocessing.Process(target=decrypt_quotexcl)
    Process1943 = multiprocessing.Process(target=decrypt_quotdquote)
    Process1944 = multiprocessing.Process(target=decrypt_quotdoll)
    Process1945 = multiprocessing.Process(target=decrypt_quotand)
    Process1946 = multiprocessing.Process(target=decrypt_quotquote)
    Process1947 = multiprocessing.Process(target=decrypt_quotpar)
    Process1948 = multiprocessing.Process(target=decrypt_quotast)
    Process1949 = multiprocessing.Process(target=decrypt_quotvir)
    Process1950 = multiprocessing.Process(target=decrypt_quotpp)
    Process1951 = multiprocessing.Process(target=decrypt_quottp)
    Process1952 = multiprocessing.Process(target=decrypt_quotless)
    Process1953 = multiprocessing.Process(target=decrypt_quotmore)
    Process1954 = multiprocessing.Process(target=decrypt_quotaro)
    Process1955 = multiprocessing.Process(target=decrypt_quotcroc)
    Process1956 = multiprocessing.Process(target=decrypt_quotbsl)
    Process1957 = multiprocessing.Process(target=decrypt_quotcirc)
    Process1958 = multiprocessing.Process(target=decrypt_quotesp)
    Process1959 = multiprocessing.Process(target=decrypt_quotcr)
    Process1960 = multiprocessing.Process(target=decrypt_quothl)
    Process1961 = multiprocessing.Process(target=decrypt_quottild)
    Process1962 = multiprocessing.Process(target=decrypt_parena)
    Process1963 = multiprocessing.Process(target=decrypt_parenb)
    Process1964 = multiprocessing.Process(target=decrypt_parend)
    Process1965 = multiprocessing.Process(target=decrypt_parenf)
    Process1966 = multiprocessing.Process(target=decrypt_parenh)
    Process1967 = multiprocessing.Process(target=decrypt_parenj)
    Process1968 = multiprocessing.Process(target=decrypt_parenl)
    Process1969 = multiprocessing.Process(target=decrypt_parenn)
    Process1970 = multiprocessing.Process(target=decrypt_parenp)
    Process1971 = multiprocessing.Process(target=decrypt_parenr)
    Process1972 = multiprocessing.Process(target=decrypt_parent)
    Process1973 = multiprocessing.Process(target=decrypt_parenv)
    Process1974 = multiprocessing.Process(target=decrypt_parenx)
    Process1975 = multiprocessing.Process(target=decrypt_parenz)
    Process1976 = multiprocessing.Process(target=decrypt_parenA)
    Process1977 = multiprocessing.Process(target=decrypt_parenB)
    Process1978 = multiprocessing.Process(target=decrypt_parenD)
    Process1979 = multiprocessing.Process(target=decrypt_parenF)
    Process1980 = multiprocessing.Process(target=decrypt_parenH)
    Process1981 = multiprocessing.Process(target=decrypt_parenJ)
    Process1982 = multiprocessing.Process(target=decrypt_parenL)
    Process1983 = multiprocessing.Process(target=decrypt_parenN)
    Process1984 = multiprocessing.Process(target=decrypt_parenP)
    Process1985 = multiprocessing.Process(target=decrypt_parenR)
    Process1986 = multiprocessing.Process(target=decrypt_parenT)
    Process1987 = multiprocessing.Process(target=decrypt_parenV)
    Process1988 = multiprocessing.Process(target=decrypt_parenX)
    Process1989 = multiprocessing.Process(target=decrypt_parenZ)
    Process1990 = multiprocessing.Process(target=decrypt_paren0)
    Process1991 = multiprocessing.Process(target=decrypt_paren2)
    Process1992 = multiprocessing.Process(target=decrypt_paren4)
    Process1993 = multiprocessing.Process(target=decrypt_paren6)
    Process1994 = multiprocessing.Process(target=decrypt_paren8)
    Process1995 = multiprocessing.Process(target=decrypt_parenexcl)
    Process1996 = multiprocessing.Process(target=decrypt_parendquote)
    Process1997 = multiprocessing.Process(target=decrypt_parendoll)
    Process1998 = multiprocessing.Process(target=decrypt_parenand)
    Process1999 = multiprocessing.Process(target=decrypt_parenquote)
    Process2000 = multiprocessing.Process(target=decrypt_parpara)
    Process2001 = multiprocessing.Process(target=decrypt_parenast)
    Process2002 = multiprocessing.Process(target=decrypt_parenvir)
    Process2003 = multiprocessing.Process(target=decrypt_parenpp)
    Process2004 = multiprocessing.Process(target=decrypt_parentp)
    Process2005 = multiprocessing.Process(target=decrypt_parenless)
    Process2006 = multiprocessing.Process(target=decrypt_parenmore)
    Process2007 = multiprocessing.Process(target=decrypt_parenaro)
    Process2008 = multiprocessing.Process(target=decrypt_parencroc)
    Process2009 = multiprocessing.Process(target=decrypt_parenbsl)
    Process2010 = multiprocessing.Process(target=decrypt_parencirc)
    Process2011 = multiprocessing.Process(target=decrypt_parenesp)
    Process2012 = multiprocessing.Process(target=decrypt_parencr)
    Process2013 = multiprocessing.Process(target=decrypt_parenhl)
    Process2014 = multiprocessing.Process(target=decrypt_parentild)
    Process2015 = multiprocessing.Process(target=decrypt_espea)
    Process2016 = multiprocessing.Process(target=decrypt_espeb)
    Process2017 = multiprocessing.Process(target=decrypt_esped)
    Process2018 = multiprocessing.Process(target=decrypt_espef)
    Process2019 = multiprocessing.Process(target=decrypt_espeh)
    Process2020 = multiprocessing.Process(target=decrypt_espej)
    Process2021 = multiprocessing.Process(target=decrypt_espel)
    Process2022 = multiprocessing.Process(target=decrypt_espen)
    Process2023 = multiprocessing.Process(target=decrypt_espep)
    Process2024 = multiprocessing.Process(target=decrypt_esper)
    Process2025 = multiprocessing.Process(target=decrypt_espet)
    Process2026 = multiprocessing.Process(target=decrypt_espev)
    Process2027 = multiprocessing.Process(target=decrypt_espex)
    Process2028 = multiprocessing.Process(target=decrypt_espez)
    Process2029 = multiprocessing.Process(target=decrypt_espeA)
    Process2030 = multiprocessing.Process(target=decrypt_espeB)
    Process2031 = multiprocessing.Process(target=decrypt_espeD)
    Process2032 = multiprocessing.Process(target=decrypt_espeF)
    Process2033 = multiprocessing.Process(target=decrypt_espeH)
    Process2034 = multiprocessing.Process(target=decrypt_espeJ)
    Process2035 = multiprocessing.Process(target=decrypt_espeL)
    Process2036 = multiprocessing.Process(target=decrypt_espeN)
    Process2037 = multiprocessing.Process(target=decrypt_espeP)
    Process2038 = multiprocessing.Process(target=decrypt_espeR)
    Process2039 = multiprocessing.Process(target=decrypt_espeT)
    Process2040 = multiprocessing.Process(target=decrypt_espeV)
    Process2041 = multiprocessing.Process(target=decrypt_espeX)
    Process2042 = multiprocessing.Process(target=decrypt_espeZ)
    Process2043 = multiprocessing.Process(target=decrypt_espe0)
    Process2044 = multiprocessing.Process(target=decrypt_espe2)
    Process2045 = multiprocessing.Process(target=decrypt_espe4)
    Process2046 = multiprocessing.Process(target=decrypt_espe6)
    Process2047 = multiprocessing.Process(target=decrypt_espe8)
    Process2048 = multiprocessing.Process(target=decrypt_espeexcl)
    Process2049 = multiprocessing.Process(target=decrypt_espedquote)
    Process2050 = multiprocessing.Process(target=decrypt_espedoll)
    Process2051 = multiprocessing.Process(target=decrypt_espeand)
    Process2052 = multiprocessing.Process(target=decrypt_espequote)
    Process2053 = multiprocessing.Process(target=decrypt_astpar)
    Process2054 = multiprocessing.Process(target=decrypt_espeast)
    Process2055 = multiprocessing.Process(target=decrypt_espevir)
    Process2056 = multiprocessing.Process(target=decrypt_espepp)
    Process2057 = multiprocessing.Process(target=decrypt_espetp)
    Process2058 = multiprocessing.Process(target=decrypt_espeless)
    Process2059 = multiprocessing.Process(target=decrypt_espemore)
    Process2060 = multiprocessing.Process(target=decrypt_espearo)
    Process2061 = multiprocessing.Process(target=decrypt_especroc)
    Process2062 = multiprocessing.Process(target=decrypt_espebsl)
    Process2063 = multiprocessing.Process(target=decrypt_especirc)
    Process2064 = multiprocessing.Process(target=decrypt_espeesp)
    Process2065 = multiprocessing.Process(target=decrypt_especr)
    Process2066 = multiprocessing.Process(target=decrypt_espehl)
    Process2067 = multiprocessing.Process(target=decrypt_espetild)
    Process2068 = multiprocessing.Process(target=decrypt_vira)
    Process2069 = multiprocessing.Process(target=decrypt_virb)
    Process2070 = multiprocessing.Process(target=decrypt_vird)
    Process2071 = multiprocessing.Process(target=decrypt_virf)
    Process2072 = multiprocessing.Process(target=decrypt_virh)
    Process2073 = multiprocessing.Process(target=decrypt_virj)
    Process2074 = multiprocessing.Process(target=decrypt_virl)
    Process2075 = multiprocessing.Process(target=decrypt_virn)
    Process2076 = multiprocessing.Process(target=decrypt_virp)
    Process2077 = multiprocessing.Process(target=decrypt_virr)
    Process2078 = multiprocessing.Process(target=decrypt_virt)
    Process2079 = multiprocessing.Process(target=decrypt_virv)
    Process2080 = multiprocessing.Process(target=decrypt_virx)
    Process2081 = multiprocessing.Process(target=decrypt_virz)
    Process2082 = multiprocessing.Process(target=decrypt_virA)
    Process2083 = multiprocessing.Process(target=decrypt_virB)
    Process2084 = multiprocessing.Process(target=decrypt_virD)
    Process2085 = multiprocessing.Process(target=decrypt_virF)
    Process2086 = multiprocessing.Process(target=decrypt_virH)
    Process2087 = multiprocessing.Process(target=decrypt_virJ)
    Process2088 = multiprocessing.Process(target=decrypt_virL)
    Process2089 = multiprocessing.Process(target=decrypt_virN)
    Process2090 = multiprocessing.Process(target=decrypt_virP)
    Process2091 = multiprocessing.Process(target=decrypt_virR)
    Process2092 = multiprocessing.Process(target=decrypt_virT)
    Process2093 = multiprocessing.Process(target=decrypt_virV)
    Process2094 = multiprocessing.Process(target=decrypt_virX)
    Process2095 = multiprocessing.Process(target=decrypt_virZ)
    Process2096 = multiprocessing.Process(target=decrypt_vir0)
    Process2097 = multiprocessing.Process(target=decrypt_vir2)
    Process2098 = multiprocessing.Process(target=decrypt_vir4)
    Process2099 = multiprocessing.Process(target=decrypt_vir6)
    Process2100 = multiprocessing.Process(target=decrypt_vir8)
    Process2101 = multiprocessing.Process(target=decrypt_virexcl)
    Process2102 = multiprocessing.Process(target=decrypt_virdquote)
    Process2103 = multiprocessing.Process(target=decrypt_virdoll)
    Process2104 = multiprocessing.Process(target=decrypt_virand)
    Process2105 = multiprocessing.Process(target=decrypt_virquote)
    Process2106 = multiprocessing.Process(target=decrypt_virpar)
    Process2107 = multiprocessing.Process(target=decrypt_virast)
    Process2108 = multiprocessing.Process(target=decrypt_virvir)
    Process2109 = multiprocessing.Process(target=decrypt_virpp)
    Process2110 = multiprocessing.Process(target=decrypt_virtp)
    Process2111 = multiprocessing.Process(target=decrypt_virless)
    Process2112 = multiprocessing.Process(target=decrypt_virmore)
    Process2113 = multiprocessing.Process(target=decrypt_viraro)
    Process2114 = multiprocessing.Process(target=decrypt_vircroc)
    Process2115 = multiprocessing.Process(target=decrypt_virbsl)
    Process2116 = multiprocessing.Process(target=decrypt_vircirc)
    Process2117 = multiprocessing.Process(target=decrypt_viresp)
    Process2118 = multiprocessing.Process(target=decrypt_vircr)
    Process2119 = multiprocessing.Process(target=decrypt_virhl)
    Process2120 = multiprocessing.Process(target=decrypt_virtild)
    Process2121 = multiprocessing.Process(target=decrypt_poina)
    Process2122 = multiprocessing.Process(target=decrypt_poinb)
    Process2123 = multiprocessing.Process(target=decrypt_poind)
    Process2124 = multiprocessing.Process(target=decrypt_poinf)
    Process2125 = multiprocessing.Process(target=decrypt_poinh)
    Process2126 = multiprocessing.Process(target=decrypt_poinj)
    Process2127 = multiprocessing.Process(target=decrypt_poinl)
    Process2128 = multiprocessing.Process(target=decrypt_poinn)
    Process2129 = multiprocessing.Process(target=decrypt_poinp)
    Process2130 = multiprocessing.Process(target=decrypt_poinr)
    Process2131 = multiprocessing.Process(target=decrypt_point)
    Process2132 = multiprocessing.Process(target=decrypt_poinv)
    Process2133 = multiprocessing.Process(target=decrypt_poinx)
    Process2134 = multiprocessing.Process(target=decrypt_poinz)
    Process2135 = multiprocessing.Process(target=decrypt_poinA)
    Process2136 = multiprocessing.Process(target=decrypt_poinB)
    Process2137 = multiprocessing.Process(target=decrypt_poinD)
    Process2138 = multiprocessing.Process(target=decrypt_poinF)
    Process2139 = multiprocessing.Process(target=decrypt_poinH)
    Process2140 = multiprocessing.Process(target=decrypt_poinJ)
    Process2141 = multiprocessing.Process(target=decrypt_poinL)
    Process2142 = multiprocessing.Process(target=decrypt_poinN)
    Process2143 = multiprocessing.Process(target=decrypt_poinP)
    Process2144 = multiprocessing.Process(target=decrypt_poinR)
    Process2145 = multiprocessing.Process(target=decrypt_poinT)
    Process2146 = multiprocessing.Process(target=decrypt_poinV)
    Process2147 = multiprocessing.Process(target=decrypt_poinX)
    Process2148 = multiprocessing.Process(target=decrypt_poinZ)
    Process2149 = multiprocessing.Process(target=decrypt_poin0)
    Process2150 = multiprocessing.Process(target=decrypt_poin2)
    Process2151 = multiprocessing.Process(target=decrypt_poin4)
    Process2152 = multiprocessing.Process(target=decrypt_poin6)
    Process2153 = multiprocessing.Process(target=decrypt_poin8)
    Process2154 = multiprocessing.Process(target=decrypt_poinexcl)
    Process2155 = multiprocessing.Process(target=decrypt_poindquote)
    Process2156 = multiprocessing.Process(target=decrypt_poindoll)
    Process2157 = multiprocessing.Process(target=decrypt_poinand)
    Process2158 = multiprocessing.Process(target=decrypt_poinquote)
    Process2159 = multiprocessing.Process(target=decrypt_pppar)
    Process2160 = multiprocessing.Process(target=decrypt_poinast)
    Process2161 = multiprocessing.Process(target=decrypt_poinvir)
    Process2162 = multiprocessing.Process(target=decrypt_poinpp)
    Process2163 = multiprocessing.Process(target=decrypt_pointp)
    Process2164 = multiprocessing.Process(target=decrypt_poinless)
    Process2165 = multiprocessing.Process(target=decrypt_poinmore)
    Process2166 = multiprocessing.Process(target=decrypt_poinaro)
    Process2167 = multiprocessing.Process(target=decrypt_poincroc)
    Process2168 = multiprocessing.Process(target=decrypt_poinbsl)
    Process2169 = multiprocessing.Process(target=decrypt_poincirc)
    Process2170 = multiprocessing.Process(target=decrypt_poinesp)
    Process2171 = multiprocessing.Process(target=decrypt_poincr)
    Process2172 = multiprocessing.Process(target=decrypt_poinhl)
    Process2173 = multiprocessing.Process(target=decrypt_pointild)
    Process2174 = multiprocessing.Process(target=decrypt_doubpoina)
    Process2175 = multiprocessing.Process(target=decrypt_doubpoinb)
    Process2176 = multiprocessing.Process(target=decrypt_doubpoind)
    Process2177 = multiprocessing.Process(target=decrypt_doubpoinf)
    Process2178 = multiprocessing.Process(target=decrypt_doubpoinh)
    Process2179 = multiprocessing.Process(target=decrypt_doubpoinj)
    Process2180 = multiprocessing.Process(target=decrypt_doubpoinl)
    Process2181 = multiprocessing.Process(target=decrypt_doubpoinn)
    Process2182 = multiprocessing.Process(target=decrypt_doubpoinp)
    Process2183 = multiprocessing.Process(target=decrypt_doubpoinr)
    Process2184 = multiprocessing.Process(target=decrypt_doubpoint)
    Process2185 = multiprocessing.Process(target=decrypt_doubpoinv)
    Process2186 = multiprocessing.Process(target=decrypt_doubpoinx)
    Process2187 = multiprocessing.Process(target=decrypt_doubpoinz)
    Process2188 = multiprocessing.Process(target=decrypt_doubpoinA)
    Process2189 = multiprocessing.Process(target=decrypt_doubpoinB)
    Process2190 = multiprocessing.Process(target=decrypt_doubpoinD)
    Process2191 = multiprocessing.Process(target=decrypt_doubpoinF)
    Process2192 = multiprocessing.Process(target=decrypt_doubpoinH)
    Process2193 = multiprocessing.Process(target=decrypt_doubpoinJ)
    Process2194 = multiprocessing.Process(target=decrypt_doubpoinL)
    Process2195 = multiprocessing.Process(target=decrypt_doubpoinN)
    Process2196 = multiprocessing.Process(target=decrypt_doubpoinP)
    Process2197 = multiprocessing.Process(target=decrypt_doubpoinR)
    Process2198 = multiprocessing.Process(target=decrypt_doubpoinT)
    Process2199 = multiprocessing.Process(target=decrypt_doubpoinV)
    Process2200 = multiprocessing.Process(target=decrypt_doubpoinX)
    Process2201 = multiprocessing.Process(target=decrypt_doubpoinZ)
    Process2202 = multiprocessing.Process(target=decrypt_doubpoin0)
    Process2203 = multiprocessing.Process(target=decrypt_doubpoin2)
    Process2204 = multiprocessing.Process(target=decrypt_doubpoin4)
    Process2205 = multiprocessing.Process(target=decrypt_doubpoin6)
    Process2206 = multiprocessing.Process(target=decrypt_doubpoin8)
    Process2207 = multiprocessing.Process(target=decrypt_doubpoinexcl)
    Process2208 = multiprocessing.Process(target=decrypt_doubpoindquote)
    Process2209 = multiprocessing.Process(target=decrypt_doubpoindoll)
    Process2210 = multiprocessing.Process(target=decrypt_doubpoinand)
    Process2211 = multiprocessing.Process(target=decrypt_doubpoinquote)
    Process2212 = multiprocessing.Process(target=decrypt_tppar)
    Process2213 = multiprocessing.Process(target=decrypt_doubpoinast)
    Process2214 = multiprocessing.Process(target=decrypt_doubpoinvir)
    Process2215 = multiprocessing.Process(target=decrypt_doubpoinpp)
    Process2216 = multiprocessing.Process(target=decrypt_doubpointp)
    Process2217 = multiprocessing.Process(target=decrypt_doubpoinless)
    Process2218 = multiprocessing.Process(target=decrypt_doubpoinmore)
    Process2219 = multiprocessing.Process(target=decrypt_doubpoinaro)
    Process2220 = multiprocessing.Process(target=decrypt_doubpoincroc)
    Process2221 = multiprocessing.Process(target=decrypt_doubpoinbsl)
    Process2222 = multiprocessing.Process(target=decrypt_doubpoincirc)
    Process2223 = multiprocessing.Process(target=decrypt_doubpoinesp)
    Process2224 = multiprocessing.Process(target=decrypt_doubpoincr)
    Process2225 = multiprocessing.Process(target=decrypt_doubpoinhl)
    Process2226 = multiprocessing.Process(target=decrypt_doubpointild)
    Process2227 = multiprocessing.Process(target=decrypt_lessa)
    Process2228 = multiprocessing.Process(target=decrypt_lessb)
    Process2229 = multiprocessing.Process(target=decrypt_lessd)
    Process2230 = multiprocessing.Process(target=decrypt_lessf)
    Process2231 = multiprocessing.Process(target=decrypt_lessh)
    Process2232 = multiprocessing.Process(target=decrypt_lessj)
    Process2233 = multiprocessing.Process(target=decrypt_lessl)
    Process2234 = multiprocessing.Process(target=decrypt_lessn)
    Process2235 = multiprocessing.Process(target=decrypt_lessp)
    Process2236 = multiprocessing.Process(target=decrypt_lessr)
    Process2237 = multiprocessing.Process(target=decrypt_lesst)
    Process2238 = multiprocessing.Process(target=decrypt_lessv)
    Process2239 = multiprocessing.Process(target=decrypt_lessx)
    Process2240 = multiprocessing.Process(target=decrypt_lessz)
    Process2241 = multiprocessing.Process(target=decrypt_lessA)
    Process2242 = multiprocessing.Process(target=decrypt_lessB)
    Process2243 = multiprocessing.Process(target=decrypt_lessD)
    Process2244 = multiprocessing.Process(target=decrypt_lessF)
    Process2245 = multiprocessing.Process(target=decrypt_lessH)
    Process2246 = multiprocessing.Process(target=decrypt_lessJ)
    Process2247 = multiprocessing.Process(target=decrypt_lessL)
    Process2248 = multiprocessing.Process(target=decrypt_lessN)
    Process2249 = multiprocessing.Process(target=decrypt_lessP)
    Process2250 = multiprocessing.Process(target=decrypt_lessR)
    Process2251 = multiprocessing.Process(target=decrypt_lessT)
    Process2252 = multiprocessing.Process(target=decrypt_lessV)
    Process2253 = multiprocessing.Process(target=decrypt_lessX)
    Process2254 = multiprocessing.Process(target=decrypt_lessZ)
    Process2255 = multiprocessing.Process(target=decrypt_less0)
    Process2256 = multiprocessing.Process(target=decrypt_less2)
    Process2257 = multiprocessing.Process(target=decrypt_less4)
    Process2258 = multiprocessing.Process(target=decrypt_less6)
    Process2259 = multiprocessing.Process(target=decrypt_less8)
    Process2260 = multiprocessing.Process(target=decrypt_lessexcl)
    Process2261 = multiprocessing.Process(target=decrypt_lessdquote)
    Process2262 = multiprocessing.Process(target=decrypt_lessdoll)
    Process2263 = multiprocessing.Process(target=decrypt_lessand)
    Process2264 = multiprocessing.Process(target=decrypt_lessquote)
    Process2265 = multiprocessing.Process(target=decrypt_morepar)
    Process2266 = multiprocessing.Process(target=decrypt_lessast)
    Process2267 = multiprocessing.Process(target=decrypt_lessvir)
    Process2268 = multiprocessing.Process(target=decrypt_lesspp)
    Process2269 = multiprocessing.Process(target=decrypt_lesstp)
    Process2270 = multiprocessing.Process(target=decrypt_lessless)
    Process2271 = multiprocessing.Process(target=decrypt_lessmore)
    Process2272 = multiprocessing.Process(target=decrypt_lessaro)
    Process2273 = multiprocessing.Process(target=decrypt_lesscroc)
    Process2274 = multiprocessing.Process(target=decrypt_lessbsl)
    Process2275 = multiprocessing.Process(target=decrypt_lesscirc)
    Process2276 = multiprocessing.Process(target=decrypt_lessesp)
    Process2277 = multiprocessing.Process(target=decrypt_lesscr)
    Process2278 = multiprocessing.Process(target=decrypt_lesshl)
    Process2279 = multiprocessing.Process(target=decrypt_lesstild)
    Process2280 = multiprocessing.Process(target=decrypt_morea)
    Process2281 = multiprocessing.Process(target=decrypt_moreb)
    Process2282 = multiprocessing.Process(target=decrypt_mored)
    Process2283 = multiprocessing.Process(target=decrypt_moref)
    Process2284 = multiprocessing.Process(target=decrypt_moreh)
    Process2285 = multiprocessing.Process(target=decrypt_morej)
    Process2286 = multiprocessing.Process(target=decrypt_morel)
    Process2287 = multiprocessing.Process(target=decrypt_moren)
    Process2288 = multiprocessing.Process(target=decrypt_morep)
    Process2289 = multiprocessing.Process(target=decrypt_morer)
    Process2290 = multiprocessing.Process(target=decrypt_moret)
    Process2291 = multiprocessing.Process(target=decrypt_morev)
    Process2292 = multiprocessing.Process(target=decrypt_morex)
    Process2293 = multiprocessing.Process(target=decrypt_morez)
    Process2294 = multiprocessing.Process(target=decrypt_moreA)
    Process2295 = multiprocessing.Process(target=decrypt_moreB)
    Process2296 = multiprocessing.Process(target=decrypt_moreD)
    Process2297 = multiprocessing.Process(target=decrypt_moreF)
    Process2298 = multiprocessing.Process(target=decrypt_moreH)
    Process2299 = multiprocessing.Process(target=decrypt_moreJ)
    Process2300 = multiprocessing.Process(target=decrypt_moreL)
    Process2301 = multiprocessing.Process(target=decrypt_moreN)
    Process2302 = multiprocessing.Process(target=decrypt_moreP)
    Process2303 = multiprocessing.Process(target=decrypt_moreR)
    Process2304 = multiprocessing.Process(target=decrypt_moreT)
    Process2305 = multiprocessing.Process(target=decrypt_moreV)
    Process2306 = multiprocessing.Process(target=decrypt_moreX)
    Process2307 = multiprocessing.Process(target=decrypt_moreZ)
    Process2308 = multiprocessing.Process(target=decrypt_more0)
    Process2309 = multiprocessing.Process(target=decrypt_more2)
    Process2310 = multiprocessing.Process(target=decrypt_more4)
    Process2311 = multiprocessing.Process(target=decrypt_more6)
    Process2312 = multiprocessing.Process(target=decrypt_more8)
    Process2313 = multiprocessing.Process(target=decrypt_moreexcl)
    Process2314 = multiprocessing.Process(target=decrypt_moredquote)
    Process2315 = multiprocessing.Process(target=decrypt_moredoll)
    Process2316 = multiprocessing.Process(target=decrypt_moreand)
    Process2317 = multiprocessing.Process(target=decrypt_morequote)
    Process2318 = multiprocessing.Process(target=decrypt_lesspar)
    Process2319 = multiprocessing.Process(target=decrypt_moreast)
    Process2320 = multiprocessing.Process(target=decrypt_morevir)
    Process2321 = multiprocessing.Process(target=decrypt_morepp)
    Process2322 = multiprocessing.Process(target=decrypt_moretp)
    Process2323 = multiprocessing.Process(target=decrypt_moreless)
    Process2324 = multiprocessing.Process(target=decrypt_moremore)
    Process2325 = multiprocessing.Process(target=decrypt_morearo)
    Process2326 = multiprocessing.Process(target=decrypt_morecroc)
    Process2327 = multiprocessing.Process(target=decrypt_morebsl)
    Process2328 = multiprocessing.Process(target=decrypt_morecirc)
    Process2329 = multiprocessing.Process(target=decrypt_moreesp)
    Process2330 = multiprocessing.Process(target=decrypt_morecr)
    Process2331 = multiprocessing.Process(target=decrypt_morehl)
    Process2332 = multiprocessing.Process(target=decrypt_moretild)
    Process2333 = multiprocessing.Process(target=decrypt_arobasa)
    Process2334 = multiprocessing.Process(target=decrypt_arobasb)
    Process2335 = multiprocessing.Process(target=decrypt_arobasd)
    Process2336 = multiprocessing.Process(target=decrypt_arobasf)
    Process2337 = multiprocessing.Process(target=decrypt_arobash)
    Process2338 = multiprocessing.Process(target=decrypt_arobasj)
    Process2339 = multiprocessing.Process(target=decrypt_arobasl)
    Process2340 = multiprocessing.Process(target=decrypt_arobasn)
    Process2341 = multiprocessing.Process(target=decrypt_arobasp)
    Process2342 = multiprocessing.Process(target=decrypt_arobasr)
    Process2343 = multiprocessing.Process(target=decrypt_arobast)
    Process2344 = multiprocessing.Process(target=decrypt_arobasv)
    Process2345 = multiprocessing.Process(target=decrypt_arobasx)
    Process2346 = multiprocessing.Process(target=decrypt_arobasz)
    Process2347 = multiprocessing.Process(target=decrypt_arobasA)
    Process2348 = multiprocessing.Process(target=decrypt_arobasB)
    Process2349 = multiprocessing.Process(target=decrypt_arobasD)
    Process2350 = multiprocessing.Process(target=decrypt_arobasF)
    Process2351 = multiprocessing.Process(target=decrypt_arobasH)
    Process2352 = multiprocessing.Process(target=decrypt_arobasJ)
    Process2353 = multiprocessing.Process(target=decrypt_arobasL)
    Process2354 = multiprocessing.Process(target=decrypt_arobasN)
    Process2355 = multiprocessing.Process(target=decrypt_arobasP)
    Process2356 = multiprocessing.Process(target=decrypt_arobasR)
    Process2357 = multiprocessing.Process(target=decrypt_arobasT)
    Process2358 = multiprocessing.Process(target=decrypt_arobasV)
    Process2359 = multiprocessing.Process(target=decrypt_arobasX)
    Process2360 = multiprocessing.Process(target=decrypt_arobasZ)
    Process2361 = multiprocessing.Process(target=decrypt_arobas0)
    Process2362 = multiprocessing.Process(target=decrypt_arobas2)
    Process2363 = multiprocessing.Process(target=decrypt_arobas4)
    Process2364 = multiprocessing.Process(target=decrypt_arobas6)
    Process2365 = multiprocessing.Process(target=decrypt_arobas8)
    Process2366 = multiprocessing.Process(target=decrypt_arobasexcl)
    Process2367 = multiprocessing.Process(target=decrypt_arobasdquote)
    Process2368 = multiprocessing.Process(target=decrypt_arobasdoll)
    Process2369 = multiprocessing.Process(target=decrypt_arobasand)
    Process2370 = multiprocessing.Process(target=decrypt_arobasquote)
    Process2371 = multiprocessing.Process(target=decrypt_aropar)
    Process2372 = multiprocessing.Process(target=decrypt_arobasast)
    Process2373 = multiprocessing.Process(target=decrypt_arobasvir)
    Process2374 = multiprocessing.Process(target=decrypt_arobaspp)
    Process2375 = multiprocessing.Process(target=decrypt_arobastp)
    Process2376 = multiprocessing.Process(target=decrypt_arobasless)
    Process2377 = multiprocessing.Process(target=decrypt_arobasmore)
    Process2378 = multiprocessing.Process(target=decrypt_arobasaro)
    Process2379 = multiprocessing.Process(target=decrypt_arobascroc)
    Process2380 = multiprocessing.Process(target=decrypt_arobasbsl)
    Process2381 = multiprocessing.Process(target=decrypt_arobascirc)
    Process2382 = multiprocessing.Process(target=decrypt_arobasesp)
    Process2383 = multiprocessing.Process(target=decrypt_arobascr)
    Process2384 = multiprocessing.Process(target=decrypt_arobashl)
    Process2385 = multiprocessing.Process(target=decrypt_arobastild)
    Process2386 = multiprocessing.Process(target=decrypt_crocha)
    Process2387 = multiprocessing.Process(target=decrypt_crochb)
    Process2388 = multiprocessing.Process(target=decrypt_crochd)
    Process2389 = multiprocessing.Process(target=decrypt_crochf)
    Process2390 = multiprocessing.Process(target=decrypt_crochh)
    Process2391 = multiprocessing.Process(target=decrypt_crochj)
    Process2392 = multiprocessing.Process(target=decrypt_crochl)
    Process2393 = multiprocessing.Process(target=decrypt_crochn)
    Process2394 = multiprocessing.Process(target=decrypt_crochp)
    Process2395 = multiprocessing.Process(target=decrypt_crochr)
    Process2396 = multiprocessing.Process(target=decrypt_crocht)
    Process2397 = multiprocessing.Process(target=decrypt_crochv)
    Process2398 = multiprocessing.Process(target=decrypt_crochx)
    Process2399 = multiprocessing.Process(target=decrypt_crochz)
    Process2400 = multiprocessing.Process(target=decrypt_crochA)
    Process2401 = multiprocessing.Process(target=decrypt_crochB)
    Process2402 = multiprocessing.Process(target=decrypt_crochD)
    Process2403 = multiprocessing.Process(target=decrypt_crochF)
    Process2404 = multiprocessing.Process(target=decrypt_crochH)
    Process2405 = multiprocessing.Process(target=decrypt_crochJ)
    Process2406 = multiprocessing.Process(target=decrypt_crochL)
    Process2407 = multiprocessing.Process(target=decrypt_crochN)
    Process2408 = multiprocessing.Process(target=decrypt_crochP)
    Process2409 = multiprocessing.Process(target=decrypt_crochR)
    Process2410 = multiprocessing.Process(target=decrypt_crochT)
    Process2411 = multiprocessing.Process(target=decrypt_crochV)
    Process2412 = multiprocessing.Process(target=decrypt_crochX)
    Process2413 = multiprocessing.Process(target=decrypt_crochZ)
    Process2414 = multiprocessing.Process(target=decrypt_croch0)
    Process2415 = multiprocessing.Process(target=decrypt_croch2)
    Process2416 = multiprocessing.Process(target=decrypt_croch4)
    Process2417 = multiprocessing.Process(target=decrypt_croch6)
    Process2418 = multiprocessing.Process(target=decrypt_croch8)
    Process2419 = multiprocessing.Process(target=decrypt_crochexcl)
    Process2420 = multiprocessing.Process(target=decrypt_crochdquote)
    Process2421 = multiprocessing.Process(target=decrypt_crochdoll)
    Process2422 = multiprocessing.Process(target=decrypt_crochand)
    Process2423 = multiprocessing.Process(target=decrypt_crochquote)
    Process2424 = multiprocessing.Process(target=decrypt_crocpar)
    Process2425 = multiprocessing.Process(target=decrypt_crochast)
    Process2426 = multiprocessing.Process(target=decrypt_crochvir)
    Process2427 = multiprocessing.Process(target=decrypt_crochpp)
    Process2428 = multiprocessing.Process(target=decrypt_crochtp)
    Process2429 = multiprocessing.Process(target=decrypt_crochless)
    Process2430 = multiprocessing.Process(target=decrypt_crochmore)
    Process2431 = multiprocessing.Process(target=decrypt_crocharo)
    Process2432 = multiprocessing.Process(target=decrypt_crochcroc)
    Process2433 = multiprocessing.Process(target=decrypt_crochbsl)
    Process2434 = multiprocessing.Process(target=decrypt_crochcirc)
    Process2435 = multiprocessing.Process(target=decrypt_crochesp)
    Process2436 = multiprocessing.Process(target=decrypt_crochcr)
    Process2437 = multiprocessing.Process(target=decrypt_crochhl)
    Process2438 = multiprocessing.Process(target=decrypt_crochtild)
    Process2439 = multiprocessing.Process(target=decrypt_bsa)
    Process2440 = multiprocessing.Process(target=decrypt_bsb)
    Process2441 = multiprocessing.Process(target=decrypt_bsd)
    Process2442 = multiprocessing.Process(target=decrypt_bsf)
    Process2443 = multiprocessing.Process(target=decrypt_bsh)
    Process2444 = multiprocessing.Process(target=decrypt_bsj)
    Process2445 = multiprocessing.Process(target=decrypt_bsl)
    Process2446 = multiprocessing.Process(target=decrypt_bsn)
    Process2447 = multiprocessing.Process(target=decrypt_bsp)
    Process2448 = multiprocessing.Process(target=decrypt_bsr)
    Process2449 = multiprocessing.Process(target=decrypt_bst)
    Process2450 = multiprocessing.Process(target=decrypt_bsv)
    Process2451 = multiprocessing.Process(target=decrypt_bsx)
    Process2452 = multiprocessing.Process(target=decrypt_bsz)
    Process2453 = multiprocessing.Process(target=decrypt_bsA)
    Process2454 = multiprocessing.Process(target=decrypt_bsB)
    Process2455 = multiprocessing.Process(target=decrypt_bsD)
    Process2456 = multiprocessing.Process(target=decrypt_bsF)
    Process2457 = multiprocessing.Process(target=decrypt_bsH)
    Process2458 = multiprocessing.Process(target=decrypt_bsJ)
    Process2459 = multiprocessing.Process(target=decrypt_bsL)
    Process2460 = multiprocessing.Process(target=decrypt_bsN)
    Process2461 = multiprocessing.Process(target=decrypt_bsP)
    Process2462 = multiprocessing.Process(target=decrypt_bsR)
    Process2463 = multiprocessing.Process(target=decrypt_bsT)
    Process2464 = multiprocessing.Process(target=decrypt_bsV)
    Process2465 = multiprocessing.Process(target=decrypt_bsX)
    Process2466 = multiprocessing.Process(target=decrypt_bsZ)
    Process2467 = multiprocessing.Process(target=decrypt_bs0)
    Process2468 = multiprocessing.Process(target=decrypt_bs2)
    Process2469 = multiprocessing.Process(target=decrypt_bs4)
    Process2470 = multiprocessing.Process(target=decrypt_bs6)
    Process2471 = multiprocessing.Process(target=decrypt_bs8)
    Process2472 = multiprocessing.Process(target=decrypt_bsexcl)
    Process2473 = multiprocessing.Process(target=decrypt_bsdquote)
    Process2474 = multiprocessing.Process(target=decrypt_bsdoll)
    Process2475 = multiprocessing.Process(target=decrypt_bsand)
    Process2476 = multiprocessing.Process(target=decrypt_bsquote)
    Process2477 = multiprocessing.Process(target=decrypt_bslpar)
    Process2478 = multiprocessing.Process(target=decrypt_bsast)
    Process2479 = multiprocessing.Process(target=decrypt_bsvir)
    Process2480 = multiprocessing.Process(target=decrypt_bspp)
    Process2481 = multiprocessing.Process(target=decrypt_bstp)
    Process2482 = multiprocessing.Process(target=decrypt_bsless)
    Process2483 = multiprocessing.Process(target=decrypt_bsmore)
    Process2484 = multiprocessing.Process(target=decrypt_bsaro)
    Process2485 = multiprocessing.Process(target=decrypt_bscroc)
    Process2486 = multiprocessing.Process(target=decrypt_bsbsl)
    Process2487 = multiprocessing.Process(target=decrypt_bscirc)
    Process2488 = multiprocessing.Process(target=decrypt_bsesp)
    Process2489 = multiprocessing.Process(target=decrypt_bscr)
    Process2490 = multiprocessing.Process(target=decrypt_bshl)
    Process2491 = multiprocessing.Process(target=decrypt_bstild)
    Process2492 = multiprocessing.Process(target=decrypt_cira)
    Process2493 = multiprocessing.Process(target=decrypt_cirb)
    Process2494 = multiprocessing.Process(target=decrypt_cird)
    Process2495 = multiprocessing.Process(target=decrypt_cirf)
    Process2496 = multiprocessing.Process(target=decrypt_cirh)
    Process2497 = multiprocessing.Process(target=decrypt_cirj)
    Process2498 = multiprocessing.Process(target=decrypt_cirl)
    Process2499 = multiprocessing.Process(target=decrypt_cirn)
    Process2500 = multiprocessing.Process(target=decrypt_cirp)
    Process2501 = multiprocessing.Process(target=decrypt_cirr)
    Process2502 = multiprocessing.Process(target=decrypt_cirt)
    Process2503 = multiprocessing.Process(target=decrypt_cirv)
    Process2504 = multiprocessing.Process(target=decrypt_cirx)
    Process2505 = multiprocessing.Process(target=decrypt_cirz)
    Process2506 = multiprocessing.Process(target=decrypt_cirA)
    Process2507 = multiprocessing.Process(target=decrypt_cirB)
    Process2508 = multiprocessing.Process(target=decrypt_cirD)
    Process2509 = multiprocessing.Process(target=decrypt_cirF)
    Process2510 = multiprocessing.Process(target=decrypt_cirH)
    Process2511 = multiprocessing.Process(target=decrypt_cirJ)
    Process2512 = multiprocessing.Process(target=decrypt_cirL)
    Process2513 = multiprocessing.Process(target=decrypt_cirN)
    Process2514 = multiprocessing.Process(target=decrypt_cirP)
    Process2515 = multiprocessing.Process(target=decrypt_cirR)
    Process2516 = multiprocessing.Process(target=decrypt_cirT)
    Process2517 = multiprocessing.Process(target=decrypt_cirV)
    Process2518 = multiprocessing.Process(target=decrypt_cirX)
    Process2519 = multiprocessing.Process(target=decrypt_cirZ)
    Process2520 = multiprocessing.Process(target=decrypt_cir0)
    Process2521 = multiprocessing.Process(target=decrypt_cir2)
    Process2522 = multiprocessing.Process(target=decrypt_cir4)
    Process2523 = multiprocessing.Process(target=decrypt_cir6)
    Process2524 = multiprocessing.Process(target=decrypt_cir8)
    Process2525 = multiprocessing.Process(target=decrypt_cirexcl)
    Process2526 = multiprocessing.Process(target=decrypt_cirdquote)
    Process2527 = multiprocessing.Process(target=decrypt_cirdoll)
    Process2528 = multiprocessing.Process(target=decrypt_cirand)
    Process2529 = multiprocessing.Process(target=decrypt_cirquote)
    Process2530 = multiprocessing.Process(target=decrypt_circpar)
    Process2531 = multiprocessing.Process(target=decrypt_cirast)
    Process2532 = multiprocessing.Process(target=decrypt_cirvir)
    Process2533 = multiprocessing.Process(target=decrypt_cirpp)
    Process2534 = multiprocessing.Process(target=decrypt_cirtp)
    Process2535 = multiprocessing.Process(target=decrypt_cirless)
    Process2536 = multiprocessing.Process(target=decrypt_cirmore)
    Process2537 = multiprocessing.Process(target=decrypt_ciraro)
    Process2538 = multiprocessing.Process(target=decrypt_circroc)
    Process2539 = multiprocessing.Process(target=decrypt_cirbsl)
    Process2540 = multiprocessing.Process(target=decrypt_circirc)
    Process2541 = multiprocessing.Process(target=decrypt_ciresp)
    Process2542 = multiprocessing.Process(target=decrypt_circr)
    Process2543 = multiprocessing.Process(target=decrypt_cirhl)
    Process2544 = multiprocessing.Process(target=decrypt_cirtild)
    Process2545 = multiprocessing.Process(target=decrypt_esua)
    Process2546 = multiprocessing.Process(target=decrypt_esub)
    Process2547 = multiprocessing.Process(target=decrypt_esud)
    Process2548 = multiprocessing.Process(target=decrypt_esuf)
    Process2549 = multiprocessing.Process(target=decrypt_esuh)
    Process2550 = multiprocessing.Process(target=decrypt_esuj)
    Process2551 = multiprocessing.Process(target=decrypt_esul)
    Process2552 = multiprocessing.Process(target=decrypt_esun)
    Process2553 = multiprocessing.Process(target=decrypt_esup)
    Process2554 = multiprocessing.Process(target=decrypt_esur)
    Process2555 = multiprocessing.Process(target=decrypt_esut)
    Process2556 = multiprocessing.Process(target=decrypt_esuv)
    Process2557 = multiprocessing.Process(target=decrypt_esux)
    Process2558 = multiprocessing.Process(target=decrypt_esuz)
    Process2559 = multiprocessing.Process(target=decrypt_esuA)
    Process2560 = multiprocessing.Process(target=decrypt_esuB)
    Process2561 = multiprocessing.Process(target=decrypt_esuD)
    Process2562 = multiprocessing.Process(target=decrypt_esuF)
    Process2563 = multiprocessing.Process(target=decrypt_esuH)
    Process2564 = multiprocessing.Process(target=decrypt_esuJ)
    Process2565 = multiprocessing.Process(target=decrypt_esuL)
    Process2566 = multiprocessing.Process(target=decrypt_esuN)
    Process2567 = multiprocessing.Process(target=decrypt_esuP)
    Process2568 = multiprocessing.Process(target=decrypt_esuR)
    Process2569 = multiprocessing.Process(target=decrypt_esuT)
    Process2570 = multiprocessing.Process(target=decrypt_esuV)
    Process2571 = multiprocessing.Process(target=decrypt_esuX)
    Process2572 = multiprocessing.Process(target=decrypt_esuZ)
    Process2573 = multiprocessing.Process(target=decrypt_esu0)
    Process2574 = multiprocessing.Process(target=decrypt_esu2)
    Process2575 = multiprocessing.Process(target=decrypt_esu4)
    Process2576 = multiprocessing.Process(target=decrypt_esu6)
    Process2577 = multiprocessing.Process(target=decrypt_esu8)
    Process2578 = multiprocessing.Process(target=decrypt_esuexcl)
    Process2579 = multiprocessing.Process(target=decrypt_esudquote)
    Process2580 = multiprocessing.Process(target=decrypt_esudoll)
    Process2581 = multiprocessing.Process(target=decrypt_esuand)
    Process2582 = multiprocessing.Process(target=decrypt_esuquote)
    Process2583 = multiprocessing.Process(target=decrypt_esppar)
    Process2584 = multiprocessing.Process(target=decrypt_esuast)
    Process2585 = multiprocessing.Process(target=decrypt_esuvir)
    Process2586 = multiprocessing.Process(target=decrypt_esupp)
    Process2587 = multiprocessing.Process(target=decrypt_esutp)
    Process2588 = multiprocessing.Process(target=decrypt_esuless)
    Process2589 = multiprocessing.Process(target=decrypt_esumore)
    Process2590 = multiprocessing.Process(target=decrypt_esuaro)
    Process2591 = multiprocessing.Process(target=decrypt_esucroc)
    Process2592 = multiprocessing.Process(target=decrypt_esubsl)
    Process2593 = multiprocessing.Process(target=decrypt_esucirc)
    Process2594 = multiprocessing.Process(target=decrypt_esuesp)
    Process2595 = multiprocessing.Process(target=decrypt_esucr)
    Process2596 = multiprocessing.Process(target=decrypt_esuhl)
    Process2597 = multiprocessing.Process(target=decrypt_esutild)
    Process2598 = multiprocessing.Process(target=decrypt_crocha)
    Process2599 = multiprocessing.Process(target=decrypt_crochb)
    Process2600 = multiprocessing.Process(target=decrypt_crochd)
    Process2601 = multiprocessing.Process(target=decrypt_crochf)
    Process2602 = multiprocessing.Process(target=decrypt_crochh)
    Process2603 = multiprocessing.Process(target=decrypt_crochj)
    Process2604 = multiprocessing.Process(target=decrypt_crochl)
    Process2605 = multiprocessing.Process(target=decrypt_crochn)
    Process2606 = multiprocessing.Process(target=decrypt_crochp)
    Process2607 = multiprocessing.Process(target=decrypt_crochr)
    Process2608 = multiprocessing.Process(target=decrypt_crocht)
    Process2609 = multiprocessing.Process(target=decrypt_crochv)
    Process2610 = multiprocessing.Process(target=decrypt_crochx)
    Process2611 = multiprocessing.Process(target=decrypt_crochz)
    Process2612 = multiprocessing.Process(target=decrypt_crochA)
    Process2613 = multiprocessing.Process(target=decrypt_crochB)
    Process2614 = multiprocessing.Process(target=decrypt_crochD)
    Process2615 = multiprocessing.Process(target=decrypt_crochF)
    Process2616 = multiprocessing.Process(target=decrypt_crochH)
    Process2617 = multiprocessing.Process(target=decrypt_crochJ)
    Process2618 = multiprocessing.Process(target=decrypt_crochL)
    Process2619 = multiprocessing.Process(target=decrypt_crochN)
    Process2620 = multiprocessing.Process(target=decrypt_crochP)
    Process2621 = multiprocessing.Process(target=decrypt_crochR)
    Process2622 = multiprocessing.Process(target=decrypt_crochT)
    Process2623 = multiprocessing.Process(target=decrypt_crochV)
    Process2624 = multiprocessing.Process(target=decrypt_crochX)
    Process2625 = multiprocessing.Process(target=decrypt_crochZ)
    Process2626 = multiprocessing.Process(target=decrypt_croch0)
    Process2627 = multiprocessing.Process(target=decrypt_croch2)
    Process2628 = multiprocessing.Process(target=decrypt_croch4)
    Process2629 = multiprocessing.Process(target=decrypt_croch6)
    Process2630 = multiprocessing.Process(target=decrypt_croch8)
    Process2631 = multiprocessing.Process(target=decrypt_crochexcl)
    Process2632 = multiprocessing.Process(target=decrypt_crochdquote)
    Process2633 = multiprocessing.Process(target=decrypt_crochdoll)
    Process2634 = multiprocessing.Process(target=decrypt_crochand)
    Process2635 = multiprocessing.Process(target=decrypt_crochquote)
    Process2636 = multiprocessing.Process(target=decrypt_crpar)
    Process2637 = multiprocessing.Process(target=decrypt_crochast)
    Process2638 = multiprocessing.Process(target=decrypt_crochvir)
    Process2639 = multiprocessing.Process(target=decrypt_crochpp)
    Process2640 = multiprocessing.Process(target=decrypt_crochtp)
    Process2641 = multiprocessing.Process(target=decrypt_crochless)
    Process2642 = multiprocessing.Process(target=decrypt_crochmore)
    Process2643 = multiprocessing.Process(target=decrypt_crocharo)
    Process2644 = multiprocessing.Process(target=decrypt_crochcroc)
    Process2645 = multiprocessing.Process(target=decrypt_crochbsl)
    Process2646 = multiprocessing.Process(target=decrypt_crochcirc)
    Process2647 = multiprocessing.Process(target=decrypt_crochesp)
    Process2648 = multiprocessing.Process(target=decrypt_crochcr)
    Process2649 = multiprocessing.Process(target=decrypt_crochhl)
    Process2650 = multiprocessing.Process(target=decrypt_crochtild)
    Process2651 = multiprocessing.Process(target=decrypt_vsla)
    Process2652 = multiprocessing.Process(target=decrypt_vslb)
    Process2653 = multiprocessing.Process(target=decrypt_vsld)
    Process2654 = multiprocessing.Process(target=decrypt_vslf)
    Process2655 = multiprocessing.Process(target=decrypt_vslh)
    Process2656 = multiprocessing.Process(target=decrypt_vslj)
    Process2657 = multiprocessing.Process(target=decrypt_vsll)
    Process2658 = multiprocessing.Process(target=decrypt_vsln)
    Process2659 = multiprocessing.Process(target=decrypt_vslp)
    Process2660 = multiprocessing.Process(target=decrypt_vslr)
    Process2661 = multiprocessing.Process(target=decrypt_vslt)
    Process2662 = multiprocessing.Process(target=decrypt_vslv)
    Process2663 = multiprocessing.Process(target=decrypt_vslx)
    Process2664 = multiprocessing.Process(target=decrypt_vslz)
    Process2665 = multiprocessing.Process(target=decrypt_vslA)
    Process2666 = multiprocessing.Process(target=decrypt_vslB)
    Process2667 = multiprocessing.Process(target=decrypt_vslD)
    Process2668 = multiprocessing.Process(target=decrypt_vslF)
    Process2669 = multiprocessing.Process(target=decrypt_vslH)
    Process2670 = multiprocessing.Process(target=decrypt_vslJ)
    Process2671 = multiprocessing.Process(target=decrypt_vslL)
    Process2672 = multiprocessing.Process(target=decrypt_vslN)
    Process2673 = multiprocessing.Process(target=decrypt_vslP)
    Process2674 = multiprocessing.Process(target=decrypt_vslR)
    Process2675 = multiprocessing.Process(target=decrypt_vslT)
    Process2676 = multiprocessing.Process(target=decrypt_vslV)
    Process2677 = multiprocessing.Process(target=decrypt_vslX)
    Process2678 = multiprocessing.Process(target=decrypt_vslZ)
    Process2679 = multiprocessing.Process(target=decrypt_vsl0)
    Process2680 = multiprocessing.Process(target=decrypt_vsl2)
    Process2681 = multiprocessing.Process(target=decrypt_vsl4)
    Process2682 = multiprocessing.Process(target=decrypt_vsl6)
    Process2683 = multiprocessing.Process(target=decrypt_vsl8)
    Process2684 = multiprocessing.Process(target=decrypt_vslexcl)
    Process2685 = multiprocessing.Process(target=decrypt_vsldquote)
    Process2686 = multiprocessing.Process(target=decrypt_vsldoll)
    Process2687 = multiprocessing.Process(target=decrypt_vsland)
    Process2688 = multiprocessing.Process(target=decrypt_vslquote)
    Process2689 = multiprocessing.Process(target=decrypt_hlpar)
    Process2690 = multiprocessing.Process(target=decrypt_vslast)
    Process2691 = multiprocessing.Process(target=decrypt_vslvir)
    Process2692 = multiprocessing.Process(target=decrypt_vslpp)
    Process2693 = multiprocessing.Process(target=decrypt_vsltp)
    Process2694 = multiprocessing.Process(target=decrypt_vslless)
    Process2695 = multiprocessing.Process(target=decrypt_vslmore)
    Process2696 = multiprocessing.Process(target=decrypt_vslaro)
    Process2697 = multiprocessing.Process(target=decrypt_vslcroc)
    Process2698 = multiprocessing.Process(target=decrypt_vslbsl)
    Process2699 = multiprocessing.Process(target=decrypt_vslcirc)
    Process2700 = multiprocessing.Process(target=decrypt_vslesp)
    Process2701 = multiprocessing.Process(target=decrypt_vslcr)
    Process2702 = multiprocessing.Process(target=decrypt_vslhl)
    Process2703 = multiprocessing.Process(target=decrypt_vsltild)
    Process2704 = multiprocessing.Process(target=decrypt_tila)
    Process2705 = multiprocessing.Process(target=decrypt_tilb)
    Process2706 = multiprocessing.Process(target=decrypt_tild)
    Process2707 = multiprocessing.Process(target=decrypt_tilf)
    Process2708 = multiprocessing.Process(target=decrypt_tilh)
    Process2709 = multiprocessing.Process(target=decrypt_tilj)
    Process2710 = multiprocessing.Process(target=decrypt_till)
    Process2711 = multiprocessing.Process(target=decrypt_tiln)
    Process2712 = multiprocessing.Process(target=decrypt_tilp)
    Process2713 = multiprocessing.Process(target=decrypt_tilr)
    Process2714 = multiprocessing.Process(target=decrypt_tilt)
    Process2715 = multiprocessing.Process(target=decrypt_tilv)
    Process2716 = multiprocessing.Process(target=decrypt_tilx)
    Process2717 = multiprocessing.Process(target=decrypt_tilz)
    Process2718 = multiprocessing.Process(target=decrypt_tilA)
    Process2719 = multiprocessing.Process(target=decrypt_tilB)
    Process2720 = multiprocessing.Process(target=decrypt_tilD)
    Process2721 = multiprocessing.Process(target=decrypt_tilF)
    Process2722 = multiprocessing.Process(target=decrypt_tilH)
    Process2723 = multiprocessing.Process(target=decrypt_tilJ)
    Process2724 = multiprocessing.Process(target=decrypt_tilL)
    Process2725 = multiprocessing.Process(target=decrypt_tilN)
    Process2726 = multiprocessing.Process(target=decrypt_tilP)
    Process2727 = multiprocessing.Process(target=decrypt_tilR)
    Process2728 = multiprocessing.Process(target=decrypt_tilT)
    Process2729 = multiprocessing.Process(target=decrypt_tilV)
    Process2730 = multiprocessing.Process(target=decrypt_tilX)
    Process2731 = multiprocessing.Process(target=decrypt_tilZ)
    Process2732 = multiprocessing.Process(target=decrypt_til0)
    Process2733 = multiprocessing.Process(target=decrypt_til2)
    Process2734 = multiprocessing.Process(target=decrypt_til4)
    Process2735 = multiprocessing.Process(target=decrypt_til6)
    Process2736 = multiprocessing.Process(target=decrypt_til8)
    Process2737 = multiprocessing.Process(target=decrypt_tilexcl)
    Process2738 = multiprocessing.Process(target=decrypt_tildquote)
    Process2739 = multiprocessing.Process(target=decrypt_tildoll)
    Process2740 = multiprocessing.Process(target=decrypt_tiland)
    Process2741 = multiprocessing.Process(target=decrypt_tilquote)
    Process2742 = multiprocessing.Process(target=decrypt_tilpar)
    Process2743 = multiprocessing.Process(target=decrypt_tilast)
    Process2744 = multiprocessing.Process(target=decrypt_tilvir)
    Process2745 = multiprocessing.Process(target=decrypt_tilpp)
    Process2746 = multiprocessing.Process(target=decrypt_tiltp)
    Process2747 = multiprocessing.Process(target=decrypt_tilless)
    Process2748 = multiprocessing.Process(target=decrypt_tilmore)
    Process2749 = multiprocessing.Process(target=decrypt_tilaro)
    Process2750 = multiprocessing.Process(target=decrypt_tilcroc)
    Process2751 = multiprocessing.Process(target=decrypt_tilbsl)
    Process2752 = multiprocessing.Process(target=decrypt_tilcirc)
    Process2753 = multiprocessing.Process(target=decrypt_tilesp)
    Process2754 = multiprocessing.Process(target=decrypt_tilcr)
    Process2755 = multiprocessing.Process(target=decrypt_tilhl)
    Process2756 = multiprocessing.Process(target=decrypt_tiltild)

    Process1.start()
    Process2.start()
    Process3.start()
    Process4.start()
    Process5.start()
    Process6.start()
    Process7.start()
    Process8.start()
    Process9.start()
    Process10.start()
    Process11.start()
    Process12.start()
    Process13.start()
    Process14.start()
    Process15.start()
    Process16.start()
    Process17.start()
    Process18.start()
    Process19.start()
    Process20.start()
    Process21.start()
    Process22.start()
    Process23.start()
    Process24.start()
    Process25.start()
    Process26.start()
    Process27.start()
    Process28.start()
    Process29.start()
    Process30.start()
    Process31.start()
    Process32.start()
    Process33.start()
    Process34.start()
    Process35.start()
    Process36.start()
    Process37.start()
    Process38.start()
    Process39.start()
    Process40.start()
    Process41.start()
    Process42.start()
    Process43.start()
    Process44.start()
    Process45.start()
    Process46.start()
    Process47.start()
    Process48.start()
    Process49.start()
    Process50.start()
    Process51.start()
    Process52.start()
    Process53.start()
    Process54.start()
    Process55.start()
    Process56.start()
    Process57.start()
    Process58.start()
    Process59.start()
    Process60.start()
    Process61.start()
    Process62.start()
    Process63.start()
    Process64.start()
    Process65.start()
    Process66.start()
    Process67.start()
    Process68.start()
    Process69.start()
    Process70.start()
    Process71.start()
    Process72.start()
    Process73.start()
    Process74.start()
    Process75.start()
    Process76.start()
    Process77.start()
    Process78.start()
    Process79.start()
    Process80.start()
    Process81.start()
    Process82.start()
    Process83.start()
    Process84.start()
    Process85.start()
    Process86.start()
    Process87.start()
    Process88.start()
    Process89.start()
    Process90.start()
    Process91.start()
    Process92.start()
    Process93.start()
    Process94.start()
    Process95.start()
    Process96.start()
    Process97.start()
    Process98.start()
    Process99.start()
    Process100.start()
    Process101.start()
    Process102.start()
    Process103.start()
    Process104.start()
    Process105.start()
    Process106.start()
    Process107.start()
    Process108.start()
    Process109.start()
    Process110.start()
    Process111.start()
    Process112.start()
    Process113.start()
    Process114.start()
    Process115.start()
    Process116.start()
    Process117.start()
    Process118.start()
    Process119.start()
    Process120.start()
    Process121.start()
    Process122.start()
    Process123.start()
    Process124.start()
    Process125.start()
    Process126.start()
    Process127.start()
    Process128.start()
    Process129.start()
    Process130.start()
    Process131.start()
    Process132.start()
    Process133.start()
    Process134.start()
    Process135.start()
    Process136.start()
    Process137.start()
    Process138.start()
    Process139.start()
    Process140.start()
    Process141.start()
    Process142.start()
    Process143.start()
    Process144.start()
    Process145.start()
    Process146.start()
    Process147.start()
    Process148.start()
    Process149.start()
    Process150.start()
    Process151.start()
    Process152.start()
    Process153.start()
    Process154.start()
    Process155.start()
    Process156.start()
    Process157.start()
    Process158.start()
    Process159.start()
    Process160.start()
    Process161.start()
    Process162.start()
    Process163.start()
    Process164.start()
    Process165.start()
    Process166.start()
    Process167.start()
    Process168.start()
    Process169.start()
    Process170.start()
    Process171.start()
    Process172.start()
    Process173.start()
    Process174.start()
    Process175.start()
    Process176.start()
    Process177.start()
    Process178.start()
    Process179.start()
    Process180.start()
    Process181.start()
    Process182.start()
    Process183.start()
    Process184.start()
    Process185.start()
    Process186.start()
    Process187.start()
    Process188.start()
    Process189.start()
    Process190.start()
    Process191.start()
    Process192.start()
    Process193.start()
    Process194.start()
    Process195.start()
    Process196.start()
    Process197.start()
    Process198.start()
    Process199.start()
    Process200.start()
    Process201.start()
    Process202.start()
    Process203.start()
    Process204.start()
    Process205.start()
    Process206.start()
    Process207.start()
    Process208.start()
    Process209.start()
    Process210.start()
    Process211.start()
    Process212.start()
    Process213.start()
    Process214.start()
    Process215.start()
    Process216.start()
    Process217.start()
    Process218.start()
    Process219.start()
    Process220.start()
    Process221.start()
    Process222.start()
    Process223.start()
    Process224.start()
    Process225.start()
    Process226.start()
    Process227.start()
    Process228.start()
    Process229.start()
    Process230.start()
    Process231.start()
    Process232.start()
    Process233.start()
    Process234.start()
    Process235.start()
    Process236.start()
    Process237.start()
    Process238.start()
    Process239.start()
    Process240.start()
    Process241.start()
    Process242.start()
    Process243.start()
    Process244.start()
    Process245.start()
    Process246.start()
    Process247.start()
    Process248.start()
    Process249.start()
    Process250.start()
    Process251.start()
    Process252.start()
    Process253.start()
    Process254.start()
    Process255.start()
    Process256.start()
    Process257.start()
    Process258.start()
    Process259.start()
    Process260.start()
    Process261.start()
    Process262.start()
    Process263.start()
    Process264.start()
    Process265.start()
    Process266.start()
    Process267.start()
    Process268.start()
    Process269.start()
    Process270.start()
    Process271.start()
    Process272.start()
    Process273.start()
    Process274.start()
    Process275.start()
    Process276.start()
    Process277.start()
    Process278.start()
    Process279.start()
    Process280.start()
    Process281.start()
    Process282.start()
    Process283.start()
    Process284.start()
    Process285.start()
    Process286.start()
    Process287.start()
    Process288.start()
    Process289.start()
    Process290.start()
    Process291.start()
    Process292.start()
    Process293.start()
    Process294.start()
    Process295.start()
    Process296.start()
    Process297.start()
    Process298.start()
    Process299.start()
    Process300.start()
    Process301.start()
    Process302.start()
    Process303.start()
    Process304.start()
    Process305.start()
    Process306.start()
    Process307.start()
    Process308.start()
    Process309.start()
    Process310.start()
    Process311.start()
    Process312.start()
    Process313.start()
    Process314.start()
    Process315.start()
    Process316.start()
    Process317.start()
    Process318.start()
    Process319.start()
    Process320.start()
    Process321.start()
    Process322.start()
    Process323.start()
    Process324.start()
    Process325.start()
    Process326.start()
    Process327.start()
    Process328.start()
    Process329.start()
    Process330.start()
    Process331.start()
    Process332.start()
    Process333.start()
    Process334.start()
    Process335.start()
    Process336.start()
    Process337.start()
    Process338.start()
    Process339.start()
    Process340.start()
    Process341.start()
    Process342.start()
    Process343.start()
    Process344.start()
    Process345.start()
    Process346.start()
    Process347.start()
    Process348.start()
    Process349.start()
    Process350.start()
    Process351.start()
    Process352.start()
    Process353.start()
    Process354.start()
    Process355.start()
    Process356.start()
    Process357.start()
    Process358.start()
    Process359.start()
    Process360.start()
    Process361.start()
    Process362.start()
    Process363.start()
    Process364.start()
    Process365.start()
    Process366.start()
    Process367.start()
    Process368.start()
    Process369.start()
    Process370.start()
    Process371.start()
    Process372.start()
    Process373.start()
    Process374.start()
    Process375.start()
    Process376.start()
    Process377.start()
    Process378.start()
    Process379.start()
    Process380.start()
    Process381.start()
    Process382.start()
    Process383.start()
    Process384.start()
    Process385.start()
    Process386.start()
    Process387.start()
    Process388.start()
    Process389.start()
    Process390.start()
    Process391.start()
    Process392.start()
    Process393.start()
    Process394.start()
    Process395.start()
    Process396.start()
    Process397.start()
    Process398.start()
    Process399.start()
    Process400.start()
    Process401.start()
    Process402.start()
    Process403.start()
    Process404.start()
    Process405.start()
    Process406.start()
    Process407.start()
    Process408.start()
    Process409.start()
    Process410.start()
    Process411.start()
    Process412.start()
    Process413.start()
    Process414.start()
    Process415.start()
    Process416.start()
    Process417.start()
    Process418.start()
    Process419.start()
    Process420.start()
    Process421.start()
    Process422.start()
    Process423.start()
    Process424.start()
    Process425.start()
    Process426.start()
    Process427.start()
    Process428.start()
    Process429.start()
    Process430.start()
    Process431.start()
    Process432.start()
    Process433.start()
    Process434.start()
    Process435.start()
    Process436.start()
    Process437.start()
    Process438.start()
    Process439.start()
    Process440.start()
    Process441.start()
    Process442.start()
    Process443.start()
    Process444.start()
    Process445.start()
    Process446.start()
    Process447.start()
    Process448.start()
    Process449.start()
    Process450.start()
    Process451.start()
    Process452.start()
    Process453.start()
    Process454.start()
    Process455.start()
    Process456.start()
    Process457.start()
    Process458.start()
    Process459.start()
    Process460.start()
    Process461.start()
    Process462.start()
    Process463.start()
    Process464.start()
    Process465.start()
    Process466.start()
    Process467.start()
    Process468.start()
    Process469.start()
    Process470.start()
    Process471.start()
    Process472.start()
    Process473.start()
    Process474.start()
    Process475.start()
    Process476.start()
    Process477.start()
    Process478.start()
    Process479.start()
    Process480.start()
    Process481.start()
    Process482.start()
    Process483.start()
    Process484.start()
    Process485.start()
    Process486.start()
    Process487.start()
    Process488.start()
    Process489.start()
    Process490.start()
    Process491.start()
    Process492.start()
    Process493.start()
    Process494.start()
    Process495.start()
    Process496.start()
    Process497.start()
    Process498.start()
    Process499.start()
    Process500.start()
    Process501.start()
    Process502.start()
    Process503.start()
    Process504.start()
    Process505.start()
    Process506.start()
    Process507.start()
    Process508.start()
    Process509.start()
    Process510.start()
    Process511.start()
    Process512.start()
    Process513.start()
    Process514.start()
    Process515.start()
    Process516.start()
    Process517.start()
    Process518.start()
    Process519.start()
    Process520.start()
    Process521.start()
    Process522.start()
    Process523.start()
    Process524.start()
    Process525.start()
    Process526.start()
    Process527.start()
    Process528.start()
    Process529.start()
    Process530.start()
    Process531.start()
    Process532.start()
    Process533.start()
    Process534.start()
    Process535.start()
    Process536.start()
    Process537.start()
    Process538.start()
    Process539.start()
    Process540.start()
    Process541.start()
    Process542.start()
    Process543.start()
    Process544.start()
    Process545.start()
    Process546.start()
    Process547.start()
    Process548.start()
    Process549.start()
    Process550.start()
    Process551.start()
    Process552.start()
    Process553.start()
    Process554.start()
    Process555.start()
    Process556.start()
    Process557.start()
    Process558.start()
    Process559.start()
    Process560.start()
    Process561.start()
    Process562.start()
    Process563.start()
    Process564.start()
    Process565.start()
    Process566.start()
    Process567.start()
    Process568.start()
    Process569.start()
    Process570.start()
    Process571.start()
    Process572.start()
    Process573.start()
    Process574.start()
    Process575.start()
    Process576.start()
    Process577.start()
    Process578.start()
    Process579.start()
    Process580.start()
    Process581.start()
    Process582.start()
    Process583.start()
    Process584.start()
    Process585.start()
    Process586.start()
    Process587.start()
    Process588.start()
    Process589.start()
    Process590.start()
    Process591.start()
    Process592.start()
    Process593.start()
    Process594.start()
    Process595.start()
    Process596.start()
    Process597.start()
    Process598.start()
    Process599.start()
    Process600.start()
    Process601.start()
    Process602.start()
    Process603.start()
    Process604.start()
    Process605.start()
    Process606.start()
    Process607.start()
    Process608.start()
    Process609.start()
    Process610.start()
    Process611.start()
    Process612.start()
    Process613.start()
    Process614.start()
    Process615.start()
    Process616.start()
    Process617.start()
    Process618.start()
    Process619.start()
    Process620.start()
    Process621.start()
    Process622.start()
    Process623.start()
    Process624.start()
    Process625.start()
    Process626.start()
    Process627.start()
    Process628.start()
    Process629.start()
    Process630.start()
    Process631.start()
    Process632.start()
    Process633.start()
    Process634.start()
    Process635.start()
    Process636.start()
    Process637.start()
    Process638.start()
    Process639.start()
    Process640.start()
    Process641.start()
    Process642.start()
    Process643.start()
    Process644.start()
    Process645.start()
    Process646.start()
    Process647.start()
    Process648.start()
    Process649.start()
    Process650.start()
    Process651.start()
    Process652.start()
    Process653.start()
    Process654.start()
    Process655.start()
    Process656.start()
    Process657.start()
    Process658.start()
    Process659.start()
    Process660.start()
    Process661.start()
    Process662.start()
    Process663.start()
    Process664.start()
    Process665.start()
    Process666.start()
    Process667.start()
    Process668.start()
    Process669.start()
    Process670.start()
    Process671.start()
    Process672.start()
    Process673.start()
    Process674.start()
    Process675.start()
    Process676.start()
    Process677.start()
    Process678.start()
    Process679.start()
    Process680.start()
    Process681.start()
    Process682.start()
    Process683.start()
    Process684.start()
    Process685.start()
    Process686.start()
    Process687.start()
    Process688.start()
    Process689.start()
    Process690.start()
    Process691.start()
    Process692.start()
    Process693.start()
    Process694.start()
    Process695.start()
    Process696.start()
    Process697.start()
    Process698.start()
    Process699.start()
    Process700.start()
    Process701.start()
    Process702.start()
    Process703.start()
    Process704.start()
    Process705.start()
    Process706.start()
    Process707.start()
    Process708.start()
    Process709.start()
    Process710.start()
    Process711.start()
    Process712.start()
    Process713.start()
    Process714.start()
    Process715.start()
    Process716.start()
    Process717.start()
    Process718.start()
    Process719.start()
    Process720.start()
    Process721.start()
    Process722.start()
    Process723.start()
    Process724.start()
    Process725.start()
    Process726.start()
    Process727.start()
    Process728.start()
    Process729.start()
    Process730.start()
    Process731.start()
    Process732.start()
    Process733.start()
    Process734.start()
    Process735.start()
    Process736.start()
    Process737.start()
    Process738.start()
    Process739.start()
    Process740.start()
    Process741.start()
    Process742.start()
    Process743.start()
    Process744.start()
    Process745.start()
    Process746.start()
    Process747.start()
    Process748.start()
    Process749.start()
    Process750.start()
    Process751.start()
    Process752.start()
    Process753.start()
    Process754.start()
    Process755.start()
    Process756.start()
    Process757.start()
    Process758.start()
    Process759.start()
    Process760.start()
    Process761.start()
    Process762.start()
    Process763.start()
    Process764.start()
    Process765.start()
    Process766.start()
    Process767.start()
    Process768.start()
    Process769.start()
    Process770.start()
    Process771.start()
    Process772.start()
    Process773.start()
    Process774.start()
    Process775.start()
    Process776.start()
    Process777.start()
    Process778.start()
    Process779.start()
    Process780.start()
    Process781.start()
    Process782.start()
    Process783.start()
    Process784.start()
    Process785.start()
    Process786.start()
    Process787.start()
    Process788.start()
    Process789.start()
    Process790.start()
    Process791.start()
    Process792.start()
    Process793.start()
    Process794.start()
    Process795.start()
    Process796.start()
    Process797.start()
    Process798.start()
    Process799.start()
    Process800.start()
    Process801.start()
    Process802.start()
    Process803.start()
    Process804.start()
    Process805.start()
    Process806.start()
    Process807.start()
    Process808.start()
    Process809.start()
    Process810.start()
    Process811.start()
    Process812.start()
    Process813.start()
    Process814.start()
    Process815.start()
    Process816.start()
    Process817.start()
    Process818.start()
    Process819.start()
    Process820.start()
    Process821.start()
    Process822.start()
    Process823.start()
    Process824.start()
    Process825.start()
    Process826.start()
    Process827.start()
    Process828.start()
    Process829.start()
    Process830.start()
    Process831.start()
    Process832.start()
    Process833.start()
    Process834.start()
    Process835.start()
    Process836.start()
    Process837.start()
    Process838.start()
    Process839.start()
    Process840.start()
    Process841.start()
    Process842.start()
    Process843.start()
    Process844.start()
    Process845.start()
    Process846.start()
    Process847.start()
    Process848.start()
    Process849.start()
    Process850.start()
    Process851.start()
    Process852.start()
    Process853.start()
    Process854.start()
    Process855.start()
    Process856.start()
    Process857.start()
    Process858.start()
    Process859.start()
    Process860.start()
    Process861.start()
    Process862.start()
    Process863.start()
    Process864.start()
    Process865.start()
    Process866.start()
    Process867.start()
    Process868.start()
    Process869.start()
    Process870.start()
    Process871.start()
    Process872.start()
    Process873.start()
    Process874.start()
    Process875.start()
    Process876.start()
    Process877.start()
    Process878.start()
    Process879.start()
    Process880.start()
    Process881.start()
    Process882.start()
    Process883.start()
    Process884.start()
    Process885.start()
    Process886.start()
    Process887.start()
    Process888.start()
    Process889.start()
    Process890.start()
    Process891.start()
    Process892.start()
    Process893.start()
    Process894.start()
    Process895.start()
    Process896.start()
    Process897.start()
    Process898.start()
    Process899.start()
    Process900.start()
    Process901.start()
    Process902.start()
    Process903.start()
    Process904.start()
    Process905.start()
    Process906.start()
    Process907.start()
    Process908.start()
    Process909.start()
    Process910.start()
    Process911.start()
    Process912.start()
    Process913.start()
    Process914.start()
    Process915.start()
    Process916.start()
    Process917.start()
    Process918.start()
    Process919.start()
    Process920.start()
    Process921.start()
    Process922.start()
    Process923.start()
    Process924.start()
    Process925.start()
    Process926.start()
    Process927.start()
    Process928.start()
    Process929.start()
    Process930.start()
    Process931.start()
    Process932.start()
    Process933.start()
    Process934.start()
    Process935.start()
    Process936.start()
    Process937.start()
    Process938.start()
    Process939.start()
    Process940.start()
    Process941.start()
    Process942.start()
    Process943.start()
    Process944.start()
    Process945.start()
    Process946.start()
    Process947.start()
    Process948.start()
    Process949.start()
    Process950.start()
    Process951.start()
    Process952.start()
    Process953.start()
    Process954.start()
    Process955.start()
    Process956.start()
    Process957.start()
    Process958.start()
    Process959.start()
    Process960.start()
    Process961.start()
    Process962.start()
    Process963.start()
    Process964.start()
    Process965.start()
    Process966.start()
    Process967.start()
    Process968.start()
    Process969.start()
    Process970.start()
    Process971.start()
    Process972.start()
    Process973.start()
    Process974.start()
    Process975.start()
    Process976.start()
    Process977.start()
    Process978.start()
    Process979.start()
    Process980.start()
    Process981.start()
    Process982.start()
    Process983.start()
    Process984.start()
    Process985.start()
    Process986.start()
    Process987.start()
    Process988.start()
    Process989.start()
    Process990.start()
    Process991.start()
    Process992.start()
    Process993.start()
    Process994.start()
    Process995.start()
    Process996.start()
    Process997.start()
    Process998.start()
    Process999.start()
    Process1000.start()
    Process1001.start()
    Process1002.start()
    Process1003.start()
    Process1004.start()
    Process1005.start()
    Process1006.start()
    Process1007.start()
    Process1008.start()
    Process1009.start()
    Process1010.start()
    Process1011.start()
    Process1012.start()
    Process1013.start()
    Process1014.start()
    Process1015.start()
    Process1016.start()
    Process1017.start()
    Process1018.start()
    Process1019.start()
    Process1020.start()
    Process1021.start()
    Process1022.start()
    Process1023.start()
    Process1024.start()
    Process1025.start()
    Process1026.start()
    Process1027.start()
    Process1028.start()
    Process1029.start()
    Process1030.start()
    Process1031.start()
    Process1032.start()
    Process1033.start()
    Process1034.start()
    Process1035.start()
    Process1036.start()
    Process1037.start()
    Process1038.start()
    Process1039.start()
    Process1040.start()
    Process1041.start()
    Process1042.start()
    Process1043.start()
    Process1044.start()
    Process1045.start()
    Process1046.start()
    Process1047.start()
    Process1048.start()
    Process1049.start()
    Process1050.start()
    Process1051.start()
    Process1052.start()
    Process1053.start()
    Process1054.start()
    Process1055.start()
    Process1056.start()
    Process1057.start()
    Process1058.start()
    Process1059.start()
    Process1060.start()
    Process1061.start()
    Process1062.start()
    Process1063.start()
    Process1064.start()
    Process1065.start()
    Process1066.start()
    Process1067.start()
    Process1068.start()
    Process1069.start()
    Process1070.start()
    Process1071.start()
    Process1072.start()
    Process1073.start()
    Process1074.start()
    Process1075.start()
    Process1076.start()
    Process1077.start()
    Process1078.start()
    Process1079.start()
    Process1080.start()
    Process1081.start()
    Process1082.start()
    Process1083.start()
    Process1084.start()
    Process1085.start()
    Process1086.start()
    Process1087.start()
    Process1088.start()
    Process1089.start()
    Process1090.start()
    Process1091.start()
    Process1092.start()
    Process1093.start()
    Process1094.start()
    Process1095.start()
    Process1096.start()
    Process1097.start()
    Process1098.start()
    Process1099.start()
    Process1100.start()
    Process1101.start()
    Process1102.start()
    Process1103.start()
    Process1104.start()
    Process1105.start()
    Process1106.start()
    Process1107.start()
    Process1108.start()
    Process1109.start()
    Process1110.start()
    Process1111.start()
    Process1112.start()
    Process1113.start()
    Process1114.start()
    Process1115.start()
    Process1116.start()
    Process1117.start()
    Process1118.start()
    Process1119.start()
    Process1120.start()
    Process1121.start()
    Process1122.start()
    Process1123.start()
    Process1124.start()
    Process1125.start()
    Process1126.start()
    Process1127.start()
    Process1128.start()
    Process1129.start()
    Process1130.start()
    Process1131.start()
    Process1132.start()
    Process1133.start()
    Process1134.start()
    Process1135.start()
    Process1136.start()
    Process1137.start()
    Process1138.start()
    Process1139.start()
    Process1140.start()
    Process1141.start()
    Process1142.start()
    Process1143.start()
    Process1144.start()
    Process1145.start()
    Process1146.start()
    Process1147.start()
    Process1148.start()
    Process1149.start()
    Process1150.start()
    Process1151.start()
    Process1152.start()
    Process1153.start()
    Process1154.start()
    Process1155.start()
    Process1156.start()
    Process1157.start()
    Process1158.start()
    Process1159.start()
    Process1160.start()
    Process1161.start()
    Process1162.start()
    Process1163.start()
    Process1164.start()
    Process1165.start()
    Process1166.start()
    Process1167.start()
    Process1168.start()
    Process1169.start()
    Process1170.start()
    Process1171.start()
    Process1172.start()
    Process1173.start()
    Process1174.start()
    Process1175.start()
    Process1176.start()
    Process1177.start()
    Process1178.start()
    Process1179.start()
    Process1180.start()
    Process1181.start()
    Process1182.start()
    Process1183.start()
    Process1184.start()
    Process1185.start()
    Process1186.start()
    Process1187.start()
    Process1188.start()
    Process1189.start()
    Process1190.start()
    Process1191.start()
    Process1192.start()
    Process1193.start()
    Process1194.start()
    Process1195.start()
    Process1196.start()
    Process1197.start()
    Process1198.start()
    Process1199.start()
    Process1200.start()
    Process1201.start()
    Process1202.start()
    Process1203.start()
    Process1204.start()
    Process1205.start()
    Process1206.start()
    Process1207.start()
    Process1208.start()
    Process1209.start()
    Process1210.start()
    Process1211.start()
    Process1212.start()
    Process1213.start()
    Process1214.start()
    Process1215.start()
    Process1216.start()
    Process1217.start()
    Process1218.start()
    Process1219.start()
    Process1220.start()
    Process1221.start()
    Process1222.start()
    Process1223.start()
    Process1224.start()
    Process1225.start()
    Process1226.start()
    Process1227.start()
    Process1228.start()
    Process1229.start()
    Process1230.start()
    Process1231.start()
    Process1232.start()
    Process1233.start()
    Process1234.start()
    Process1235.start()
    Process1236.start()
    Process1237.start()
    Process1238.start()
    Process1239.start()
    Process1240.start()
    Process1241.start()
    Process1242.start()
    Process1243.start()
    Process1244.start()
    Process1245.start()
    Process1246.start()
    Process1247.start()
    Process1248.start()
    Process1249.start()
    Process1250.start()
    Process1251.start()
    Process1252.start()
    Process1253.start()
    Process1254.start()
    Process1255.start()
    Process1256.start()
    Process1257.start()
    Process1258.start()
    Process1259.start()
    Process1260.start()
    Process1261.start()
    Process1262.start()
    Process1263.start()
    Process1264.start()
    Process1265.start()
    Process1266.start()
    Process1267.start()
    Process1268.start()
    Process1269.start()
    Process1270.start()
    Process1271.start()
    Process1272.start()
    Process1273.start()
    Process1274.start()
    Process1275.start()
    Process1276.start()
    Process1277.start()
    Process1278.start()
    Process1279.start()
    Process1280.start()
    Process1281.start()
    Process1282.start()
    Process1283.start()
    Process1284.start()
    Process1285.start()
    Process1286.start()
    Process1287.start()
    Process1288.start()
    Process1289.start()
    Process1290.start()
    Process1291.start()
    Process1292.start()
    Process1293.start()
    Process1294.start()
    Process1295.start()
    Process1296.start()
    Process1297.start()
    Process1298.start()
    Process1299.start()
    Process1300.start()
    Process1301.start()
    Process1302.start()
    Process1303.start()
    Process1304.start()
    Process1305.start()
    Process1306.start()
    Process1307.start()
    Process1308.start()
    Process1309.start()
    Process1310.start()
    Process1311.start()
    Process1312.start()
    Process1313.start()
    Process1314.start()
    Process1315.start()
    Process1316.start()
    Process1317.start()
    Process1318.start()
    Process1319.start()
    Process1320.start()
    Process1321.start()
    Process1322.start()
    Process1323.start()
    Process1324.start()
    Process1325.start()
    Process1326.start()
    Process1327.start()
    Process1328.start()
    Process1329.start()
    Process1330.start()
    Process1331.start()
    Process1332.start()
    Process1333.start()
    Process1334.start()
    Process1335.start()
    Process1336.start()
    Process1337.start()
    Process1338.start()
    Process1339.start()
    Process1340.start()
    Process1341.start()
    Process1342.start()
    Process1343.start()
    Process1344.start()
    Process1345.start()
    Process1346.start()
    Process1347.start()
    Process1348.start()
    Process1349.start()
    Process1350.start()
    Process1351.start()
    Process1352.start()
    Process1353.start()
    Process1354.start()
    Process1355.start()
    Process1356.start()
    Process1357.start()
    Process1358.start()
    Process1359.start()
    Process1360.start()
    Process1361.start()
    Process1362.start()
    Process1363.start()
    Process1364.start()
    Process1365.start()
    Process1366.start()
    Process1367.start()
    Process1368.start()
    Process1369.start()
    Process1370.start()
    Process1371.start()
    Process1372.start()
    Process1373.start()
    Process1374.start()
    Process1375.start()
    Process1376.start()
    Process1377.start()
    Process1378.start()
    Process1379.start()
    Process1380.start()
    Process1381.start()
    Process1382.start()
    Process1383.start()
    Process1384.start()
    Process1385.start()
    Process1386.start()
    Process1387.start()
    Process1388.start()
    Process1389.start()
    Process1390.start()
    Process1391.start()
    Process1392.start()
    Process1393.start()
    Process1394.start()
    Process1395.start()
    Process1396.start()
    Process1397.start()
    Process1398.start()
    Process1399.start()
    Process1400.start()
    Process1401.start()
    Process1402.start()
    Process1403.start()
    Process1404.start()
    Process1405.start()
    Process1406.start()
    Process1407.start()
    Process1408.start()
    Process1409.start()
    Process1410.start()
    Process1411.start()
    Process1412.start()
    Process1413.start()
    Process1414.start()
    Process1415.start()
    Process1416.start()
    Process1417.start()
    Process1418.start()
    Process1419.start()
    Process1420.start()
    Process1421.start()
    Process1422.start()
    Process1423.start()
    Process1424.start()
    Process1425.start()
    Process1426.start()
    Process1427.start()
    Process1428.start()
    Process1429.start()
    Process1430.start()
    Process1431.start()
    Process1432.start()
    Process1433.start()
    Process1434.start()
    Process1435.start()
    Process1436.start()
    Process1437.start()
    Process1438.start()
    Process1439.start()
    Process1440.start()
    Process1441.start()
    Process1442.start()
    Process1443.start()
    Process1444.start()
    Process1445.start()
    Process1446.start()
    Process1447.start()
    Process1448.start()
    Process1449.start()
    Process1450.start()
    Process1451.start()
    Process1452.start()
    Process1453.start()
    Process1454.start()
    Process1455.start()
    Process1456.start()
    Process1457.start()
    Process1458.start()
    Process1459.start()
    Process1460.start()
    Process1461.start()
    Process1462.start()
    Process1463.start()
    Process1464.start()
    Process1465.start()
    Process1466.start()
    Process1467.start()
    Process1468.start()
    Process1469.start()
    Process1470.start()
    Process1471.start()
    Process1472.start()
    Process1473.start()
    Process1474.start()
    Process1475.start()
    Process1476.start()
    Process1477.start()
    Process1478.start()
    Process1479.start()
    Process1480.start()
    Process1481.start()
    Process1482.start()
    Process1483.start()
    Process1484.start()
    Process1485.start()
    Process1486.start()
    Process1487.start()
    Process1488.start()
    Process1489.start()
    Process1490.start()
    Process1491.start()
    Process1492.start()
    Process1493.start()
    Process1494.start()
    Process1495.start()
    Process1496.start()
    Process1497.start()
    Process1498.start()
    Process1499.start()
    Process1500.start()
    Process1501.start()
    Process1502.start()
    Process1503.start()
    Process1504.start()
    Process1505.start()
    Process1506.start()
    Process1507.start()
    Process1508.start()
    Process1509.start()
    Process1510.start()
    Process1511.start()
    Process1512.start()
    Process1513.start()
    Process1514.start()
    Process1515.start()
    Process1516.start()
    Process1517.start()
    Process1518.start()
    Process1519.start()
    Process1520.start()
    Process1521.start()
    Process1522.start()
    Process1523.start()
    Process1524.start()
    Process1525.start()
    Process1526.start()
    Process1527.start()
    Process1528.start()
    Process1529.start()
    Process1530.start()
    Process1531.start()
    Process1532.start()
    Process1533.start()
    Process1534.start()
    Process1535.start()
    Process1536.start()
    Process1537.start()
    Process1538.start()
    Process1539.start()
    Process1540.start()
    Process1541.start()
    Process1542.start()
    Process1543.start()
    Process1544.start()
    Process1545.start()
    Process1546.start()
    Process1547.start()
    Process1548.start()
    Process1549.start()
    Process1550.start()
    Process1551.start()
    Process1552.start()
    Process1553.start()
    Process1554.start()
    Process1555.start()
    Process1556.start()
    Process1557.start()
    Process1558.start()
    Process1559.start()
    Process1560.start()
    Process1561.start()
    Process1562.start()
    Process1563.start()
    Process1564.start()
    Process1565.start()
    Process1566.start()
    Process1567.start()
    Process1568.start()
    Process1569.start()
    Process1570.start()
    Process1571.start()
    Process1572.start()
    Process1573.start()
    Process1574.start()
    Process1575.start()
    Process1576.start()
    Process1577.start()
    Process1578.start()
    Process1579.start()
    Process1580.start()
    Process1581.start()
    Process1582.start()
    Process1583.start()
    Process1584.start()
    Process1585.start()
    Process1586.start()
    Process1587.start()
    Process1588.start()
    Process1589.start()
    Process1590.start()
    Process1591.start()
    Process1592.start()
    Process1593.start()
    Process1594.start()
    Process1595.start()
    Process1596.start()
    Process1597.start()
    Process1598.start()
    Process1599.start()
    Process1600.start()
    Process1601.start()
    Process1602.start()
    Process1603.start()
    Process1604.start()
    Process1605.start()
    Process1606.start()
    Process1607.start()
    Process1608.start()
    Process1609.start()
    Process1610.start()
    Process1611.start()
    Process1612.start()
    Process1613.start()
    Process1614.start()
    Process1615.start()
    Process1616.start()
    Process1617.start()
    Process1618.start()
    Process1619.start()
    Process1620.start()
    Process1621.start()
    Process1622.start()
    Process1623.start()
    Process1624.start()
    Process1625.start()
    Process1626.start()
    Process1627.start()
    Process1628.start()
    Process1629.start()
    Process1630.start()
    Process1631.start()
    Process1632.start()
    Process1633.start()
    Process1634.start()
    Process1635.start()
    Process1636.start()
    Process1637.start()
    Process1638.start()
    Process1639.start()
    Process1640.start()
    Process1641.start()
    Process1642.start()
    Process1643.start()
    Process1644.start()
    Process1645.start()
    Process1646.start()
    Process1647.start()
    Process1648.start()
    Process1649.start()
    Process1650.start()
    Process1651.start()
    Process1652.start()
    Process1653.start()
    Process1654.start()
    Process1655.start()
    Process1656.start()
    Process1657.start()
    Process1658.start()
    Process1659.start()
    Process1660.start()
    Process1661.start()
    Process1662.start()
    Process1663.start()
    Process1664.start()
    Process1665.start()
    Process1666.start()
    Process1667.start()
    Process1668.start()
    Process1669.start()
    Process1670.start()
    Process1671.start()
    Process1672.start()
    Process1673.start()
    Process1674.start()
    Process1675.start()
    Process1676.start()
    Process1677.start()
    Process1678.start()
    Process1679.start()
    Process1680.start()
    Process1681.start()
    Process1682.start()
    Process1683.start()
    Process1684.start()
    Process1685.start()
    Process1686.start()
    Process1687.start()
    Process1688.start()
    Process1689.start()
    Process1690.start()
    Process1691.start()
    Process1692.start()
    Process1693.start()
    Process1694.start()
    Process1695.start()
    Process1696.start()
    Process1697.start()
    Process1698.start()
    Process1699.start()
    Process1700.start()
    Process1701.start()
    Process1702.start()
    Process1703.start()
    Process1704.start()
    Process1705.start()
    Process1706.start()
    Process1707.start()
    Process1708.start()
    Process1709.start()
    Process1710.start()
    Process1711.start()
    Process1712.start()
    Process1713.start()
    Process1714.start()
    Process1715.start()
    Process1716.start()
    Process1717.start()
    Process1718.start()
    Process1719.start()
    Process1720.start()
    Process1721.start()
    Process1722.start()
    Process1723.start()
    Process1724.start()
    Process1725.start()
    Process1726.start()
    Process1727.start()
    Process1728.start()
    Process1729.start()
    Process1730.start()
    Process1731.start()
    Process1732.start()
    Process1733.start()
    Process1734.start()
    Process1735.start()
    Process1736.start()
    Process1737.start()
    Process1738.start()
    Process1739.start()
    Process1740.start()
    Process1741.start()
    Process1742.start()
    Process1743.start()
    Process1744.start()
    Process1745.start()
    Process1746.start()
    Process1747.start()
    Process1748.start()
    Process1749.start()
    Process1750.start()
    Process1751.start()
    Process1752.start()
    Process1753.start()
    Process1754.start()
    Process1755.start()
    Process1756.start()
    Process1757.start()
    Process1758.start()
    Process1759.start()
    Process1760.start()
    Process1761.start()
    Process1762.start()
    Process1763.start()
    Process1764.start()
    Process1765.start()
    Process1766.start()
    Process1767.start()
    Process1768.start()
    Process1769.start()
    Process1770.start()
    Process1771.start()
    Process1772.start()
    Process1773.start()
    Process1774.start()
    Process1775.start()
    Process1776.start()
    Process1777.start()
    Process1778.start()
    Process1779.start()
    Process1780.start()
    Process1781.start()
    Process1782.start()
    Process1783.start()
    Process1784.start()
    Process1785.start()
    Process1786.start()
    Process1787.start()
    Process1788.start()
    Process1789.start()
    Process1790.start()
    Process1791.start()
    Process1792.start()
    Process1793.start()
    Process1794.start()
    Process1795.start()
    Process1796.start()
    Process1797.start()
    Process1798.start()
    Process1799.start()
    Process1800.start()
    Process1801.start()
    Process1802.start()
    Process1803.start()
    Process1804.start()
    Process1805.start()
    Process1806.start()
    Process1807.start()
    Process1808.start()
    Process1809.start()
    Process1810.start()
    Process1811.start()
    Process1812.start()
    Process1813.start()
    Process1814.start()
    Process1815.start()
    Process1816.start()
    Process1817.start()
    Process1818.start()
    Process1819.start()
    Process1820.start()
    Process1821.start()
    Process1822.start()
    Process1823.start()
    Process1824.start()
    Process1825.start()
    Process1826.start()
    Process1827.start()
    Process1828.start()
    Process1829.start()
    Process1830.start()
    Process1831.start()
    Process1832.start()
    Process1833.start()
    Process1834.start()
    Process1835.start()
    Process1836.start()
    Process1837.start()
    Process1838.start()
    Process1839.start()
    Process1840.start()
    Process1841.start()
    Process1842.start()
    Process1843.start()
    Process1844.start()
    Process1845.start()
    Process1846.start()
    Process1847.start()
    Process1848.start()
    Process1849.start()
    Process1850.start()
    Process1851.start()
    Process1852.start()
    Process1853.start()
    Process1854.start()
    Process1855.start()
    Process1856.start()
    Process1857.start()
    Process1858.start()
    Process1859.start()
    Process1860.start()
    Process1861.start()
    Process1862.start()
    Process1863.start()
    Process1864.start()
    Process1865.start()
    Process1866.start()
    Process1867.start()
    Process1868.start()
    Process1869.start()
    Process1870.start()
    Process1871.start()
    Process1872.start()
    Process1873.start()
    Process1874.start()
    Process1875.start()
    Process1876.start()
    Process1877.start()
    Process1878.start()
    Process1879.start()
    Process1880.start()
    Process1881.start()
    Process1882.start()
    Process1883.start()
    Process1884.start()
    Process1885.start()
    Process1886.start()
    Process1887.start()
    Process1888.start()
    Process1889.start()
    Process1890.start()
    Process1891.start()
    Process1892.start()
    Process1893.start()
    Process1894.start()
    Process1895.start()
    Process1896.start()
    Process1897.start()
    Process1898.start()
    Process1899.start()
    Process1900.start()
    Process1901.start()
    Process1902.start()
    Process1903.start()
    Process1904.start()
    Process1905.start()
    Process1906.start()
    Process1907.start()
    Process1908.start()
    Process1909.start()
    Process1910.start()
    Process1911.start()
    Process1912.start()
    Process1913.start()
    Process1914.start()
    Process1915.start()
    Process1916.start()
    Process1917.start()
    Process1918.start()
    Process1919.start()
    Process1920.start()
    Process1921.start()
    Process1922.start()
    Process1923.start()
    Process1924.start()
    Process1925.start()
    Process1926.start()
    Process1927.start()
    Process1928.start()
    Process1929.start()
    Process1930.start()
    Process1931.start()
    Process1932.start()
    Process1933.start()
    Process1934.start()
    Process1935.start()
    Process1936.start()
    Process1937.start()
    Process1938.start()
    Process1939.start()
    Process1940.start()
    Process1941.start()
    Process1942.start()
    Process1943.start()
    Process1944.start()
    Process1945.start()
    Process1946.start()
    Process1947.start()
    Process1948.start()
    Process1949.start()
    Process1950.start()
    Process1951.start()
    Process1952.start()
    Process1953.start()
    Process1954.start()
    Process1955.start()
    Process1956.start()
    Process1957.start()
    Process1958.start()
    Process1959.start()
    Process1960.start()
    Process1961.start()
    Process1962.start()
    Process1963.start()
    Process1964.start()
    Process1965.start()
    Process1966.start()
    Process1967.start()
    Process1968.start()
    Process1969.start()
    Process1970.start()
    Process1971.start()
    Process1972.start()
    Process1973.start()
    Process1974.start()
    Process1975.start()
    Process1976.start()
    Process1977.start()
    Process1978.start()
    Process1979.start()
    Process1980.start()
    Process1981.start()
    Process1982.start()
    Process1983.start()
    Process1984.start()
    Process1985.start()
    Process1986.start()
    Process1987.start()
    Process1988.start()
    Process1989.start()
    Process1990.start()
    Process1991.start()
    Process1992.start()
    Process1993.start()
    Process1994.start()
    Process1995.start()
    Process1996.start()
    Process1997.start()
    Process1998.start()
    Process1999.start()
    Process2000.start()
    Process2001.start()
    Process2002.start()
    Process2003.start()
    Process2004.start()
    Process2005.start()
    Process2006.start()
    Process2007.start()
    Process2008.start()
    Process2009.start()
    Process2010.start()
    Process2011.start()
    Process2012.start()
    Process2013.start()
    Process2014.start()
    Process2015.start()
    Process2016.start()
    Process2017.start()
    Process2018.start()
    Process2019.start()
    Process2020.start()
    Process2021.start()
    Process2022.start()
    Process2023.start()
    Process2024.start()
    Process2025.start()
    Process2026.start()
    Process2027.start()
    Process2028.start()
    Process2029.start()
    Process2030.start()
    Process2031.start()
    Process2032.start()
    Process2033.start()
    Process2034.start()
    Process2035.start()
    Process2036.start()
    Process2037.start()
    Process2038.start()
    Process2039.start()
    Process2040.start()
    Process2041.start()
    Process2042.start()
    Process2043.start()
    Process2044.start()
    Process2045.start()
    Process2046.start()
    Process2047.start()
    Process2048.start()
    Process2049.start()
    Process2050.start()
    Process2051.start()
    Process2052.start()
    Process2053.start()
    Process2054.start()
    Process2055.start()
    Process2056.start()
    Process2057.start()
    Process2058.start()
    Process2059.start()
    Process2060.start()
    Process2061.start()
    Process2062.start()
    Process2063.start()
    Process2064.start()
    Process2065.start()
    Process2066.start()
    Process2067.start()
    Process2068.start()
    Process2069.start()
    Process2070.start()
    Process2071.start()
    Process2072.start()
    Process2073.start()
    Process2074.start()
    Process2075.start()
    Process2076.start()
    Process2077.start()
    Process2078.start()
    Process2079.start()
    Process2080.start()
    Process2081.start()
    Process2082.start()
    Process2083.start()
    Process2084.start()
    Process2085.start()
    Process2086.start()
    Process2087.start()
    Process2088.start()
    Process2089.start()
    Process2090.start()
    Process2091.start()
    Process2092.start()
    Process2093.start()
    Process2094.start()
    Process2095.start()
    Process2096.start()
    Process2097.start()
    Process2098.start()
    Process2099.start()
    Process2100.start()
    Process2101.start()
    Process2102.start()
    Process2103.start()
    Process2104.start()
    Process2105.start()
    Process2106.start()
    Process2107.start()
    Process2108.start()
    Process2109.start()
    Process2110.start()
    Process2111.start()
    Process2112.start()
    Process2113.start()
    Process2114.start()
    Process2115.start()
    Process2116.start()
    Process2117.start()
    Process2118.start()
    Process2119.start()
    Process2120.start()
    Process2121.start()
    Process2122.start()
    Process2123.start()
    Process2124.start()
    Process2125.start()
    Process2126.start()
    Process2127.start()
    Process2128.start()
    Process2129.start()
    Process2130.start()
    Process2131.start()
    Process2132.start()
    Process2133.start()
    Process2134.start()
    Process2135.start()
    Process2136.start()
    Process2137.start()
    Process2138.start()
    Process2139.start()
    Process2140.start()
    Process2141.start()
    Process2142.start()
    Process2143.start()
    Process2144.start()
    Process2145.start()
    Process2146.start()
    Process2147.start()
    Process2148.start()
    Process2149.start()
    Process2150.start()
    Process2151.start()
    Process2152.start()
    Process2153.start()
    Process2154.start()
    Process2155.start()
    Process2156.start()
    Process2157.start()
    Process2158.start()
    Process2159.start()
    Process2160.start()
    Process2161.start()
    Process2162.start()
    Process2163.start()
    Process2164.start()
    Process2165.start()
    Process2166.start()
    Process2167.start()
    Process2168.start()
    Process2169.start()
    Process2170.start()
    Process2171.start()
    Process2172.start()
    Process2173.start()
    Process2174.start()
    Process2175.start()
    Process2176.start()
    Process2177.start()
    Process2178.start()
    Process2179.start()
    Process2180.start()
    Process2181.start()
    Process2182.start()
    Process2183.start()
    Process2184.start()
    Process2185.start()
    Process2186.start()
    Process2187.start()
    Process2188.start()
    Process2189.start()
    Process2190.start()
    Process2191.start()
    Process2192.start()
    Process2193.start()
    Process2194.start()
    Process2195.start()
    Process2196.start()
    Process2197.start()
    Process2198.start()
    Process2199.start()
    Process2200.start()
    Process2201.start()
    Process2202.start()
    Process2203.start()
    Process2204.start()
    Process2205.start()
    Process2206.start()
    Process2207.start()
    Process2208.start()
    Process2209.start()
    Process2210.start()
    Process2211.start()
    Process2212.start()
    Process2213.start()
    Process2214.start()
    Process2215.start()
    Process2216.start()
    Process2217.start()
    Process2218.start()
    Process2219.start()
    Process2220.start()
    Process2221.start()
    Process2222.start()
    Process2223.start()
    Process2224.start()
    Process2225.start()
    Process2226.start()
    Process2227.start()
    Process2228.start()
    Process2229.start()
    Process2230.start()
    Process2231.start()
    Process2232.start()
    Process2233.start()
    Process2234.start()
    Process2235.start()
    Process2236.start()
    Process2237.start()
    Process2238.start()
    Process2239.start()
    Process2240.start()
    Process2241.start()
    Process2242.start()
    Process2243.start()
    Process2244.start()
    Process2245.start()
    Process2246.start()
    Process2247.start()
    Process2248.start()
    Process2249.start()
    Process2250.start()
    Process2251.start()
    Process2252.start()
    Process2253.start()
    Process2254.start()
    Process2255.start()
    Process2256.start()
    Process2257.start()
    Process2258.start()
    Process2259.start()
    Process2260.start()
    Process2261.start()
    Process2262.start()
    Process2263.start()
    Process2264.start()
    Process2265.start()
    Process2266.start()
    Process2267.start()
    Process2268.start()
    Process2269.start()
    Process2270.start()
    Process2271.start()
    Process2272.start()
    Process2273.start()
    Process2274.start()
    Process2275.start()
    Process2276.start()
    Process2277.start()
    Process2278.start()
    Process2279.start()
    Process2280.start()
    Process2281.start()
    Process2282.start()
    Process2283.start()
    Process2284.start()
    Process2285.start()
    Process2286.start()
    Process2287.start()
    Process2288.start()
    Process2289.start()
    Process2290.start()
    Process2291.start()
    Process2292.start()
    Process2293.start()
    Process2294.start()
    Process2295.start()
    Process2296.start()
    Process2297.start()
    Process2298.start()
    Process2299.start()
    Process2300.start()
    Process2301.start()
    Process2302.start()
    Process2303.start()
    Process2304.start()
    Process2305.start()
    Process2306.start()
    Process2307.start()
    Process2308.start()
    Process2309.start()
    Process2310.start()
    Process2311.start()
    Process2312.start()
    Process2313.start()
    Process2314.start()
    Process2315.start()
    Process2316.start()
    Process2317.start()
    Process2318.start()
    Process2319.start()
    Process2320.start()
    Process2321.start()
    Process2322.start()
    Process2323.start()
    Process2324.start()
    Process2325.start()
    Process2326.start()
    Process2327.start()
    Process2328.start()
    Process2329.start()
    Process2330.start()
    Process2331.start()
    Process2332.start()
    Process2333.start()
    Process2334.start()
    Process2335.start()
    Process2336.start()
    Process2337.start()
    Process2338.start()
    Process2339.start()
    Process2340.start()
    Process2341.start()
    Process2342.start()
    Process2343.start()
    Process2344.start()
    Process2345.start()
    Process2346.start()
    Process2347.start()
    Process2348.start()
    Process2349.start()
    Process2350.start()
    Process2351.start()
    Process2352.start()
    Process2353.start()
    Process2354.start()
    Process2355.start()
    Process2356.start()
    Process2357.start()
    Process2358.start()
    Process2359.start()
    Process2360.start()
    Process2361.start()
    Process2362.start()
    Process2363.start()
    Process2364.start()
    Process2365.start()
    Process2366.start()
    Process2367.start()
    Process2368.start()
    Process2369.start()
    Process2370.start()
    Process2371.start()
    Process2372.start()
    Process2373.start()
    Process2374.start()
    Process2375.start()
    Process2376.start()
    Process2377.start()
    Process2378.start()
    Process2379.start()
    Process2380.start()
    Process2381.start()
    Process2382.start()
    Process2383.start()
    Process2384.start()
    Process2385.start()
    Process2386.start()
    Process2387.start()
    Process2388.start()
    Process2389.start()
    Process2390.start()
    Process2391.start()
    Process2392.start()
    Process2393.start()
    Process2394.start()
    Process2395.start()
    Process2396.start()
    Process2397.start()
    Process2398.start()
    Process2399.start()
    Process2400.start()
    Process2401.start()
    Process2402.start()
    Process2403.start()
    Process2404.start()
    Process2405.start()
    Process2406.start()
    Process2407.start()
    Process2408.start()
    Process2409.start()
    Process2410.start()
    Process2411.start()
    Process2412.start()
    Process2413.start()
    Process2414.start()
    Process2415.start()
    Process2416.start()
    Process2417.start()
    Process2418.start()
    Process2419.start()
    Process2420.start()
    Process2421.start()
    Process2422.start()
    Process2423.start()
    Process2424.start()
    Process2425.start()
    Process2426.start()
    Process2427.start()
    Process2428.start()
    Process2429.start()
    Process2430.start()
    Process2431.start()
    Process2432.start()
    Process2433.start()
    Process2434.start()
    Process2435.start()
    Process2436.start()
    Process2437.start()
    Process2438.start()
    Process2439.start()
    Process2440.start()
    Process2441.start()
    Process2442.start()
    Process2443.start()
    Process2444.start()
    Process2445.start()
    Process2446.start()
    Process2447.start()
    Process2448.start()
    Process2449.start()
    Process2450.start()
    Process2451.start()
    Process2452.start()
    Process2453.start()
    Process2454.start()
    Process2455.start()
    Process2456.start()
    Process2457.start()
    Process2458.start()
    Process2459.start()
    Process2460.start()
    Process2461.start()
    Process2462.start()
    Process2463.start()
    Process2464.start()
    Process2465.start()
    Process2466.start()
    Process2467.start()
    Process2468.start()
    Process2469.start()
    Process2470.start()
    Process2471.start()
    Process2472.start()
    Process2473.start()
    Process2474.start()
    Process2475.start()
    Process2476.start()
    Process2477.start()
    Process2478.start()
    Process2479.start()
    Process2480.start()
    Process2481.start()
    Process2482.start()
    Process2483.start()
    Process2484.start()
    Process2485.start()
    Process2486.start()
    Process2487.start()
    Process2488.start()
    Process2489.start()
    Process2490.start()
    Process2491.start()
    Process2492.start()
    Process2493.start()
    Process2494.start()
    Process2495.start()
    Process2496.start()
    Process2497.start()
    Process2498.start()
    Process2499.start()
    Process2500.start()
    Process2501.start()
    Process2502.start()
    Process2503.start()
    Process2504.start()
    Process2505.start()
    Process2506.start()
    Process2507.start()
    Process2508.start()
    Process2509.start()
    Process2510.start()
    Process2511.start()
    Process2512.start()
    Process2513.start()
    Process2514.start()
    Process2515.start()
    Process2516.start()
    Process2517.start()
    Process2518.start()
    Process2519.start()
    Process2520.start()
    Process2521.start()
    Process2522.start()
    Process2523.start()
    Process2524.start()
    Process2525.start()
    Process2526.start()
    Process2527.start()
    Process2528.start()
    Process2529.start()
    Process2530.start()
    Process2531.start()
    Process2532.start()
    Process2533.start()
    Process2534.start()
    Process2535.start()
    Process2536.start()
    Process2537.start()
    Process2538.start()
    Process2539.start()
    Process2540.start()
    Process2541.start()
    Process2542.start()
    Process2543.start()
    Process2544.start()
    Process2545.start()
    Process2546.start()
    Process2547.start()
    Process2548.start()
    Process2549.start()
    Process2550.start()
    Process2551.start()
    Process2552.start()
    Process2553.start()
    Process2554.start()
    Process2555.start()
    Process2556.start()
    Process2557.start()
    Process2558.start()
    Process2559.start()
    Process2560.start()
    Process2561.start()
    Process2562.start()
    Process2563.start()
    Process2564.start()
    Process2565.start()
    Process2566.start()
    Process2567.start()
    Process2568.start()
    Process2569.start()
    Process2570.start()
    Process2571.start()
    Process2572.start()
    Process2573.start()
    Process2574.start()
    Process2575.start()
    Process2576.start()
    Process2577.start()
    Process2578.start()
    Process2579.start()
    Process2580.start()
    Process2581.start()
    Process2582.start()
    Process2583.start()
    Process2584.start()
    Process2585.start()
    Process2586.start()
    Process2587.start()
    Process2588.start()
    Process2589.start()
    Process2590.start()
    Process2591.start()
    Process2592.start()
    Process2593.start()
    Process2594.start()
    Process2595.start()
    Process2596.start()
    Process2597.start()
    Process2598.start()
    Process2599.start()
    Process2600.start()
    Process2601.start()
    Process2602.start()
    Process2603.start()
    Process2604.start()
    Process2605.start()
    Process2606.start()
    Process2607.start()
    Process2608.start()
    Process2609.start()
    Process2610.start()
    Process2611.start()
    Process2612.start()
    Process2613.start()
    Process2614.start()
    Process2615.start()
    Process2616.start()
    Process2617.start()
    Process2618.start()
    Process2619.start()
    Process2620.start()
    Process2621.start()
    Process2622.start()
    Process2623.start()
    Process2624.start()
    Process2625.start()
    Process2626.start()
    Process2627.start()
    Process2628.start()
    Process2629.start()
    Process2630.start()
    Process2631.start()
    Process2632.start()
    Process2633.start()
    Process2634.start()
    Process2635.start()
    Process2636.start()
    Process2637.start()
    Process2638.start()
    Process2639.start()
    Process2640.start()
    Process2641.start()
    Process2642.start()
    Process2643.start()
    Process2644.start()
    Process2645.start()
    Process2646.start()
    Process2647.start()
    Process2648.start()
    Process2649.start()
    Process2650.start()
    Process2651.start()
    Process2652.start()
    Process2653.start()
    Process2654.start()
    Process2655.start()
    Process2656.start()
    Process2657.start()
    Process2658.start()
    Process2659.start()
    Process2660.start()
    Process2661.start()
    Process2662.start()
    Process2663.start()
    Process2664.start()
    Process2665.start()
    Process2666.start()
    Process2667.start()
    Process2668.start()
    Process2669.start()
    Process2670.start()
    Process2671.start()
    Process2672.start()
    Process2673.start()
    Process2674.start()
    Process2675.start()
    Process2676.start()
    Process2677.start()
    Process2678.start()
    Process2679.start()
    Process2680.start()
    Process2681.start()
    Process2682.start()
    Process2683.start()
    Process2684.start()
    Process2685.start()
    Process2686.start()
    Process2687.start()
    Process2688.start()
    Process2689.start()
    Process2690.start()
    Process2691.start()
    Process2692.start()
    Process2693.start()
    Process2694.start()
    Process2695.start()
    Process2696.start()
    Process2697.start()
    Process2698.start()
    Process2699.start()
    Process2700.start()
    Process2701.start()
    Process2702.start()
    Process2703.start()
    Process2704.start()
    Process2705.start()
    Process2706.start()
    Process2707.start()
    Process2708.start()
    Process2709.start()
    Process2710.start()
    Process2711.start()
    Process2712.start()
    Process2713.start()
    Process2714.start()
    Process2715.start()
    Process2716.start()
    Process2717.start()
    Process2718.start()
    Process2719.start()
    Process2720.start()
    Process2721.start()
    Process2722.start()
    Process2723.start()
    Process2724.start()
    Process2725.start()
    Process2726.start()
    Process2727.start()
    Process2728.start()
    Process2729.start()
    Process2730.start()
    Process2731.start()
    Process2732.start()
    Process2733.start()
    Process2734.start()
    Process2735.start()
    Process2736.start()
    Process2737.start()
    Process2738.start()
    Process2739.start()
    Process2740.start()
    Process2741.start()
    Process2742.start()
    Process2743.start()
    Process2744.start()
    Process2745.start()
    Process2746.start()
    Process2747.start()
    Process2748.start()
    Process2749.start()
    Process2750.start()
    Process2751.start()
    Process2752.start()
    Process2753.start()
    Process2754.start()
    Process2755.start()
    Process2756.start()