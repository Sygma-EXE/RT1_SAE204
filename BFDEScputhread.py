from Crypto.Cipher import DES
import itertools
import threading
import base64

key = b'abaaaab~'
texte = b'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus.'

#Chiffrement
enc = DES.new(key, DES.MODE_CFB)
cipher = enc.encrypt(texte)
enc_cipher = base64.b64encode(enc.iv + cipher)
#print(enc_cipher)

#DÃ©chiffrement
decoded = base64.b64decode(enc_cipher)
iv = decoded[:8]
ciphertext = decoded[8:]

def decrypt_aa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'aa'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ab():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ab'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ab')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ad():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ad'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ad')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_af():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'af'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -af')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ah():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ah"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ah')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_al():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "al"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -al')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_an():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "an"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -an')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ap():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ap"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ap')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ar"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ar')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_at():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "at"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -at')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_av():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "av"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -av')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ax():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ax"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ax')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_az():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "az"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -az')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'aA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "aZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_a0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_a2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_a4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_a6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_a8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_adquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'a"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_adoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_apar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_avir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_app():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_atp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_amore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_acroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_absl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_acirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_acr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ahl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_atild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "a~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -a~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1

def decrypt_ba():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ba"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ba')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_br():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "br"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -br')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "bZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_b0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_b2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_b4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_b6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_b8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'b"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_band():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_btp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_baro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_besp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_btild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "b~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -b~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1

def decrypt_da():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "da"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -da')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if i ==1000 or ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_db():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "db"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -db')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_df():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "df"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -df')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "dZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_d0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_d2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_d4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_d6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_d8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ddquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'd"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ddoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_daro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_desp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "d~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -d~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fa"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fa"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ff():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ff"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ff')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ft():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ft"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ft')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "fZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -fZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_f0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_f2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_f4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_f6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_f8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'f"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ftp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_faro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_fhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ftild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "f~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -f~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ha():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ha"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ha')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ht():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ht"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ht')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "hZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_h0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_h2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_h4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_h6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_h8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'h"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_htp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_haro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_htild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "h~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -h~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ja():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ja"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ja')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "jZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -jZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_j0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_j2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_j4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_j6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_j8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'j"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_jtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "j~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -j~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_la():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "la"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -la')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ld():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ld"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ld')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ll"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ll')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ln():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ln"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ln')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "lZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -lZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_l0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_l2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_l4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_l6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_l8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ldquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'l"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ldoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_land():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_last():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ltp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_laro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ltild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "l~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -l~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_na():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "na"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -na')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_np():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "np"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -np')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "nZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -nZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_n0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_n2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_n4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_n6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_n8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ndquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'n"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ndoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_npar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_npp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ntp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_naro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ncroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ncirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ncr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_nhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ntild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "n~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -n~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pa"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ph():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ph"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ph')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_px():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "px"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -px')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "pZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_p0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_p2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_p4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_p6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_p8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'p"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ppar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_past():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ppp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ptp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_paro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_phl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ptild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "p~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -p~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ra():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ra"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ra')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "rZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -rZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_r0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_r2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_r4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_r6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_r8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'r"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_raro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_resp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_rtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "r~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -r~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ta():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "ta"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ta')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_td():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "td"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -td')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_th():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "th"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -th')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "tZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_t0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_t2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_t4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_t6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_t8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_texcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 't"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ttp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_taro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_thl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ttild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "t~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -t~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_va():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "va"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -va')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "VB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "vZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_v0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_v2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_v4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_v6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_v8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'v"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_varo():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "v~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -v~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xa"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "xZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -xZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_x0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_x2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_x4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_x6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_x8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'x"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_xtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "x~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -x~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_za():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "za"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -za')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "zZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -zZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_z0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_z2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_z4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_z6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_z8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'z"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ztp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_zhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ztild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "z~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -z~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Aa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Aa'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Aa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ab():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Ab"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ab')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ad():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Ad"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ad')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Af():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Af"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Af')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ah():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Ah"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ah')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Aj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Aj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Aj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Al():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Al"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Al')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_An():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "An"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -An')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ap():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Ap"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ap')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Ar"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ar')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_At():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "At"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -At')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Av():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Av"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Av')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ax():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Ax"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ax')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Az():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Az"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Az')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_AA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'AA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_AB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_AD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_AF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_AH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_AJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_AL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_AN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_AP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_AR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_AT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_AV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_AX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_AZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "AZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -AZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_A0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_A2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_A4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_A6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_A8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Aexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Adquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'A"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Adoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Aand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Aquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Apar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Aast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Avir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_App():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Atp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Aless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Amore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Aaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Acroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Absl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Acirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Aesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Acr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ahl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Atild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "A~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -A~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ba():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Ba"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ba')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bf"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Br():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Br"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Br')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Bz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_BA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_BB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_BD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_BF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_BH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_BJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_BL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_BN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_BP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_BR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_BT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_BV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_BX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_BZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "BZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -BZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_B0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_B2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_B4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_B6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_B8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'B"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Band():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Btp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Baro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Besp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Bhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Btild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "B~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -B~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Da():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Da"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Da')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Db():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Db"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Db')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Dd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Df():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Df"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Df')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Dh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Dj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Dl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Dn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Dp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Dr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Dt"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Dv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Dx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Dz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_DA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_DB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_DD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_DF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_DH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_DJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_DL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_DN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_DP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_DR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_DT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_DV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_DX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_DZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "DZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -DZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_D0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_D2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_D4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_D6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_D8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ddquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'D"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ddoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D,"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D."+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D:"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D<"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D>"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Daro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D@"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D["+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D\\"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D^"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Desp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D`"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D{"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D|"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Dtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "D~"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -D~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fa"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fb"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fd"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ff():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Ff"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ff')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fh"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fj"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fl"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fn"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fp"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fr"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ft():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Ft"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ft')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fv"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fx"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "Fz"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_FA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FA"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_FB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FB"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_FD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FD"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_FF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FF"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_FH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FH"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_FJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FJ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_FL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FL"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_FN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FN"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_FP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FP"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_FR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FR"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_FT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FT"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_FV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FV"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_FX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FX"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_FZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "FZ"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -FZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_F0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "F0"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_F2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "F2"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_F4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "F4"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_F6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "F6"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_F8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "F8"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "F!"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "F$"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "F&"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "F\'"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "F("+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = "F*"+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ftp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Faro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Fhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ftild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'F~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -F~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ha():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Ha'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ha')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hb'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hd'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hf'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hh'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hj'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hl'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hn'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hp'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hr'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ht():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Ht'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ht')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hv'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hx'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Hz'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_HA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_HB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HB'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_HD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HD'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_HF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HF'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_HH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HH'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_HJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HJ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_HL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HL'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_HN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HN'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_HP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HP'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_HR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HR'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_HT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HT'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_HV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HV'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_HX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HX'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_HZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'HZ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -HZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_H0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_H2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_H4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_H6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_H8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Htp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Haro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Hhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Htild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'H~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -H~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ja():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Ja'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ja')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jb'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jd'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jf'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jh'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jj'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jl'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jn'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jp'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jr'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jt'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jv'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jx'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Jz'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_JA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_JB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JB'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_JD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JD'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_JF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JF'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_JH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JH'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_JJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JJ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_JL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JL'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_JN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JN'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_JP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JP'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_JR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JR'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_JT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JT'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_JV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JV'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_JX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JX'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_JZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'JZ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -JZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_J0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_J2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_J4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_J6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_J8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Jtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'J~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -J~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_La():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'La'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -La')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Lb'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ld():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Ld'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ld')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Lf'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Lh'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Lj'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Ll'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ll')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ln():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Ln'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ln')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Lp'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Lr'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Lt'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Lv'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Lx'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Lz'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_LA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_LB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LB'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_LD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LD'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_LF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LF'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_LH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LH'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_LJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LJ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_LL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LL'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_LN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LN'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_LP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LP'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_LR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LR'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_LT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LT'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_LV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LV'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_LX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LX'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_LZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'LZ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -LZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_L0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_L2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_L4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_L6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_L8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ldquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ldoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Land():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Last():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ltp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Laro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Lhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ltild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'L~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -L~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Na():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Na'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Na')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Nb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nb'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Nd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nd'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Nf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nf'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Nh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nh'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Nj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nj'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Nl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nl'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Nn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nn'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Np():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Np'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Np')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Nr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nr'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Nt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nt'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Nv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nv'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Nx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nx'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Nz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Nz'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_NA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_NB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NB'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ND():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ND'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ND')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_NF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NF'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_NH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NH'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_NJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NJ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_NL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NL'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_NN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NN'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_NP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NP'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_NR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NR'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_NT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NT'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_NV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NV'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_NX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NX'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_NZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'NZ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -NZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_N0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_N2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_N4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_N6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_N8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Nexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ndquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ndoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Nand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Nquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Npar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Nast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Nvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Npp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ntp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Nless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Nmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Naro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ncroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Nbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ncirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Nesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ncr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Nhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ntild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'N~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -N~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pa'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pb'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pd'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pf'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ph():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Ph'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ph')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pj'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pl'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pn'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pp'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pr'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pt'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pv'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Px():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Px'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Px')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Pz'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_PA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_PB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PB'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_PD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PD'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_PF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PF'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_PH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PH'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_PJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PJ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_PL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PL'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_PN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PN'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_PP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PP'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_PR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PR'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_PT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PT'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_PV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PV'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_PX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PX'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_PZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'PZ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -PZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_P0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_P2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_P4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_P6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_P8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ppar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Past():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ppp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ptp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Paro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Pcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Phl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ptild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'P~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -P~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ra():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Ra'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ra')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rb'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rd'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rf'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rh'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rj'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rl'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rn'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rp'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rr'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rt'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rv'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rx'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Rz'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_RA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_RB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RB'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_RD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RD'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_RF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RF'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_RH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RH'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_RJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RJ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_RL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RL'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_RN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RN'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_RP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RP'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_RR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RR'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_RT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RT'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_RV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RV'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_RX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RX'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_RZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'RZ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -RZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_R0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_R2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_R4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_R6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_R8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Raro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Resp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Rtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'R~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -R~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ta():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Ta'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ta')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Tb'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Td():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Td'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Td')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Tf'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Th():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Th'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Th')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Tj'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Tl'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Tn'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Tp'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Tr'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Tt'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Tv'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Tx'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Tz'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_TA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_TB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TB'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_TD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TD'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_TF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TF'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_TH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TH'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_TJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TJ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_TL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TL'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_TN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TN'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_TP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TP'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_TR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TR'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_TT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TT'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_TV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TV'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_TX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TX'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_TZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'TZ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -TZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_T0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_T2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_T4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_T6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_T8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Texcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ttp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Taro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Tcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Thl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ttild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'T~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -T~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Va():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Va'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Va')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vb'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vd'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vf'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vh'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vj'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vl'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vn'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vp'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vr'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vt'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vv'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vx'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Vz'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_VA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_VB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VB'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_VD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VD'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_VF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VF'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_VH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VH'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_VJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VJ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_VL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VL'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_VN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VN'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_VP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VP'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_VR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VR'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_VT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VT'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_VV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VV'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_VX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VX'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_VZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'VZ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -VZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_V0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_V2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_V4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_V6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_V8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Varo():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Vtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'V~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -V~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xa'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xb'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xd'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xf'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xh'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xj'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xl'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xn'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xp'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xr'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xt'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xv'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xx'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Xz'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_XA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_XB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XB'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_XD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XD'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_XF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XF'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_XH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XH'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_XJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XJ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_XL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XL'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_XN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XN'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_XP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XP'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_XR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XR'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_XT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XT'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_XV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XV'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_XX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XX'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_XZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'XZ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -XZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_X0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_X2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_X4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_X6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_X8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Xtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'X~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -X~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Za():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Za'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Za')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zb'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zd'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zf'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zh'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zj'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zl'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zn'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zp'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zr'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zt'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zv'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zx'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Zz'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ZA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZA'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ZB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZB'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ZD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZD'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ZF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZF'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ZH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZH'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ZJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZJ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ZL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZL'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ZN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZN'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ZP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZP'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ZR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZR'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ZT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZT'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ZV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZV'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ZX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZX'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ZZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'ZZ'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Z0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Z2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Z4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Z6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Z8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ztp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Zhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_Ztild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'Z~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0a():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0b():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0d():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0f():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0h():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0j():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0l():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0n():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0p():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0r():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0t():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0v():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0x():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0z():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0A():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0B():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0D():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0F():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0H():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0J():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0L():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0N():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0P():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0R():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0T():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0V():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0X():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0Z():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_00():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '00'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -00')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_02():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '02'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -02')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_04():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '04'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -04')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_06():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '06'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -06')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_08():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '08'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -08')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0excl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0dquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0doll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0and():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0quote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0par():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0ast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0vir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0pp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0tp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0less():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0more():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0aro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0croc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0bsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0circ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0esp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0cr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0hl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_0tild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '0~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -0~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2a():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2b():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2d():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2f():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2h():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2j():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2l():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2n():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2p():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2r():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2t():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2v():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2x():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2z():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2A():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2B():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2D():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2F():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2H():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2J():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2L():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2N():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2P():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2R():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2T():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2V():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2X():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2Z():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_20():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '20'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -20')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_22():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '22'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -22')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_24():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '24'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -24')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_26():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '26'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -26')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_28():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '28'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -28')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2excl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2dquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2doll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2and():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2quote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2par():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2ast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2vir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2pp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2tp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2less():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2more():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2aro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2croc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2bsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2circ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2esp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2cr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2hl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_2tild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '2~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -2~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4a():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4b():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4d():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4f():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4h():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4j():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4l():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4n():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4p():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4r():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4t():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4v():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4x():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4z():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4A():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4B():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4D():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4F():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4H():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4J():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4L():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4N():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4P():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4R():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4T():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4V():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4X():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4Z():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_40():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '40'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -40')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_42():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '42'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -42')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_44():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '44'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -44')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_46():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '46'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -46')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_48():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '48'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -48')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4excl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4dquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4doll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4and():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4quote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4par():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4ast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4vir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4pp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4tp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4less():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4more():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4aro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4croc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4bsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4circ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4esp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4cr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4hl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_4tild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '4~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -4~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6a():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6b():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6d():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6f():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6h():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6j():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6l():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6n():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6p():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6r():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6t():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6v():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6x():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6z():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6A():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6B():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6D():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6F():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6H():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6J():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6L():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6N():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6P():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6R():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6T():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6V():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6X():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6Z():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_60():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '60'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -60')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_62():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '62'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -62')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_64():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '64'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -64')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_66():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '66'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -66')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_68():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '68'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -68')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6excl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6dquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6doll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6and():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6quote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6par():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6ast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6vir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6pp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6tp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6less():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6more():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6aro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6croc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6bsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6circ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6esp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6cr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6hl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_6tild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '6~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -6~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8a():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8b():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8d():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8f():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8h():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8j():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8l():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8n():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8p():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8r():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8t():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8v():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8x():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8z():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8A():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8B():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8D():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8F():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8H():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8J():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8L():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8N():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8P():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8R():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8T():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8V():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8X():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8Z():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_80():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '80'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -80')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_82():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '82'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -82')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_84():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '84'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -84')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_86():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '86'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -86')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_88():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '88'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -88')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8excl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8dquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8doll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8and():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8quote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8par():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8ast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8vir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8pp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8tp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8less():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8more():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8aro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8croc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8bsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8circ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8esp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8cr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8hl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_8tild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '8~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -8~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_excla():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_excld():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_excll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_excln():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_excl0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_excl2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_excl4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_excl6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_excl8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_excldquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_excldoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_excland():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -excl(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_excltp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -![')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_exclhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_excltild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '!~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -!~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquota():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquoth():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquott():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquot0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquot2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquot4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquot6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquot8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '""'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -""')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -dquote(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '",'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -",')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '".'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -".')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquottp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '":'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -":')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '">'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -">')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquotcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquothl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubquottild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '"~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -"~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dolla():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dolld():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dolll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dolln():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doll0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doll2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doll4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doll6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doll8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dolldquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dolldoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dolland():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -doll(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dolltp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '${'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -${')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dollhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_dolltild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '$~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -$~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespab():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespad():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespah():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespal():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespan():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespap():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespat():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespav():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespax():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespa0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespa2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespa4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespa6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespa8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespadquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespadoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespapar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = 'and('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -and(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespavir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespapp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespatp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespamore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespacroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespabsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespacirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespaesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespacr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespahl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decryptespatild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '&~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -&~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quota():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quoth():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quott():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quot0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quot2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quot4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quot6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quot8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\','+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\',')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quottp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\':'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\':')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'\\'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'\\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quotcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quothl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_quottild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\'~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parena():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parend():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parent():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_paren0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_paren2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_paren4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_paren6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_paren8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parendquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '("'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -("')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parendoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '($'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -($')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parpara():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -par(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parentp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parencroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -([')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parencirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parencr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '({'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -({')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parenhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_parentild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '(~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -(~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espea():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espeb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esped():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espef():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espeh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espej():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espel():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espen():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espep():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esper():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espet():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espev():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espex():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espez():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espeA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espeB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espeD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espeF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espeH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espeJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espeL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espeN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espeP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espeR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espeT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espeV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espeX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espeZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espe0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espe2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espe4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espe6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espe8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espeexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espedquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espedoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espeand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espequote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_astpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -ast(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espeast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '**'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -**')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espevir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espepp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espetp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espeless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espemore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espearo():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_especroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espebsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_especirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espeesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_especr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espehl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_espetild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '*~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -*~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vira():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vird():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vir0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vir2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vir4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vir6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vir8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -vir(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_viraro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vircroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vircirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_viresp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vircr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_virtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ',~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -,~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poina():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poind():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_point():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poin0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poin2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poin4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poin6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poin8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poindquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '."'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -."')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poindoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pppar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -pp(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '..'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -..')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pointp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poincroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poincirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poincr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_poinhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_pointild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '.~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -.~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoina():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoind():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoint():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoin0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoin2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoin4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoin6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoin8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoindquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoindoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tppar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tp(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpointp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '::'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -::')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoincroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoincirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoincr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpoinhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_doubpointild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = ':~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -:~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lesst():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_less0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_less2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_less4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_less6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_less8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_morepar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -less(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lesspp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lesstp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lesscroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lesscirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lessesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lesscr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lesshl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lesstild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '<~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -<~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_morea():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moreb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_mored():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moref():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moreh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_morej():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_morel():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moren():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_morep():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_morer():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moret():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_morev():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_morex():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_morez():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moreA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moreB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moreD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moreF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moreH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moreJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moreL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moreN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moreP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moreR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moreT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moreV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moreX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moreZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_more0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_more2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_more4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_more6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_more8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moreexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moredquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moredoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moreand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_morequote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_lesspar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -more(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moreast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_morevir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_morepp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moretp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moreless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '><'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -><')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moremore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_morearo():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_morecroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_morebsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_morecirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moreesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_morecr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_morehl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_moretild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '>~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' ->~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobash():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobas0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobas2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobas4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobas6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobas8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_aropar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -aro(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobaspp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobastp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobascroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobascirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobasesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobascr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobashl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_arobastild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '@~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -@~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crocha():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crocht():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_croch0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_croch2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_croch4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_croch6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_croch8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '["'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -["')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crocpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -croc(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crocharo():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '[~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -[~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bst():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\\x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\\N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bs0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bs2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bs4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bs6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bs8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\\\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bslpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -bsl(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bspp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bstp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bscroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\\\'+x 
        fkey = x.encode('utf-8')
        #print(fkey, ' -\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bscirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\\^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bsesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bscr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bshl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_bstild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '\\~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -\~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cira():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cird():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cir0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cir2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cir4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cir6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cir8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_circpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -circ(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ciraro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_circroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_circirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_ciresp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_circr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_cirtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '^~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -^~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esua():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esub():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esud():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esul():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esun():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esup():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esur():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esut():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esux():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esu0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esu2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esu4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esu6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esu8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esudquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esudoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esppar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -esp(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esupp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esutp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esumore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esucroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esubsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esucirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '``'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -``')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esucr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esuhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_esutild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '`~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -`~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crocha():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochd():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochn():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crocht():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_croch0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_croch2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_croch4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_croch6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_croch8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochdquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochdoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -cr(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochtp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crocharo():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{'+'{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_crochtild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '{~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -{~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vsla():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vsld():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vsll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vsln():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vsl0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vsl2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vsl4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vsl6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vsl8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vsldquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vsldoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vsland():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_hlpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -hl(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vsltp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vslhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '||'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -||')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_vsltild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '|~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -|~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tila():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~a'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilb():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~b'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~d'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilf():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~f'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilh():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~h'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~j'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_till():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~l'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tiln():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~n'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~p'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~r'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilt():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~t'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilv():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~v'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilx():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~x'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilz():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~A'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~B'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~D'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~F'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~H'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~J'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~L'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~N'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~P'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~R'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~T'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~V'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~X'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~Z'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_til0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~0'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_til2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~2'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_til4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~4'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_til6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~6'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_til8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~8'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~!'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tildquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~"'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tildoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~$'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tiland():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~&'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilpar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~('+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -tild(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~*'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilvir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~,'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilpp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~.'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tiltp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~:'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~<'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilmore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~>'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~@'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilcroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~['+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilbsl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~\''+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilcirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~^'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~`'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilcr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~{'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tilhl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~|'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


def decrypt_tiltild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\\^`{|~', repeat=6)):
        x = '~~'+x
        fkey = x.encode('utf-8')
        #print(fkey, ' -~~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key:: ", fkey)
            print("Decrypted text:",ptx)
            exit()
        i += 1


Thread1 = threading.Thread(target=decrypt_aa)
Thread2 = threading.Thread(target=decrypt_ab)
Thread3 = threading.Thread(target=decrypt_ad)
Thread4 = threading.Thread(target=decrypt_af)
Thread5 = threading.Thread(target=decrypt_ah)
Thread6 = threading.Thread(target=decrypt_aj)
Thread7 = threading.Thread(target=decrypt_al)
Thread8 = threading.Thread(target=decrypt_an)
Thread9 = threading.Thread(target=decrypt_ap)
Thread10 = threading.Thread(target=decrypt_ar)
Thread11 = threading.Thread(target=decrypt_at)
Thread12 = threading.Thread(target=decrypt_av)
Thread13 = threading.Thread(target=decrypt_ax)
Thread14 = threading.Thread(target=decrypt_az)
Thread15 = threading.Thread(target=decrypt_aA)
Thread16 = threading.Thread(target=decrypt_aB)
Thread17 = threading.Thread(target=decrypt_aD)
Thread18 = threading.Thread(target=decrypt_aF)
Thread19 = threading.Thread(target=decrypt_aH)
Thread20 = threading.Thread(target=decrypt_aJ)
Thread21 = threading.Thread(target=decrypt_aL)
Thread22 = threading.Thread(target=decrypt_aN)
Thread23 = threading.Thread(target=decrypt_aP)
Thread24 = threading.Thread(target=decrypt_aR)
Thread25 = threading.Thread(target=decrypt_aT)
Thread26 = threading.Thread(target=decrypt_aV)
Thread27 = threading.Thread(target=decrypt_aX)
Thread28 = threading.Thread(target=decrypt_aZ)
Thread29 = threading.Thread(target=decrypt_a0)
Thread30 = threading.Thread(target=decrypt_a2)
Thread31 = threading.Thread(target=decrypt_a4)
Thread32 = threading.Thread(target=decrypt_a6)
Thread33 = threading.Thread(target=decrypt_a8)
Thread34 = threading.Thread(target=decrypt_aexcl)
Thread35 = threading.Thread(target=decrypt_adquote)
Thread36 = threading.Thread(target=decrypt_adoll)
Thread37 = threading.Thread(target=decrypt_aand)
Thread38 = threading.Thread(target=decrypt_aquote)
Thread39 = threading.Thread(target=decrypt_apar)
Thread40 = threading.Thread(target=decrypt_aast)
Thread41 = threading.Thread(target=decrypt_avir)
Thread42 = threading.Thread(target=decrypt_app)
Thread43 = threading.Thread(target=decrypt_atp)
Thread44 = threading.Thread(target=decrypt_aless)
Thread45 = threading.Thread(target=decrypt_amore)
Thread46 = threading.Thread(target=decrypt_aaro)
Thread47 = threading.Thread(target=decrypt_acroc)
Thread48 = threading.Thread(target=decrypt_absl)
Thread49 = threading.Thread(target=decrypt_acirc)
Thread50 = threading.Thread(target=decrypt_aesp)
Thread51 = threading.Thread(target=decrypt_acr)
Thread52 = threading.Thread(target=decrypt_ahl)
Thread53 = threading.Thread(target=decrypt_atild)
Thread54 = threading.Thread(target=decrypt_ba)
Thread55 = threading.Thread(target=decrypt_bb)
Thread56 = threading.Thread(target=decrypt_bd)
Thread57 = threading.Thread(target=decrypt_bf)
Thread58 = threading.Thread(target=decrypt_bh)
Thread59 = threading.Thread(target=decrypt_bj)
Thread60 = threading.Thread(target=decrypt_bl)
Thread61 = threading.Thread(target=decrypt_bn)
Thread62 = threading.Thread(target=decrypt_bp)
Thread63 = threading.Thread(target=decrypt_br)
Thread64 = threading.Thread(target=decrypt_bt)
Thread65 = threading.Thread(target=decrypt_bv)
Thread66 = threading.Thread(target=decrypt_bx)
Thread67 = threading.Thread(target=decrypt_bz)
Thread68 = threading.Thread(target=decrypt_bA)
Thread69 = threading.Thread(target=decrypt_bB)
Thread70 = threading.Thread(target=decrypt_bD)
Thread71 = threading.Thread(target=decrypt_bF)
Thread72 = threading.Thread(target=decrypt_bH)
Thread73 = threading.Thread(target=decrypt_bJ)
Thread74 = threading.Thread(target=decrypt_bL)
Thread75 = threading.Thread(target=decrypt_bN)
Thread76 = threading.Thread(target=decrypt_bP)
Thread77 = threading.Thread(target=decrypt_bR)
Thread78 = threading.Thread(target=decrypt_bT)
Thread79 = threading.Thread(target=decrypt_bV)
Thread80 = threading.Thread(target=decrypt_bX)
Thread81 = threading.Thread(target=decrypt_bZ)
Thread82 = threading.Thread(target=decrypt_b0)
Thread83 = threading.Thread(target=decrypt_b2)
Thread84 = threading.Thread(target=decrypt_b4)
Thread85 = threading.Thread(target=decrypt_b6)
Thread86 = threading.Thread(target=decrypt_b8)
Thread87 = threading.Thread(target=decrypt_bexcl)
Thread88 = threading.Thread(target=decrypt_bdquote)
Thread89 = threading.Thread(target=decrypt_bdoll)
Thread90 = threading.Thread(target=decrypt_band)
Thread91 = threading.Thread(target=decrypt_bquote)
Thread92 = threading.Thread(target=decrypt_bpar)
Thread93 = threading.Thread(target=decrypt_bast)
Thread94 = threading.Thread(target=decrypt_bvir)
Thread95 = threading.Thread(target=decrypt_bpp)
Thread96 = threading.Thread(target=decrypt_btp)
Thread97 = threading.Thread(target=decrypt_bless)
Thread98 = threading.Thread(target=decrypt_bmore)
Thread99 = threading.Thread(target=decrypt_baro)
Thread100 = threading.Thread(target=decrypt_bcroc)
Thread101 = threading.Thread(target=decrypt_bbsl)
Thread102 = threading.Thread(target=decrypt_bcirc)
Thread103 = threading.Thread(target=decrypt_besp)
Thread104 = threading.Thread(target=decrypt_bcr)
Thread105 = threading.Thread(target=decrypt_bhl)
Thread106 = threading.Thread(target=decrypt_btild)
Thread107 = threading.Thread(target=decrypt_da)
Thread108 = threading.Thread(target=decrypt_db)
Thread109 = threading.Thread(target=decrypt_dd)
Thread110 = threading.Thread(target=decrypt_df)
Thread111 = threading.Thread(target=decrypt_dh)
Thread112 = threading.Thread(target=decrypt_dj)
Thread113 = threading.Thread(target=decrypt_dl)
Thread114 = threading.Thread(target=decrypt_dn)
Thread115 = threading.Thread(target=decrypt_dp)
Thread116 = threading.Thread(target=decrypt_dr)
Thread117 = threading.Thread(target=decrypt_dt)
Thread118 = threading.Thread(target=decrypt_dv)
Thread119 = threading.Thread(target=decrypt_dx)
Thread120 = threading.Thread(target=decrypt_dz)
Thread121 = threading.Thread(target=decrypt_dA)
Thread122 = threading.Thread(target=decrypt_dB)
Thread123 = threading.Thread(target=decrypt_dD)
Thread124 = threading.Thread(target=decrypt_dF)
Thread125 = threading.Thread(target=decrypt_dH)
Thread126 = threading.Thread(target=decrypt_dJ)
Thread127 = threading.Thread(target=decrypt_dL)
Thread128 = threading.Thread(target=decrypt_dN)
Thread129 = threading.Thread(target=decrypt_dP)
Thread130 = threading.Thread(target=decrypt_dR)
Thread131 = threading.Thread(target=decrypt_dT)
Thread132 = threading.Thread(target=decrypt_dV)
Thread133 = threading.Thread(target=decrypt_dX)
Thread134 = threading.Thread(target=decrypt_dZ)
Thread135 = threading.Thread(target=decrypt_d0)
Thread136 = threading.Thread(target=decrypt_d2)
Thread137 = threading.Thread(target=decrypt_d4)
Thread138 = threading.Thread(target=decrypt_d6)
Thread139 = threading.Thread(target=decrypt_d8)
Thread140 = threading.Thread(target=decrypt_dexcl)
Thread141 = threading.Thread(target=decrypt_ddquote)
Thread142 = threading.Thread(target=decrypt_ddoll)
Thread143 = threading.Thread(target=decrypt_dand)
Thread144 = threading.Thread(target=decrypt_dquote)
Thread145 = threading.Thread(target=decrypt_dpar)
Thread146 = threading.Thread(target=decrypt_dast)
Thread147 = threading.Thread(target=decrypt_dvir)
Thread148 = threading.Thread(target=decrypt_dpp)
Thread149 = threading.Thread(target=decrypt_dtp)
Thread150 = threading.Thread(target=decrypt_dless)
Thread151 = threading.Thread(target=decrypt_dmore)
Thread152 = threading.Thread(target=decrypt_daro)
Thread153 = threading.Thread(target=decrypt_dcroc)
Thread154 = threading.Thread(target=decrypt_dbsl)
Thread155 = threading.Thread(target=decrypt_dcirc)
Thread156 = threading.Thread(target=decrypt_desp)
Thread157 = threading.Thread(target=decrypt_dcr)
Thread158 = threading.Thread(target=decrypt_dhl)
Thread159 = threading.Thread(target=decrypt_dtild)
Thread160 = threading.Thread(target=decrypt_fa)
Thread161 = threading.Thread(target=decrypt_fb)
Thread162 = threading.Thread(target=decrypt_fd)
Thread163 = threading.Thread(target=decrypt_ff)
Thread164 = threading.Thread(target=decrypt_fh)
Thread165 = threading.Thread(target=decrypt_fj)
Thread166 = threading.Thread(target=decrypt_fl)
Thread167 = threading.Thread(target=decrypt_fn)
Thread168 = threading.Thread(target=decrypt_fp)
Thread169 = threading.Thread(target=decrypt_fr)
Thread170 = threading.Thread(target=decrypt_ft)
Thread171 = threading.Thread(target=decrypt_fv)
Thread172 = threading.Thread(target=decrypt_fx)
Thread173 = threading.Thread(target=decrypt_fz)
Thread174 = threading.Thread(target=decrypt_fA)
Thread175 = threading.Thread(target=decrypt_fB)
Thread176 = threading.Thread(target=decrypt_fD)
Thread177 = threading.Thread(target=decrypt_fF)
Thread178 = threading.Thread(target=decrypt_fH)
Thread179 = threading.Thread(target=decrypt_fJ)
Thread180 = threading.Thread(target=decrypt_fL)
Thread181 = threading.Thread(target=decrypt_fN)
Thread182 = threading.Thread(target=decrypt_fP)
Thread183 = threading.Thread(target=decrypt_fR)
Thread184 = threading.Thread(target=decrypt_fT)
Thread185 = threading.Thread(target=decrypt_fV)
Thread186 = threading.Thread(target=decrypt_fX)
Thread187 = threading.Thread(target=decrypt_fZ)
Thread188 = threading.Thread(target=decrypt_f0)
Thread189 = threading.Thread(target=decrypt_f2)
Thread190 = threading.Thread(target=decrypt_f4)
Thread191 = threading.Thread(target=decrypt_f6)
Thread192 = threading.Thread(target=decrypt_f8)
Thread193 = threading.Thread(target=decrypt_fexcl)
Thread194 = threading.Thread(target=decrypt_fdquote)
Thread195 = threading.Thread(target=decrypt_fdoll)
Thread196 = threading.Thread(target=decrypt_fand)
Thread197 = threading.Thread(target=decrypt_fquote)
Thread198 = threading.Thread(target=decrypt_fpar)
Thread199 = threading.Thread(target=decrypt_fast)
Thread200 = threading.Thread(target=decrypt_fvir)
Thread201 = threading.Thread(target=decrypt_fpp)
Thread202 = threading.Thread(target=decrypt_ftp)
Thread203 = threading.Thread(target=decrypt_fless)
Thread204 = threading.Thread(target=decrypt_fmore)
Thread205 = threading.Thread(target=decrypt_faro)
Thread206 = threading.Thread(target=decrypt_fcroc)
Thread207 = threading.Thread(target=decrypt_fbsl)
Thread208 = threading.Thread(target=decrypt_fcirc)
Thread209 = threading.Thread(target=decrypt_fesp)
Thread210 = threading.Thread(target=decrypt_fcr)
Thread211 = threading.Thread(target=decrypt_fhl)
Thread212 = threading.Thread(target=decrypt_ftild)
Thread213 = threading.Thread(target=decrypt_ha)
Thread214 = threading.Thread(target=decrypt_hb)
Thread215 = threading.Thread(target=decrypt_hd)
Thread216 = threading.Thread(target=decrypt_hf)
Thread217 = threading.Thread(target=decrypt_hh)
Thread218 = threading.Thread(target=decrypt_hj)
Thread219 = threading.Thread(target=decrypt_hl)
Thread220 = threading.Thread(target=decrypt_hn)
Thread221 = threading.Thread(target=decrypt_hp)
Thread222 = threading.Thread(target=decrypt_hr)
Thread223 = threading.Thread(target=decrypt_ht)
Thread224 = threading.Thread(target=decrypt_hv)
Thread225 = threading.Thread(target=decrypt_hx)
Thread226 = threading.Thread(target=decrypt_hz)
Thread227 = threading.Thread(target=decrypt_hA)
Thread228 = threading.Thread(target=decrypt_hB)
Thread229 = threading.Thread(target=decrypt_hD)
Thread230 = threading.Thread(target=decrypt_hF)
Thread231 = threading.Thread(target=decrypt_hH)
Thread232 = threading.Thread(target=decrypt_hJ)
Thread233 = threading.Thread(target=decrypt_hL)
Thread234 = threading.Thread(target=decrypt_hN)
Thread235 = threading.Thread(target=decrypt_hP)
Thread236 = threading.Thread(target=decrypt_hR)
Thread237 = threading.Thread(target=decrypt_hT)
Thread238 = threading.Thread(target=decrypt_hV)
Thread239 = threading.Thread(target=decrypt_hX)
Thread240 = threading.Thread(target=decrypt_hZ)
Thread241 = threading.Thread(target=decrypt_h0)
Thread242 = threading.Thread(target=decrypt_h2)
Thread243 = threading.Thread(target=decrypt_h4)
Thread244 = threading.Thread(target=decrypt_h6)
Thread245 = threading.Thread(target=decrypt_h8)
Thread246 = threading.Thread(target=decrypt_hexcl)
Thread247 = threading.Thread(target=decrypt_hdquote)
Thread248 = threading.Thread(target=decrypt_hdoll)
Thread249 = threading.Thread(target=decrypt_hand)
Thread250 = threading.Thread(target=decrypt_hquote)
Thread251 = threading.Thread(target=decrypt_hpar)
Thread252 = threading.Thread(target=decrypt_hast)
Thread253 = threading.Thread(target=decrypt_hvir)
Thread254 = threading.Thread(target=decrypt_hpp)
Thread255 = threading.Thread(target=decrypt_htp)
Thread256 = threading.Thread(target=decrypt_hless)
Thread257 = threading.Thread(target=decrypt_hmore)
Thread258 = threading.Thread(target=decrypt_haro)
Thread259 = threading.Thread(target=decrypt_hcroc)
Thread260 = threading.Thread(target=decrypt_hbsl)
Thread261 = threading.Thread(target=decrypt_hcirc)
Thread262 = threading.Thread(target=decrypt_hesp)
Thread263 = threading.Thread(target=decrypt_hcr)
Thread264 = threading.Thread(target=decrypt_hhl)
Thread265 = threading.Thread(target=decrypt_htild)
Thread266 = threading.Thread(target=decrypt_ja)
Thread267 = threading.Thread(target=decrypt_jb)
Thread268 = threading.Thread(target=decrypt_jd)
Thread269 = threading.Thread(target=decrypt_jf)
Thread270 = threading.Thread(target=decrypt_jh)
Thread271 = threading.Thread(target=decrypt_jj)
Thread272 = threading.Thread(target=decrypt_jl)
Thread273 = threading.Thread(target=decrypt_jn)
Thread274 = threading.Thread(target=decrypt_jp)
Thread275 = threading.Thread(target=decrypt_jr)
Thread276 = threading.Thread(target=decrypt_jt)
Thread277 = threading.Thread(target=decrypt_jv)
Thread278 = threading.Thread(target=decrypt_jx)
Thread279 = threading.Thread(target=decrypt_jz)
Thread280 = threading.Thread(target=decrypt_jA)
Thread281 = threading.Thread(target=decrypt_jB)
Thread282 = threading.Thread(target=decrypt_jD)
Thread283 = threading.Thread(target=decrypt_jF)
Thread284 = threading.Thread(target=decrypt_jH)
Thread285 = threading.Thread(target=decrypt_jJ)
Thread286 = threading.Thread(target=decrypt_jL)
Thread287 = threading.Thread(target=decrypt_jN)
Thread288 = threading.Thread(target=decrypt_jP)
Thread289 = threading.Thread(target=decrypt_jR)
Thread290 = threading.Thread(target=decrypt_jT)
Thread291 = threading.Thread(target=decrypt_jV)
Thread292 = threading.Thread(target=decrypt_jX)
Thread293 = threading.Thread(target=decrypt_jZ)
Thread294 = threading.Thread(target=decrypt_j0)
Thread295 = threading.Thread(target=decrypt_j2)
Thread296 = threading.Thread(target=decrypt_j4)
Thread297 = threading.Thread(target=decrypt_j6)
Thread298 = threading.Thread(target=decrypt_j8)
Thread299 = threading.Thread(target=decrypt_jexcl)
Thread300 = threading.Thread(target=decrypt_jdquote)
Thread301 = threading.Thread(target=decrypt_jdoll)
Thread302 = threading.Thread(target=decrypt_jand)
Thread303 = threading.Thread(target=decrypt_jquote)
Thread304 = threading.Thread(target=decrypt_jpar)
Thread305 = threading.Thread(target=decrypt_jast)
Thread306 = threading.Thread(target=decrypt_jvir)
Thread307 = threading.Thread(target=decrypt_jpp)
Thread308 = threading.Thread(target=decrypt_jtp)
Thread309 = threading.Thread(target=decrypt_jless)
Thread310 = threading.Thread(target=decrypt_jmore)
Thread311 = threading.Thread(target=decrypt_jaro)
Thread312 = threading.Thread(target=decrypt_jcroc)
Thread313 = threading.Thread(target=decrypt_jbsl)
Thread314 = threading.Thread(target=decrypt_jcirc)
Thread315 = threading.Thread(target=decrypt_jesp)
Thread316 = threading.Thread(target=decrypt_jcr)
Thread317 = threading.Thread(target=decrypt_jhl)
Thread318 = threading.Thread(target=decrypt_jtild)
Thread319 = threading.Thread(target=decrypt_la)
Thread320 = threading.Thread(target=decrypt_lb)
Thread321 = threading.Thread(target=decrypt_ld)
Thread322 = threading.Thread(target=decrypt_lf)
Thread323 = threading.Thread(target=decrypt_lh)
Thread324 = threading.Thread(target=decrypt_lj)
Thread325 = threading.Thread(target=decrypt_ll)
Thread326 = threading.Thread(target=decrypt_ln)
Thread327 = threading.Thread(target=decrypt_lp)
Thread328 = threading.Thread(target=decrypt_lr)
Thread329 = threading.Thread(target=decrypt_lt)
Thread330 = threading.Thread(target=decrypt_lv)
Thread331 = threading.Thread(target=decrypt_lx)
Thread332 = threading.Thread(target=decrypt_lz)
Thread333 = threading.Thread(target=decrypt_lA)
Thread334 = threading.Thread(target=decrypt_lB)
Thread335 = threading.Thread(target=decrypt_lD)
Thread336 = threading.Thread(target=decrypt_lF)
Thread337 = threading.Thread(target=decrypt_lH)
Thread338 = threading.Thread(target=decrypt_lJ)
Thread339 = threading.Thread(target=decrypt_lL)
Thread340 = threading.Thread(target=decrypt_lN)
Thread341 = threading.Thread(target=decrypt_lP)
Thread342 = threading.Thread(target=decrypt_lR)
Thread343 = threading.Thread(target=decrypt_lT)
Thread344 = threading.Thread(target=decrypt_lV)
Thread345 = threading.Thread(target=decrypt_lX)
Thread346 = threading.Thread(target=decrypt_lZ)
Thread347 = threading.Thread(target=decrypt_l0)
Thread348 = threading.Thread(target=decrypt_l2)
Thread349 = threading.Thread(target=decrypt_l4)
Thread350 = threading.Thread(target=decrypt_l6)
Thread351 = threading.Thread(target=decrypt_l8)
Thread352 = threading.Thread(target=decrypt_lexcl)
Thread353 = threading.Thread(target=decrypt_ldquote)
Thread354 = threading.Thread(target=decrypt_ldoll)
Thread355 = threading.Thread(target=decrypt_land)
Thread356 = threading.Thread(target=decrypt_lquote)
Thread357 = threading.Thread(target=decrypt_lpar)
Thread358 = threading.Thread(target=decrypt_last)
Thread359 = threading.Thread(target=decrypt_lvir)
Thread360 = threading.Thread(target=decrypt_lpp)
Thread361 = threading.Thread(target=decrypt_ltp)
Thread362 = threading.Thread(target=decrypt_lless)
Thread363 = threading.Thread(target=decrypt_lmore)
Thread364 = threading.Thread(target=decrypt_laro)
Thread365 = threading.Thread(target=decrypt_lcroc)
Thread366 = threading.Thread(target=decrypt_lbsl)
Thread367 = threading.Thread(target=decrypt_lcirc)
Thread368 = threading.Thread(target=decrypt_lesp)
Thread369 = threading.Thread(target=decrypt_lcr)
Thread370 = threading.Thread(target=decrypt_lhl)
Thread371 = threading.Thread(target=decrypt_ltild)
Thread372 = threading.Thread(target=decrypt_na)
Thread373 = threading.Thread(target=decrypt_nb)
Thread374 = threading.Thread(target=decrypt_nd)
Thread375 = threading.Thread(target=decrypt_nf)
Thread376 = threading.Thread(target=decrypt_nh)
Thread377 = threading.Thread(target=decrypt_nj)
Thread378 = threading.Thread(target=decrypt_nl)
Thread379 = threading.Thread(target=decrypt_nn)
Thread380 = threading.Thread(target=decrypt_np)
Thread381 = threading.Thread(target=decrypt_nr)
Thread382 = threading.Thread(target=decrypt_nt)
Thread383 = threading.Thread(target=decrypt_nv)
Thread384 = threading.Thread(target=decrypt_nx)
Thread385 = threading.Thread(target=decrypt_nz)
Thread386 = threading.Thread(target=decrypt_nA)
Thread387 = threading.Thread(target=decrypt_nB)
Thread388 = threading.Thread(target=decrypt_nD)
Thread389 = threading.Thread(target=decrypt_nF)
Thread390 = threading.Thread(target=decrypt_nH)
Thread391 = threading.Thread(target=decrypt_nJ)
Thread392 = threading.Thread(target=decrypt_nL)
Thread393 = threading.Thread(target=decrypt_nN)
Thread394 = threading.Thread(target=decrypt_nP)
Thread395 = threading.Thread(target=decrypt_nR)
Thread396 = threading.Thread(target=decrypt_nT)
Thread397 = threading.Thread(target=decrypt_nV)
Thread398 = threading.Thread(target=decrypt_nX)
Thread399 = threading.Thread(target=decrypt_nZ)
Thread400 = threading.Thread(target=decrypt_n0)
Thread401 = threading.Thread(target=decrypt_n2)
Thread402 = threading.Thread(target=decrypt_n4)
Thread403 = threading.Thread(target=decrypt_n6)
Thread404 = threading.Thread(target=decrypt_n8)
Thread405 = threading.Thread(target=decrypt_nexcl)
Thread406 = threading.Thread(target=decrypt_ndquote)
Thread407 = threading.Thread(target=decrypt_ndoll)
Thread408 = threading.Thread(target=decrypt_nand)
Thread409 = threading.Thread(target=decrypt_nquote)
Thread410 = threading.Thread(target=decrypt_npar)
Thread411 = threading.Thread(target=decrypt_nast)
Thread412 = threading.Thread(target=decrypt_nvir)
Thread413 = threading.Thread(target=decrypt_npp)
Thread414 = threading.Thread(target=decrypt_ntp)
Thread415 = threading.Thread(target=decrypt_nless)
Thread416 = threading.Thread(target=decrypt_nmore)
Thread417 = threading.Thread(target=decrypt_naro)
Thread418 = threading.Thread(target=decrypt_ncroc)
Thread419 = threading.Thread(target=decrypt_nbsl)
Thread420 = threading.Thread(target=decrypt_ncirc)
Thread421 = threading.Thread(target=decrypt_nesp)
Thread422 = threading.Thread(target=decrypt_ncr)
Thread423 = threading.Thread(target=decrypt_nhl)
Thread424 = threading.Thread(target=decrypt_ntild)
Thread425 = threading.Thread(target=decrypt_pa)
Thread426 = threading.Thread(target=decrypt_pb)
Thread427 = threading.Thread(target=decrypt_pd)
Thread428 = threading.Thread(target=decrypt_pf)
Thread429 = threading.Thread(target=decrypt_ph)
Thread430 = threading.Thread(target=decrypt_pj)
Thread431 = threading.Thread(target=decrypt_pl)
Thread432 = threading.Thread(target=decrypt_pn)
Thread433 = threading.Thread(target=decrypt_pp)
Thread434 = threading.Thread(target=decrypt_pr)
Thread435 = threading.Thread(target=decrypt_pt)
Thread436 = threading.Thread(target=decrypt_pv)
Thread437 = threading.Thread(target=decrypt_px)
Thread438 = threading.Thread(target=decrypt_pz)
Thread439 = threading.Thread(target=decrypt_pA)
Thread440 = threading.Thread(target=decrypt_pB)
Thread441 = threading.Thread(target=decrypt_pD)
Thread442 = threading.Thread(target=decrypt_pF)
Thread443 = threading.Thread(target=decrypt_pH)
Thread444 = threading.Thread(target=decrypt_pJ)
Thread445 = threading.Thread(target=decrypt_pL)
Thread446 = threading.Thread(target=decrypt_pN)
Thread447 = threading.Thread(target=decrypt_pP)
Thread448 = threading.Thread(target=decrypt_pR)
Thread449 = threading.Thread(target=decrypt_pT)
Thread450 = threading.Thread(target=decrypt_pV)
Thread451 = threading.Thread(target=decrypt_pX)
Thread452 = threading.Thread(target=decrypt_pZ)
Thread453 = threading.Thread(target=decrypt_p0)
Thread454 = threading.Thread(target=decrypt_p2)
Thread455 = threading.Thread(target=decrypt_p4)
Thread456 = threading.Thread(target=decrypt_p6)
Thread457 = threading.Thread(target=decrypt_p8)
Thread458 = threading.Thread(target=decrypt_pexcl)
Thread459 = threading.Thread(target=decrypt_pdquote)
Thread460 = threading.Thread(target=decrypt_pdoll)
Thread461 = threading.Thread(target=decrypt_pand)
Thread462 = threading.Thread(target=decrypt_pquote)
Thread463 = threading.Thread(target=decrypt_ppar)
Thread464 = threading.Thread(target=decrypt_past)
Thread465 = threading.Thread(target=decrypt_pvir)
Thread466 = threading.Thread(target=decrypt_ppp)
Thread467 = threading.Thread(target=decrypt_ptp)
Thread468 = threading.Thread(target=decrypt_pless)
Thread469 = threading.Thread(target=decrypt_pmore)
Thread470 = threading.Thread(target=decrypt_paro)
Thread471 = threading.Thread(target=decrypt_pcroc)
Thread472 = threading.Thread(target=decrypt_pbsl)
Thread473 = threading.Thread(target=decrypt_pcirc)
Thread474 = threading.Thread(target=decrypt_pesp)
Thread475 = threading.Thread(target=decrypt_pcr)
Thread476 = threading.Thread(target=decrypt_phl)
Thread477 = threading.Thread(target=decrypt_ptild)
Thread478 = threading.Thread(target=decrypt_ra)
Thread479 = threading.Thread(target=decrypt_rb)
Thread480 = threading.Thread(target=decrypt_rd)
Thread481 = threading.Thread(target=decrypt_rf)
Thread482 = threading.Thread(target=decrypt_rh)
Thread483 = threading.Thread(target=decrypt_rj)
Thread484 = threading.Thread(target=decrypt_rl)
Thread485 = threading.Thread(target=decrypt_rn)
Thread486 = threading.Thread(target=decrypt_rp)
Thread487 = threading.Thread(target=decrypt_rr)
Thread488 = threading.Thread(target=decrypt_rt)
Thread489 = threading.Thread(target=decrypt_rv)
Thread490 = threading.Thread(target=decrypt_rx)
Thread491 = threading.Thread(target=decrypt_rz)
Thread492 = threading.Thread(target=decrypt_rA)
Thread493 = threading.Thread(target=decrypt_rB)
Thread494 = threading.Thread(target=decrypt_rD)
Thread495 = threading.Thread(target=decrypt_rF)
Thread496 = threading.Thread(target=decrypt_rH)
Thread497 = threading.Thread(target=decrypt_rJ)
Thread498 = threading.Thread(target=decrypt_rL)
Thread499 = threading.Thread(target=decrypt_rN)
Thread500 = threading.Thread(target=decrypt_rP)
Thread501 = threading.Thread(target=decrypt_rR)
Thread502 = threading.Thread(target=decrypt_rT)
Thread503 = threading.Thread(target=decrypt_rV)
Thread504 = threading.Thread(target=decrypt_rX)
Thread505 = threading.Thread(target=decrypt_rZ)
Thread506 = threading.Thread(target=decrypt_r0)
Thread507 = threading.Thread(target=decrypt_r2)
Thread508 = threading.Thread(target=decrypt_r4)
Thread509 = threading.Thread(target=decrypt_r6)
Thread510 = threading.Thread(target=decrypt_r8)
Thread511 = threading.Thread(target=decrypt_rexcl)
Thread512 = threading.Thread(target=decrypt_rdquote)
Thread513 = threading.Thread(target=decrypt_rdoll)
Thread514 = threading.Thread(target=decrypt_rand)
Thread515 = threading.Thread(target=decrypt_rquote)
Thread516 = threading.Thread(target=decrypt_rpar)
Thread517 = threading.Thread(target=decrypt_rast)
Thread518 = threading.Thread(target=decrypt_rvir)
Thread519 = threading.Thread(target=decrypt_rpp)
Thread520 = threading.Thread(target=decrypt_rtp)
Thread521 = threading.Thread(target=decrypt_rless)
Thread522 = threading.Thread(target=decrypt_rmore)
Thread523 = threading.Thread(target=decrypt_raro)
Thread524 = threading.Thread(target=decrypt_rcroc)
Thread525 = threading.Thread(target=decrypt_rbsl)
Thread526 = threading.Thread(target=decrypt_rcirc)
Thread527 = threading.Thread(target=decrypt_resp)
Thread528 = threading.Thread(target=decrypt_rcr)
Thread529 = threading.Thread(target=decrypt_rhl)
Thread530 = threading.Thread(target=decrypt_rtild)
Thread531 = threading.Thread(target=decrypt_ta)
Thread532 = threading.Thread(target=decrypt_tb)
Thread533 = threading.Thread(target=decrypt_td)
Thread534 = threading.Thread(target=decrypt_tf)
Thread535 = threading.Thread(target=decrypt_th)
Thread536 = threading.Thread(target=decrypt_tj)
Thread537 = threading.Thread(target=decrypt_tl)
Thread538 = threading.Thread(target=decrypt_tn)
Thread539 = threading.Thread(target=decrypt_tp)
Thread540 = threading.Thread(target=decrypt_tr)
Thread541 = threading.Thread(target=decrypt_tt)
Thread542 = threading.Thread(target=decrypt_tv)
Thread543 = threading.Thread(target=decrypt_tx)
Thread544 = threading.Thread(target=decrypt_tz)
Thread545 = threading.Thread(target=decrypt_tA)
Thread546 = threading.Thread(target=decrypt_tB)
Thread547 = threading.Thread(target=decrypt_tD)
Thread548 = threading.Thread(target=decrypt_tF)
Thread549 = threading.Thread(target=decrypt_tH)
Thread550 = threading.Thread(target=decrypt_tJ)
Thread551 = threading.Thread(target=decrypt_tL)
Thread552 = threading.Thread(target=decrypt_tN)
Thread553 = threading.Thread(target=decrypt_tP)
Thread554 = threading.Thread(target=decrypt_tR)
Thread555 = threading.Thread(target=decrypt_tT)
Thread556 = threading.Thread(target=decrypt_tV)
Thread557 = threading.Thread(target=decrypt_tX)
Thread558 = threading.Thread(target=decrypt_tZ)
Thread559 = threading.Thread(target=decrypt_t0)
Thread560 = threading.Thread(target=decrypt_t2)
Thread561 = threading.Thread(target=decrypt_t4)
Thread562 = threading.Thread(target=decrypt_t6)
Thread563 = threading.Thread(target=decrypt_t8)
Thread564 = threading.Thread(target=decrypt_texcl)
Thread565 = threading.Thread(target=decrypt_tdquote)
Thread566 = threading.Thread(target=decrypt_tdoll)
Thread567 = threading.Thread(target=decrypt_tand)
Thread568 = threading.Thread(target=decrypt_tquote)
Thread569 = threading.Thread(target=decrypt_tpar)
Thread570 = threading.Thread(target=decrypt_tast)
Thread571 = threading.Thread(target=decrypt_tvir)
Thread572 = threading.Thread(target=decrypt_tpp)
Thread573 = threading.Thread(target=decrypt_ttp)
Thread574 = threading.Thread(target=decrypt_tless)
Thread575 = threading.Thread(target=decrypt_tmore)
Thread576 = threading.Thread(target=decrypt_taro)
Thread577 = threading.Thread(target=decrypt_tcroc)
Thread578 = threading.Thread(target=decrypt_tbsl)
Thread579 = threading.Thread(target=decrypt_tcirc)
Thread580 = threading.Thread(target=decrypt_tesp)
Thread581 = threading.Thread(target=decrypt_tcr)
Thread582 = threading.Thread(target=decrypt_thl)
Thread583 = threading.Thread(target=decrypt_ttild)
Thread584 = threading.Thread(target=decrypt_va)
Thread585 = threading.Thread(target=decrypt_vb)
Thread586 = threading.Thread(target=decrypt_vd)
Thread587 = threading.Thread(target=decrypt_vf)
Thread588 = threading.Thread(target=decrypt_vh)
Thread589 = threading.Thread(target=decrypt_vj)
Thread590 = threading.Thread(target=decrypt_vl)
Thread591 = threading.Thread(target=decrypt_vn)
Thread592 = threading.Thread(target=decrypt_vp)
Thread593 = threading.Thread(target=decrypt_vr)
Thread594 = threading.Thread(target=decrypt_vt)
Thread595 = threading.Thread(target=decrypt_vv)
Thread596 = threading.Thread(target=decrypt_vx)
Thread597 = threading.Thread(target=decrypt_vz)
Thread598 = threading.Thread(target=decrypt_vA)
Thread599 = threading.Thread(target=decrypt_vB)
Thread600 = threading.Thread(target=decrypt_vD)
Thread601 = threading.Thread(target=decrypt_vF)
Thread602 = threading.Thread(target=decrypt_vH)
Thread603 = threading.Thread(target=decrypt_vJ)
Thread604 = threading.Thread(target=decrypt_vL)
Thread605 = threading.Thread(target=decrypt_vN)
Thread606 = threading.Thread(target=decrypt_vP)
Thread607 = threading.Thread(target=decrypt_vR)
Thread608 = threading.Thread(target=decrypt_vT)
Thread609 = threading.Thread(target=decrypt_vV)
Thread610 = threading.Thread(target=decrypt_vX)
Thread611 = threading.Thread(target=decrypt_vZ)
Thread612 = threading.Thread(target=decrypt_v0)
Thread613 = threading.Thread(target=decrypt_v2)
Thread614 = threading.Thread(target=decrypt_v4)
Thread615 = threading.Thread(target=decrypt_v6)
Thread616 = threading.Thread(target=decrypt_v8)
Thread617 = threading.Thread(target=decrypt_vexcl)
Thread618 = threading.Thread(target=decrypt_vdquote)
Thread619 = threading.Thread(target=decrypt_vdoll)
Thread620 = threading.Thread(target=decrypt_vand)
Thread621 = threading.Thread(target=decrypt_vquote)
Thread622 = threading.Thread(target=decrypt_vpar)
Thread623 = threading.Thread(target=decrypt_vast)
Thread624 = threading.Thread(target=decrypt_vvir)
Thread625 = threading.Thread(target=decrypt_vpp)
Thread626 = threading.Thread(target=decrypt_vtp)
Thread627 = threading.Thread(target=decrypt_vless)
Thread628 = threading.Thread(target=decrypt_vmore)
Thread629 = threading.Thread(target=decrypt_varo)
Thread630 = threading.Thread(target=decrypt_vcroc)
Thread631 = threading.Thread(target=decrypt_vbsl)
Thread632 = threading.Thread(target=decrypt_vcirc)
Thread633 = threading.Thread(target=decrypt_vesp)
Thread634 = threading.Thread(target=decrypt_vcr)
Thread635 = threading.Thread(target=decrypt_vhl)
Thread636 = threading.Thread(target=decrypt_vtild)
Thread637 = threading.Thread(target=decrypt_xa)
Thread638 = threading.Thread(target=decrypt_xb)
Thread639 = threading.Thread(target=decrypt_xd)
Thread640 = threading.Thread(target=decrypt_xf)
Thread641 = threading.Thread(target=decrypt_xh)
Thread642 = threading.Thread(target=decrypt_xj)
Thread643 = threading.Thread(target=decrypt_xl)
Thread644 = threading.Thread(target=decrypt_xn)
Thread645 = threading.Thread(target=decrypt_xp)
Thread646 = threading.Thread(target=decrypt_xr)
Thread647 = threading.Thread(target=decrypt_xt)
Thread648 = threading.Thread(target=decrypt_xv)
Thread649 = threading.Thread(target=decrypt_xx)
Thread650 = threading.Thread(target=decrypt_xz)
Thread651 = threading.Thread(target=decrypt_xA)
Thread652 = threading.Thread(target=decrypt_xB)
Thread653 = threading.Thread(target=decrypt_xD)
Thread654 = threading.Thread(target=decrypt_xF)
Thread655 = threading.Thread(target=decrypt_xH)
Thread656 = threading.Thread(target=decrypt_xJ)
Thread657 = threading.Thread(target=decrypt_xL)
Thread658 = threading.Thread(target=decrypt_xN)
Thread659 = threading.Thread(target=decrypt_xP)
Thread660 = threading.Thread(target=decrypt_xR)
Thread661 = threading.Thread(target=decrypt_xT)
Thread662 = threading.Thread(target=decrypt_xV)
Thread663 = threading.Thread(target=decrypt_xX)
Thread664 = threading.Thread(target=decrypt_xZ)
Thread665 = threading.Thread(target=decrypt_x0)
Thread666 = threading.Thread(target=decrypt_x2)
Thread667 = threading.Thread(target=decrypt_x4)
Thread668 = threading.Thread(target=decrypt_x6)
Thread669 = threading.Thread(target=decrypt_x8)
Thread670 = threading.Thread(target=decrypt_xexcl)
Thread671 = threading.Thread(target=decrypt_xdquote)
Thread672 = threading.Thread(target=decrypt_xdoll)
Thread673 = threading.Thread(target=decrypt_xand)
Thread674 = threading.Thread(target=decrypt_xquote)
Thread675 = threading.Thread(target=decrypt_xpar)
Thread676 = threading.Thread(target=decrypt_xast)
Thread677 = threading.Thread(target=decrypt_xvir)
Thread678 = threading.Thread(target=decrypt_xpp)
Thread679 = threading.Thread(target=decrypt_xtp)
Thread680 = threading.Thread(target=decrypt_xless)
Thread681 = threading.Thread(target=decrypt_xmore)
Thread682 = threading.Thread(target=decrypt_xaro)
Thread683 = threading.Thread(target=decrypt_xcroc)
Thread684 = threading.Thread(target=decrypt_xbsl)
Thread685 = threading.Thread(target=decrypt_xcirc)
Thread686 = threading.Thread(target=decrypt_xesp)
Thread687 = threading.Thread(target=decrypt_xcr)
Thread688 = threading.Thread(target=decrypt_xhl)
Thread689 = threading.Thread(target=decrypt_xtild)
Thread690 = threading.Thread(target=decrypt_za)
Thread691 = threading.Thread(target=decrypt_zb)
Thread692 = threading.Thread(target=decrypt_zd)
Thread693 = threading.Thread(target=decrypt_zf)
Thread694 = threading.Thread(target=decrypt_zh)
Thread695 = threading.Thread(target=decrypt_zj)
Thread696 = threading.Thread(target=decrypt_zl)
Thread697 = threading.Thread(target=decrypt_zn)
Thread698 = threading.Thread(target=decrypt_zp)
Thread699 = threading.Thread(target=decrypt_zr)
Thread700 = threading.Thread(target=decrypt_zt)
Thread701 = threading.Thread(target=decrypt_zv)
Thread702 = threading.Thread(target=decrypt_zx)
Thread703 = threading.Thread(target=decrypt_zz)
Thread704 = threading.Thread(target=decrypt_zA)
Thread705 = threading.Thread(target=decrypt_zB)
Thread706 = threading.Thread(target=decrypt_zD)
Thread707 = threading.Thread(target=decrypt_zF)
Thread708 = threading.Thread(target=decrypt_zH)
Thread709 = threading.Thread(target=decrypt_zJ)
Thread710 = threading.Thread(target=decrypt_zL)
Thread711 = threading.Thread(target=decrypt_zN)
Thread712 = threading.Thread(target=decrypt_zP)
Thread713 = threading.Thread(target=decrypt_zR)
Thread714 = threading.Thread(target=decrypt_zT)
Thread715 = threading.Thread(target=decrypt_zV)
Thread716 = threading.Thread(target=decrypt_zX)
Thread717 = threading.Thread(target=decrypt_zZ)
Thread718 = threading.Thread(target=decrypt_z0)
Thread719 = threading.Thread(target=decrypt_z2)
Thread720 = threading.Thread(target=decrypt_z4)
Thread721 = threading.Thread(target=decrypt_z6)
Thread722 = threading.Thread(target=decrypt_z8)
Thread723 = threading.Thread(target=decrypt_zexcl)
Thread724 = threading.Thread(target=decrypt_zdquote)
Thread725 = threading.Thread(target=decrypt_zdoll)
Thread726 = threading.Thread(target=decrypt_zand)
Thread727 = threading.Thread(target=decrypt_zquote)
Thread728 = threading.Thread(target=decrypt_zpar)
Thread729 = threading.Thread(target=decrypt_zast)
Thread730 = threading.Thread(target=decrypt_zvir)
Thread731 = threading.Thread(target=decrypt_zpp)
Thread732 = threading.Thread(target=decrypt_ztp)
Thread733 = threading.Thread(target=decrypt_zless)
Thread734 = threading.Thread(target=decrypt_zmore)
Thread735 = threading.Thread(target=decrypt_zaro)
Thread736 = threading.Thread(target=decrypt_zcroc)
Thread737 = threading.Thread(target=decrypt_zbsl)
Thread738 = threading.Thread(target=decrypt_zcirc)
Thread739 = threading.Thread(target=decrypt_zesp)
Thread740 = threading.Thread(target=decrypt_zcr)
Thread741 = threading.Thread(target=decrypt_zhl)
Thread742 = threading.Thread(target=decrypt_ztild)
Thread743 = threading.Thread(target=decrypt_Aa)
Thread744 = threading.Thread(target=decrypt_Ab)
Thread745 = threading.Thread(target=decrypt_Ad)
Thread746 = threading.Thread(target=decrypt_Af)
Thread747 = threading.Thread(target=decrypt_Ah)
Thread748 = threading.Thread(target=decrypt_Aj)
Thread749 = threading.Thread(target=decrypt_Al)
Thread750 = threading.Thread(target=decrypt_An)
Thread751 = threading.Thread(target=decrypt_Ap)
Thread752 = threading.Thread(target=decrypt_Ar)
Thread753 = threading.Thread(target=decrypt_At)
Thread754 = threading.Thread(target=decrypt_Av)
Thread755 = threading.Thread(target=decrypt_Ax)
Thread756 = threading.Thread(target=decrypt_Az)
Thread757 = threading.Thread(target=decrypt_AA)
Thread758 = threading.Thread(target=decrypt_AB)
Thread759 = threading.Thread(target=decrypt_AD)
Thread760 = threading.Thread(target=decrypt_AF)
Thread761 = threading.Thread(target=decrypt_AH)
Thread762 = threading.Thread(target=decrypt_AJ)
Thread763 = threading.Thread(target=decrypt_AL)
Thread764 = threading.Thread(target=decrypt_AN)
Thread765 = threading.Thread(target=decrypt_AP)
Thread766 = threading.Thread(target=decrypt_AR)
Thread767 = threading.Thread(target=decrypt_AT)
Thread768 = threading.Thread(target=decrypt_AV)
Thread769 = threading.Thread(target=decrypt_AX)
Thread770 = threading.Thread(target=decrypt_AZ)
Thread771 = threading.Thread(target=decrypt_A0)
Thread772 = threading.Thread(target=decrypt_A2)
Thread773 = threading.Thread(target=decrypt_A4)
Thread774 = threading.Thread(target=decrypt_A6)
Thread775 = threading.Thread(target=decrypt_A8)
Thread776 = threading.Thread(target=decrypt_Aexcl)
Thread777 = threading.Thread(target=decrypt_Adquote)
Thread778 = threading.Thread(target=decrypt_Adoll)
Thread779 = threading.Thread(target=decrypt_Aand)
Thread780 = threading.Thread(target=decrypt_Aquote)
Thread781 = threading.Thread(target=decrypt_Apar)
Thread782 = threading.Thread(target=decrypt_Aast)
Thread783 = threading.Thread(target=decrypt_Avir)
Thread784 = threading.Thread(target=decrypt_App)
Thread785 = threading.Thread(target=decrypt_Atp)
Thread786 = threading.Thread(target=decrypt_Aless)
Thread787 = threading.Thread(target=decrypt_Amore)
Thread788 = threading.Thread(target=decrypt_Aaro)
Thread789 = threading.Thread(target=decrypt_Acroc)
Thread790 = threading.Thread(target=decrypt_Absl)
Thread791 = threading.Thread(target=decrypt_Acirc)
Thread792 = threading.Thread(target=decrypt_Aesp)
Thread793 = threading.Thread(target=decrypt_Acr)
Thread794 = threading.Thread(target=decrypt_Ahl)
Thread795 = threading.Thread(target=decrypt_Atild)
Thread796 = threading.Thread(target=decrypt_Ba)
Thread797 = threading.Thread(target=decrypt_Bb)
Thread798 = threading.Thread(target=decrypt_Bd)
Thread799 = threading.Thread(target=decrypt_Bf)
Thread800 = threading.Thread(target=decrypt_Bh)
Thread801 = threading.Thread(target=decrypt_Bj)
Thread802 = threading.Thread(target=decrypt_Bl)
Thread803 = threading.Thread(target=decrypt_Bn)
Thread804 = threading.Thread(target=decrypt_Bp)
Thread805 = threading.Thread(target=decrypt_Br)
Thread806 = threading.Thread(target=decrypt_Bt)
Thread807 = threading.Thread(target=decrypt_Bv)
Thread808 = threading.Thread(target=decrypt_Bx)
Thread809 = threading.Thread(target=decrypt_Bz)
Thread810 = threading.Thread(target=decrypt_BA)
Thread811 = threading.Thread(target=decrypt_BB)
Thread812 = threading.Thread(target=decrypt_BD)
Thread813 = threading.Thread(target=decrypt_BF)
Thread814 = threading.Thread(target=decrypt_BH)
Thread815 = threading.Thread(target=decrypt_BJ)
Thread816 = threading.Thread(target=decrypt_BL)
Thread817 = threading.Thread(target=decrypt_BN)
Thread818 = threading.Thread(target=decrypt_BP)
Thread819 = threading.Thread(target=decrypt_BR)
Thread820 = threading.Thread(target=decrypt_BT)
Thread821 = threading.Thread(target=decrypt_BV)
Thread822 = threading.Thread(target=decrypt_BX)
Thread823 = threading.Thread(target=decrypt_BZ)
Thread824 = threading.Thread(target=decrypt_B0)
Thread825 = threading.Thread(target=decrypt_B2)
Thread826 = threading.Thread(target=decrypt_B4)
Thread827 = threading.Thread(target=decrypt_B6)
Thread828 = threading.Thread(target=decrypt_B8)
Thread829 = threading.Thread(target=decrypt_Bexcl)
Thread830 = threading.Thread(target=decrypt_Bdquote)
Thread831 = threading.Thread(target=decrypt_Bdoll)
Thread832 = threading.Thread(target=decrypt_Band)
Thread833 = threading.Thread(target=decrypt_Bquote)
Thread834 = threading.Thread(target=decrypt_Bpar)
Thread835 = threading.Thread(target=decrypt_Bast)
Thread836 = threading.Thread(target=decrypt_Bvir)
Thread837 = threading.Thread(target=decrypt_Bpp)
Thread838 = threading.Thread(target=decrypt_Btp)
Thread839 = threading.Thread(target=decrypt_Bless)
Thread840 = threading.Thread(target=decrypt_Bmore)
Thread841 = threading.Thread(target=decrypt_Baro)
Thread842 = threading.Thread(target=decrypt_Bcroc)
Thread843 = threading.Thread(target=decrypt_Bbsl)
Thread844 = threading.Thread(target=decrypt_Bcirc)
Thread845 = threading.Thread(target=decrypt_Besp)
Thread846 = threading.Thread(target=decrypt_Bcr)
Thread847 = threading.Thread(target=decrypt_Bhl)
Thread848 = threading.Thread(target=decrypt_Btild)
Thread849 = threading.Thread(target=decrypt_Da)
Thread850 = threading.Thread(target=decrypt_Db)
Thread851 = threading.Thread(target=decrypt_Dd)
Thread852 = threading.Thread(target=decrypt_Df)
Thread853 = threading.Thread(target=decrypt_Dh)
Thread854 = threading.Thread(target=decrypt_Dj)
Thread855 = threading.Thread(target=decrypt_Dl)
Thread856 = threading.Thread(target=decrypt_Dn)
Thread857 = threading.Thread(target=decrypt_Dp)
Thread858 = threading.Thread(target=decrypt_Dr)
Thread859 = threading.Thread(target=decrypt_Dt)
Thread860 = threading.Thread(target=decrypt_Dv)
Thread861 = threading.Thread(target=decrypt_Dx)
Thread862 = threading.Thread(target=decrypt_Dz)
Thread863 = threading.Thread(target=decrypt_DA)
Thread864 = threading.Thread(target=decrypt_DB)
Thread865 = threading.Thread(target=decrypt_DD)
Thread866 = threading.Thread(target=decrypt_DF)
Thread867 = threading.Thread(target=decrypt_DH)
Thread868 = threading.Thread(target=decrypt_DJ)
Thread869 = threading.Thread(target=decrypt_DL)
Thread870 = threading.Thread(target=decrypt_DN)
Thread871 = threading.Thread(target=decrypt_DP)
Thread872 = threading.Thread(target=decrypt_DR)
Thread873 = threading.Thread(target=decrypt_DT)
Thread874 = threading.Thread(target=decrypt_DV)
Thread875 = threading.Thread(target=decrypt_DX)
Thread876 = threading.Thread(target=decrypt_DZ)
Thread877 = threading.Thread(target=decrypt_D0)
Thread878 = threading.Thread(target=decrypt_D2)
Thread879 = threading.Thread(target=decrypt_D4)
Thread880 = threading.Thread(target=decrypt_D6)
Thread881 = threading.Thread(target=decrypt_D8)
Thread882 = threading.Thread(target=decrypt_Dexcl)
Thread883 = threading.Thread(target=decrypt_Ddquote)
Thread884 = threading.Thread(target=decrypt_Ddoll)
Thread885 = threading.Thread(target=decrypt_Dand)
Thread886 = threading.Thread(target=decrypt_Dquote)
Thread887 = threading.Thread(target=decrypt_Dpar)
Thread888 = threading.Thread(target=decrypt_Dast)
Thread889 = threading.Thread(target=decrypt_Dvir)
Thread890 = threading.Thread(target=decrypt_Dpp)
Thread891 = threading.Thread(target=decrypt_Dtp)
Thread892 = threading.Thread(target=decrypt_Dless)
Thread893 = threading.Thread(target=decrypt_Dmore)
Thread894 = threading.Thread(target=decrypt_Daro)
Thread895 = threading.Thread(target=decrypt_Dcroc)
Thread896 = threading.Thread(target=decrypt_Dbsl)
Thread897 = threading.Thread(target=decrypt_Dcirc)
Thread898 = threading.Thread(target=decrypt_Desp)
Thread899 = threading.Thread(target=decrypt_Dcr)
Thread900 = threading.Thread(target=decrypt_Dhl)
Thread901 = threading.Thread(target=decrypt_Dtild)
Thread902 = threading.Thread(target=decrypt_Fa)
Thread903 = threading.Thread(target=decrypt_Fb)
Thread904 = threading.Thread(target=decrypt_Fd)
Thread905 = threading.Thread(target=decrypt_Ff)
Thread906 = threading.Thread(target=decrypt_Fh)
Thread907 = threading.Thread(target=decrypt_Fj)
Thread908 = threading.Thread(target=decrypt_Fl)
Thread909 = threading.Thread(target=decrypt_Fn)
Thread910 = threading.Thread(target=decrypt_Fp)
Thread911 = threading.Thread(target=decrypt_Fr)
Thread912 = threading.Thread(target=decrypt_Ft)
Thread913 = threading.Thread(target=decrypt_Fv)
Thread914 = threading.Thread(target=decrypt_Fx)
Thread915 = threading.Thread(target=decrypt_Fz)
Thread916 = threading.Thread(target=decrypt_FA)
Thread917 = threading.Thread(target=decrypt_FB)
Thread918 = threading.Thread(target=decrypt_FD)
Thread919 = threading.Thread(target=decrypt_FF)
Thread920 = threading.Thread(target=decrypt_FH)
Thread921 = threading.Thread(target=decrypt_FJ)
Thread922 = threading.Thread(target=decrypt_FL)
Thread923 = threading.Thread(target=decrypt_FN)
Thread924 = threading.Thread(target=decrypt_FP)
Thread925 = threading.Thread(target=decrypt_FR)
Thread926 = threading.Thread(target=decrypt_FT)
Thread927 = threading.Thread(target=decrypt_FV)
Thread928 = threading.Thread(target=decrypt_FX)
Thread929 = threading.Thread(target=decrypt_FZ)
Thread930 = threading.Thread(target=decrypt_F0)
Thread931 = threading.Thread(target=decrypt_F2)
Thread932 = threading.Thread(target=decrypt_F4)
Thread933 = threading.Thread(target=decrypt_F6)
Thread934 = threading.Thread(target=decrypt_F8)
Thread935 = threading.Thread(target=decrypt_Fexcl)
Thread936 = threading.Thread(target=decrypt_Fdquote)
Thread937 = threading.Thread(target=decrypt_Fdoll)
Thread938 = threading.Thread(target=decrypt_Fand)
Thread939 = threading.Thread(target=decrypt_Fquote)
Thread940 = threading.Thread(target=decrypt_Fpar)
Thread941 = threading.Thread(target=decrypt_Fast)
Thread942 = threading.Thread(target=decrypt_Fvir)
Thread943 = threading.Thread(target=decrypt_Fpp)
Thread944 = threading.Thread(target=decrypt_Ftp)
Thread945 = threading.Thread(target=decrypt_Fless)
Thread946 = threading.Thread(target=decrypt_Fmore)
Thread947 = threading.Thread(target=decrypt_Faro)
Thread948 = threading.Thread(target=decrypt_Fcroc)
Thread949 = threading.Thread(target=decrypt_Fbsl)
Thread950 = threading.Thread(target=decrypt_Fcirc)
Thread951 = threading.Thread(target=decrypt_Fesp)
Thread952 = threading.Thread(target=decrypt_Fcr)
Thread953 = threading.Thread(target=decrypt_Fhl)
Thread954 = threading.Thread(target=decrypt_Ftild)
Thread955 = threading.Thread(target=decrypt_Ha)
Thread956 = threading.Thread(target=decrypt_Hb)
Thread957 = threading.Thread(target=decrypt_Hd)
Thread958 = threading.Thread(target=decrypt_Hf)
Thread959 = threading.Thread(target=decrypt_Hh)
Thread960 = threading.Thread(target=decrypt_Hj)
Thread961 = threading.Thread(target=decrypt_Hl)
Thread962 = threading.Thread(target=decrypt_Hn)
Thread963 = threading.Thread(target=decrypt_Hp)
Thread964 = threading.Thread(target=decrypt_Hr)
Thread965 = threading.Thread(target=decrypt_Ht)
Thread966 = threading.Thread(target=decrypt_Hv)
Thread967 = threading.Thread(target=decrypt_Hx)
Thread968 = threading.Thread(target=decrypt_Hz)
Thread969 = threading.Thread(target=decrypt_HA)
Thread970 = threading.Thread(target=decrypt_HB)
Thread971 = threading.Thread(target=decrypt_HD)
Thread972 = threading.Thread(target=decrypt_HF)
Thread973 = threading.Thread(target=decrypt_HH)
Thread974 = threading.Thread(target=decrypt_HJ)
Thread975 = threading.Thread(target=decrypt_HL)
Thread976 = threading.Thread(target=decrypt_HN)
Thread977 = threading.Thread(target=decrypt_HP)
Thread978 = threading.Thread(target=decrypt_HR)
Thread979 = threading.Thread(target=decrypt_HT)
Thread980 = threading.Thread(target=decrypt_HV)
Thread981 = threading.Thread(target=decrypt_HX)
Thread982 = threading.Thread(target=decrypt_HZ)
Thread983 = threading.Thread(target=decrypt_H0)
Thread984 = threading.Thread(target=decrypt_H2)
Thread985 = threading.Thread(target=decrypt_H4)
Thread986 = threading.Thread(target=decrypt_H6)
Thread987 = threading.Thread(target=decrypt_H8)
Thread988 = threading.Thread(target=decrypt_Hexcl)
Thread989 = threading.Thread(target=decrypt_Hdquote)
Thread990 = threading.Thread(target=decrypt_Hdoll)
Thread991 = threading.Thread(target=decrypt_Hand)
Thread992 = threading.Thread(target=decrypt_Hquote)
Thread993 = threading.Thread(target=decrypt_Hpar)
Thread994 = threading.Thread(target=decrypt_Hast)
Thread995 = threading.Thread(target=decrypt_Hvir)
Thread996 = threading.Thread(target=decrypt_Hpp)
Thread997 = threading.Thread(target=decrypt_Htp)
Thread998 = threading.Thread(target=decrypt_Hless)
Thread999 = threading.Thread(target=decrypt_Hmore)
Thread1000 = threading.Thread(target=decrypt_Haro)
Thread1001 = threading.Thread(target=decrypt_Hcroc)
Thread1002 = threading.Thread(target=decrypt_Hbsl)
Thread1003 = threading.Thread(target=decrypt_Hcirc)
Thread1004 = threading.Thread(target=decrypt_Hesp)
Thread1005 = threading.Thread(target=decrypt_Hcr)
Thread1006 = threading.Thread(target=decrypt_Hhl)
Thread1007 = threading.Thread(target=decrypt_Htild)
Thread1008 = threading.Thread(target=decrypt_Ja)
Thread1009 = threading.Thread(target=decrypt_Jb)
Thread1010 = threading.Thread(target=decrypt_Jd)
Thread1011 = threading.Thread(target=decrypt_Jf)
Thread1012 = threading.Thread(target=decrypt_Jh)
Thread1013 = threading.Thread(target=decrypt_Jj)
Thread1014 = threading.Thread(target=decrypt_Jl)
Thread1015 = threading.Thread(target=decrypt_Jn)
Thread1016 = threading.Thread(target=decrypt_Jp)
Thread1017 = threading.Thread(target=decrypt_Jr)
Thread1018 = threading.Thread(target=decrypt_Jt)
Thread1019 = threading.Thread(target=decrypt_Jv)
Thread1020 = threading.Thread(target=decrypt_Jx)
Thread1021 = threading.Thread(target=decrypt_Jz)
Thread1022 = threading.Thread(target=decrypt_JA)
Thread1023 = threading.Thread(target=decrypt_JB)
Thread1024 = threading.Thread(target=decrypt_JD)
Thread1025 = threading.Thread(target=decrypt_JF)
Thread1026 = threading.Thread(target=decrypt_JH)
Thread1027 = threading.Thread(target=decrypt_JJ)
Thread1028 = threading.Thread(target=decrypt_JL)
Thread1029 = threading.Thread(target=decrypt_JN)
Thread1030 = threading.Thread(target=decrypt_JP)
Thread1031 = threading.Thread(target=decrypt_JR)
Thread1032 = threading.Thread(target=decrypt_JT)
Thread1033 = threading.Thread(target=decrypt_JV)
Thread1034 = threading.Thread(target=decrypt_JX)
Thread1035 = threading.Thread(target=decrypt_JZ)
Thread1036 = threading.Thread(target=decrypt_J0)
Thread1037 = threading.Thread(target=decrypt_J2)
Thread1038 = threading.Thread(target=decrypt_J4)
Thread1039 = threading.Thread(target=decrypt_J6)
Thread1040 = threading.Thread(target=decrypt_J8)
Thread1041 = threading.Thread(target=decrypt_Jexcl)
Thread1042 = threading.Thread(target=decrypt_Jdquote)
Thread1043 = threading.Thread(target=decrypt_Jdoll)
Thread1044 = threading.Thread(target=decrypt_Jand)
Thread1045 = threading.Thread(target=decrypt_Jquote)
Thread1046 = threading.Thread(target=decrypt_Jpar)
Thread1047 = threading.Thread(target=decrypt_Jast)
Thread1048 = threading.Thread(target=decrypt_Jvir)
Thread1049 = threading.Thread(target=decrypt_Jpp)
Thread1050 = threading.Thread(target=decrypt_Jtp)
Thread1051 = threading.Thread(target=decrypt_Jless)
Thread1052 = threading.Thread(target=decrypt_Jmore)
Thread1053 = threading.Thread(target=decrypt_Jaro)
Thread1054 = threading.Thread(target=decrypt_Jcroc)
Thread1055 = threading.Thread(target=decrypt_Jbsl)
Thread1056 = threading.Thread(target=decrypt_Jcirc)
Thread1057 = threading.Thread(target=decrypt_Jesp)
Thread1058 = threading.Thread(target=decrypt_Jcr)
Thread1059 = threading.Thread(target=decrypt_Jhl)
Thread1060 = threading.Thread(target=decrypt_Jtild)
Thread1061 = threading.Thread(target=decrypt_La)
Thread1062 = threading.Thread(target=decrypt_Lb)
Thread1063 = threading.Thread(target=decrypt_Ld)
Thread1064 = threading.Thread(target=decrypt_Lf)
Thread1065 = threading.Thread(target=decrypt_Lh)
Thread1066 = threading.Thread(target=decrypt_Lj)
Thread1067 = threading.Thread(target=decrypt_Ll)
Thread1068 = threading.Thread(target=decrypt_Ln)
Thread1069 = threading.Thread(target=decrypt_Lp)
Thread1070 = threading.Thread(target=decrypt_Lr)
Thread1071 = threading.Thread(target=decrypt_Lt)
Thread1072 = threading.Thread(target=decrypt_Lv)
Thread1073 = threading.Thread(target=decrypt_Lx)
Thread1074 = threading.Thread(target=decrypt_Lz)
Thread1075 = threading.Thread(target=decrypt_LA)
Thread1076 = threading.Thread(target=decrypt_LB)
Thread1077 = threading.Thread(target=decrypt_LD)
Thread1078 = threading.Thread(target=decrypt_LF)
Thread1079 = threading.Thread(target=decrypt_LH)
Thread1080 = threading.Thread(target=decrypt_LJ)
Thread1081 = threading.Thread(target=decrypt_LL)
Thread1082 = threading.Thread(target=decrypt_LN)
Thread1083 = threading.Thread(target=decrypt_LP)
Thread1084 = threading.Thread(target=decrypt_LR)
Thread1085 = threading.Thread(target=decrypt_LT)
Thread1086 = threading.Thread(target=decrypt_LV)
Thread1087 = threading.Thread(target=decrypt_LX)
Thread1088 = threading.Thread(target=decrypt_LZ)
Thread1089 = threading.Thread(target=decrypt_L0)
Thread1090 = threading.Thread(target=decrypt_L2)
Thread1091 = threading.Thread(target=decrypt_L4)
Thread1092 = threading.Thread(target=decrypt_L6)
Thread1093 = threading.Thread(target=decrypt_L8)
Thread1094 = threading.Thread(target=decrypt_Lexcl)
Thread1095 = threading.Thread(target=decrypt_Ldquote)
Thread1096 = threading.Thread(target=decrypt_Ldoll)
Thread1097 = threading.Thread(target=decrypt_Land)
Thread1098 = threading.Thread(target=decrypt_Lquote)
Thread1099 = threading.Thread(target=decrypt_Lpar)
Thread1100 = threading.Thread(target=decrypt_Last)
Thread1101 = threading.Thread(target=decrypt_Lvir)
Thread1102 = threading.Thread(target=decrypt_Lpp)
Thread1103 = threading.Thread(target=decrypt_Ltp)
Thread1104 = threading.Thread(target=decrypt_Lless)
Thread1105 = threading.Thread(target=decrypt_Lmore)
Thread1106 = threading.Thread(target=decrypt_Laro)
Thread1107 = threading.Thread(target=decrypt_Lcroc)
Thread1108 = threading.Thread(target=decrypt_Lbsl)
Thread1109 = threading.Thread(target=decrypt_Lcirc)
Thread1110 = threading.Thread(target=decrypt_Lesp)
Thread1111 = threading.Thread(target=decrypt_Lcr)
Thread1112 = threading.Thread(target=decrypt_Lhl)
Thread1113 = threading.Thread(target=decrypt_Ltild)
Thread1114 = threading.Thread(target=decrypt_Na)
Thread1115 = threading.Thread(target=decrypt_Nb)
Thread1116 = threading.Thread(target=decrypt_Nd)
Thread1117 = threading.Thread(target=decrypt_Nf)
Thread1118 = threading.Thread(target=decrypt_Nh)
Thread1119 = threading.Thread(target=decrypt_Nj)
Thread1120 = threading.Thread(target=decrypt_Nl)
Thread1121 = threading.Thread(target=decrypt_Nn)
Thread1122 = threading.Thread(target=decrypt_Np)
Thread1123 = threading.Thread(target=decrypt_Nr)
Thread1124 = threading.Thread(target=decrypt_Nt)
Thread1125 = threading.Thread(target=decrypt_Nv)
Thread1126 = threading.Thread(target=decrypt_Nx)
Thread1127 = threading.Thread(target=decrypt_Nz)
Thread1128 = threading.Thread(target=decrypt_NA)
Thread1129 = threading.Thread(target=decrypt_NB)
Thread1130 = threading.Thread(target=decrypt_ND)
Thread1131 = threading.Thread(target=decrypt_NF)
Thread1132 = threading.Thread(target=decrypt_NH)
Thread1133 = threading.Thread(target=decrypt_NJ)
Thread1134 = threading.Thread(target=decrypt_NL)
Thread1135 = threading.Thread(target=decrypt_NN)
Thread1136 = threading.Thread(target=decrypt_NP)
Thread1137 = threading.Thread(target=decrypt_NR)
Thread1138 = threading.Thread(target=decrypt_NT)
Thread1139 = threading.Thread(target=decrypt_NV)
Thread1140 = threading.Thread(target=decrypt_NX)
Thread1141 = threading.Thread(target=decrypt_NZ)
Thread1142 = threading.Thread(target=decrypt_N0)
Thread1143 = threading.Thread(target=decrypt_N2)
Thread1144 = threading.Thread(target=decrypt_N4)
Thread1145 = threading.Thread(target=decrypt_N6)
Thread1146 = threading.Thread(target=decrypt_N8)
Thread1147 = threading.Thread(target=decrypt_Nexcl)
Thread1148 = threading.Thread(target=decrypt_Ndquote)
Thread1149 = threading.Thread(target=decrypt_Ndoll)
Thread1150 = threading.Thread(target=decrypt_Nand)
Thread1151 = threading.Thread(target=decrypt_Nquote)
Thread1152 = threading.Thread(target=decrypt_Npar)
Thread1153 = threading.Thread(target=decrypt_Nast)
Thread1154 = threading.Thread(target=decrypt_Nvir)
Thread1155 = threading.Thread(target=decrypt_Npp)
Thread1156 = threading.Thread(target=decrypt_Ntp)
Thread1157 = threading.Thread(target=decrypt_Nless)
Thread1158 = threading.Thread(target=decrypt_Nmore)
Thread1159 = threading.Thread(target=decrypt_Naro)
Thread1160 = threading.Thread(target=decrypt_Ncroc)
Thread1161 = threading.Thread(target=decrypt_Nbsl)
Thread1162 = threading.Thread(target=decrypt_Ncirc)
Thread1163 = threading.Thread(target=decrypt_Nesp)
Thread1164 = threading.Thread(target=decrypt_Ncr)
Thread1165 = threading.Thread(target=decrypt_Nhl)
Thread1166 = threading.Thread(target=decrypt_Ntild)
Thread1167 = threading.Thread(target=decrypt_Pa)
Thread1168 = threading.Thread(target=decrypt_Pb)
Thread1169 = threading.Thread(target=decrypt_Pd)
Thread1170 = threading.Thread(target=decrypt_Pf)
Thread1171 = threading.Thread(target=decrypt_Ph)
Thread1172 = threading.Thread(target=decrypt_Pj)
Thread1173 = threading.Thread(target=decrypt_Pl)
Thread1174 = threading.Thread(target=decrypt_Pn)
Thread1175 = threading.Thread(target=decrypt_Pp)
Thread1176 = threading.Thread(target=decrypt_Pr)
Thread1177 = threading.Thread(target=decrypt_Pt)
Thread1178 = threading.Thread(target=decrypt_Pv)
Thread1179 = threading.Thread(target=decrypt_Px)
Thread1180 = threading.Thread(target=decrypt_Pz)
Thread1181 = threading.Thread(target=decrypt_PA)
Thread1182 = threading.Thread(target=decrypt_PB)
Thread1183 = threading.Thread(target=decrypt_PD)
Thread1184 = threading.Thread(target=decrypt_PF)
Thread1185 = threading.Thread(target=decrypt_PH)
Thread1186 = threading.Thread(target=decrypt_PJ)
Thread1187 = threading.Thread(target=decrypt_PL)
Thread1188 = threading.Thread(target=decrypt_PN)
Thread1189 = threading.Thread(target=decrypt_PP)
Thread1190 = threading.Thread(target=decrypt_PR)
Thread1191 = threading.Thread(target=decrypt_PT)
Thread1192 = threading.Thread(target=decrypt_PV)
Thread1193 = threading.Thread(target=decrypt_PX)
Thread1194 = threading.Thread(target=decrypt_PZ)
Thread1195 = threading.Thread(target=decrypt_P0)
Thread1196 = threading.Thread(target=decrypt_P2)
Thread1197 = threading.Thread(target=decrypt_P4)
Thread1198 = threading.Thread(target=decrypt_P6)
Thread1199 = threading.Thread(target=decrypt_P8)
Thread1200 = threading.Thread(target=decrypt_Pexcl)
Thread1201 = threading.Thread(target=decrypt_Pdquote)
Thread1202 = threading.Thread(target=decrypt_Pdoll)
Thread1203 = threading.Thread(target=decrypt_Pand)
Thread1204 = threading.Thread(target=decrypt_Pquote)
Thread1205 = threading.Thread(target=decrypt_Ppar)
Thread1206 = threading.Thread(target=decrypt_Past)
Thread1207 = threading.Thread(target=decrypt_Pvir)
Thread1208 = threading.Thread(target=decrypt_Ppp)
Thread1209 = threading.Thread(target=decrypt_Ptp)
Thread1210 = threading.Thread(target=decrypt_Pless)
Thread1211 = threading.Thread(target=decrypt_Pmore)
Thread1212 = threading.Thread(target=decrypt_Paro)
Thread1213 = threading.Thread(target=decrypt_Pcroc)
Thread1214 = threading.Thread(target=decrypt_Pbsl)
Thread1215 = threading.Thread(target=decrypt_Pcirc)
Thread1216 = threading.Thread(target=decrypt_Pesp)
Thread1217 = threading.Thread(target=decrypt_Pcr)
Thread1218 = threading.Thread(target=decrypt_Phl)
Thread1219 = threading.Thread(target=decrypt_Ptild)
Thread1220 = threading.Thread(target=decrypt_Ra)
Thread1221 = threading.Thread(target=decrypt_Rb)
Thread1222 = threading.Thread(target=decrypt_Rd)
Thread1223 = threading.Thread(target=decrypt_Rf)
Thread1224 = threading.Thread(target=decrypt_Rh)
Thread1225 = threading.Thread(target=decrypt_Rj)
Thread1226 = threading.Thread(target=decrypt_Rl)
Thread1227 = threading.Thread(target=decrypt_Rn)
Thread1228 = threading.Thread(target=decrypt_Rp)
Thread1229 = threading.Thread(target=decrypt_Rr)
Thread1230 = threading.Thread(target=decrypt_Rt)
Thread1231 = threading.Thread(target=decrypt_Rv)
Thread1232 = threading.Thread(target=decrypt_Rx)
Thread1233 = threading.Thread(target=decrypt_Rz)
Thread1234 = threading.Thread(target=decrypt_RA)
Thread1235 = threading.Thread(target=decrypt_RB)
Thread1236 = threading.Thread(target=decrypt_RD)
Thread1237 = threading.Thread(target=decrypt_RF)
Thread1238 = threading.Thread(target=decrypt_RH)
Thread1239 = threading.Thread(target=decrypt_RJ)
Thread1240 = threading.Thread(target=decrypt_RL)
Thread1241 = threading.Thread(target=decrypt_RN)
Thread1242 = threading.Thread(target=decrypt_RP)
Thread1243 = threading.Thread(target=decrypt_RR)
Thread1244 = threading.Thread(target=decrypt_RT)
Thread1245 = threading.Thread(target=decrypt_RV)
Thread1246 = threading.Thread(target=decrypt_RX)
Thread1247 = threading.Thread(target=decrypt_RZ)
Thread1248 = threading.Thread(target=decrypt_R0)
Thread1249 = threading.Thread(target=decrypt_R2)
Thread1250 = threading.Thread(target=decrypt_R4)
Thread1251 = threading.Thread(target=decrypt_R6)
Thread1252 = threading.Thread(target=decrypt_R8)
Thread1253 = threading.Thread(target=decrypt_Rexcl)
Thread1254 = threading.Thread(target=decrypt_Rdquote)
Thread1255 = threading.Thread(target=decrypt_Rdoll)
Thread1256 = threading.Thread(target=decrypt_Rand)
Thread1257 = threading.Thread(target=decrypt_Rquote)
Thread1258 = threading.Thread(target=decrypt_Rpar)
Thread1259 = threading.Thread(target=decrypt_Rast)
Thread1260 = threading.Thread(target=decrypt_Rvir)
Thread1261 = threading.Thread(target=decrypt_Rpp)
Thread1262 = threading.Thread(target=decrypt_Rtp)
Thread1263 = threading.Thread(target=decrypt_Rless)
Thread1264 = threading.Thread(target=decrypt_Rmore)
Thread1265 = threading.Thread(target=decrypt_Raro)
Thread1266 = threading.Thread(target=decrypt_Rcroc)
Thread1267 = threading.Thread(target=decrypt_Rbsl)
Thread1268 = threading.Thread(target=decrypt_Rcirc)
Thread1269 = threading.Thread(target=decrypt_Resp)
Thread1270 = threading.Thread(target=decrypt_Rcr)
Thread1271 = threading.Thread(target=decrypt_Rhl)
Thread1272 = threading.Thread(target=decrypt_Rtild)
Thread1273 = threading.Thread(target=decrypt_Ta)
Thread1274 = threading.Thread(target=decrypt_Tb)
Thread1275 = threading.Thread(target=decrypt_Td)
Thread1276 = threading.Thread(target=decrypt_Tf)
Thread1277 = threading.Thread(target=decrypt_Th)
Thread1278 = threading.Thread(target=decrypt_Tj)
Thread1279 = threading.Thread(target=decrypt_Tl)
Thread1280 = threading.Thread(target=decrypt_Tn)
Thread1281 = threading.Thread(target=decrypt_Tp)
Thread1282 = threading.Thread(target=decrypt_Tr)
Thread1283 = threading.Thread(target=decrypt_Tt)
Thread1284 = threading.Thread(target=decrypt_Tv)
Thread1285 = threading.Thread(target=decrypt_Tx)
Thread1286 = threading.Thread(target=decrypt_Tz)
Thread1287 = threading.Thread(target=decrypt_TA)
Thread1288 = threading.Thread(target=decrypt_TB)
Thread1289 = threading.Thread(target=decrypt_TD)
Thread1290 = threading.Thread(target=decrypt_TF)
Thread1291 = threading.Thread(target=decrypt_TH)
Thread1292 = threading.Thread(target=decrypt_TJ)
Thread1293 = threading.Thread(target=decrypt_TL)
Thread1294 = threading.Thread(target=decrypt_TN)
Thread1295 = threading.Thread(target=decrypt_TP)
Thread1296 = threading.Thread(target=decrypt_TR)
Thread1297 = threading.Thread(target=decrypt_TT)
Thread1298 = threading.Thread(target=decrypt_TV)
Thread1299 = threading.Thread(target=decrypt_TX)
Thread1300 = threading.Thread(target=decrypt_TZ)
Thread1301 = threading.Thread(target=decrypt_T0)
Thread1302 = threading.Thread(target=decrypt_T2)
Thread1303 = threading.Thread(target=decrypt_T4)
Thread1304 = threading.Thread(target=decrypt_T6)
Thread1305 = threading.Thread(target=decrypt_T8)
Thread1306 = threading.Thread(target=decrypt_Texcl)
Thread1307 = threading.Thread(target=decrypt_Tdquote)
Thread1308 = threading.Thread(target=decrypt_Tdoll)
Thread1309 = threading.Thread(target=decrypt_Tand)
Thread1310 = threading.Thread(target=decrypt_Tquote)
Thread1311 = threading.Thread(target=decrypt_Tpar)
Thread1312 = threading.Thread(target=decrypt_Tast)
Thread1313 = threading.Thread(target=decrypt_Tvir)
Thread1314 = threading.Thread(target=decrypt_Tpp)
Thread1315 = threading.Thread(target=decrypt_Ttp)
Thread1316 = threading.Thread(target=decrypt_Tless)
Thread1317 = threading.Thread(target=decrypt_Tmore)
Thread1318 = threading.Thread(target=decrypt_Taro)
Thread1319 = threading.Thread(target=decrypt_Tcroc)
Thread1320 = threading.Thread(target=decrypt_Tbsl)
Thread1321 = threading.Thread(target=decrypt_Tcirc)
Thread1322 = threading.Thread(target=decrypt_Tesp)
Thread1323 = threading.Thread(target=decrypt_Tcr)
Thread1324 = threading.Thread(target=decrypt_Thl)
Thread1325 = threading.Thread(target=decrypt_Ttild)
Thread1326 = threading.Thread(target=decrypt_Va)
Thread1327 = threading.Thread(target=decrypt_Vb)
Thread1328 = threading.Thread(target=decrypt_Vd)
Thread1329 = threading.Thread(target=decrypt_Vf)
Thread1330 = threading.Thread(target=decrypt_Vh)
Thread1331 = threading.Thread(target=decrypt_Vj)
Thread1332 = threading.Thread(target=decrypt_Vl)
Thread1333 = threading.Thread(target=decrypt_Vn)
Thread1334 = threading.Thread(target=decrypt_Vp)
Thread1335 = threading.Thread(target=decrypt_Vr)
Thread1336 = threading.Thread(target=decrypt_Vt)
Thread1337 = threading.Thread(target=decrypt_Vv)
Thread1338 = threading.Thread(target=decrypt_Vx)
Thread1339 = threading.Thread(target=decrypt_Vz)
Thread1340 = threading.Thread(target=decrypt_VA)
Thread1341 = threading.Thread(target=decrypt_VB)
Thread1342 = threading.Thread(target=decrypt_VD)
Thread1343 = threading.Thread(target=decrypt_VF)
Thread1344 = threading.Thread(target=decrypt_VH)
Thread1345 = threading.Thread(target=decrypt_VJ)
Thread1346 = threading.Thread(target=decrypt_VL)
Thread1347 = threading.Thread(target=decrypt_VN)
Thread1348 = threading.Thread(target=decrypt_VP)
Thread1349 = threading.Thread(target=decrypt_VR)
Thread1350 = threading.Thread(target=decrypt_VT)
Thread1351 = threading.Thread(target=decrypt_VV)
Thread1352 = threading.Thread(target=decrypt_VX)
Thread1353 = threading.Thread(target=decrypt_VZ)
Thread1354 = threading.Thread(target=decrypt_V0)
Thread1355 = threading.Thread(target=decrypt_V2)
Thread1356 = threading.Thread(target=decrypt_V4)
Thread1357 = threading.Thread(target=decrypt_V6)
Thread1358 = threading.Thread(target=decrypt_V8)
Thread1359 = threading.Thread(target=decrypt_Vexcl)
Thread1360 = threading.Thread(target=decrypt_Vdquote)
Thread1361 = threading.Thread(target=decrypt_Vdoll)
Thread1362 = threading.Thread(target=decrypt_Vand)
Thread1363 = threading.Thread(target=decrypt_Vquote)
Thread1364 = threading.Thread(target=decrypt_Vpar)
Thread1365 = threading.Thread(target=decrypt_Vast)
Thread1366 = threading.Thread(target=decrypt_Vvir)
Thread1367 = threading.Thread(target=decrypt_Vpp)
Thread1368 = threading.Thread(target=decrypt_Vtp)
Thread1369 = threading.Thread(target=decrypt_Vless)
Thread1370 = threading.Thread(target=decrypt_Vmore)
Thread1371 = threading.Thread(target=decrypt_Varo)
Thread1372 = threading.Thread(target=decrypt_Vcroc)
Thread1373 = threading.Thread(target=decrypt_Vbsl)
Thread1374 = threading.Thread(target=decrypt_Vcirc)
Thread1375 = threading.Thread(target=decrypt_Vesp)
Thread1376 = threading.Thread(target=decrypt_Vcr)
Thread1377 = threading.Thread(target=decrypt_Vhl)
Thread1378 = threading.Thread(target=decrypt_Vtild)
Thread1379 = threading.Thread(target=decrypt_Xa)
Thread1380 = threading.Thread(target=decrypt_Xb)
Thread1381 = threading.Thread(target=decrypt_Xd)
Thread1382 = threading.Thread(target=decrypt_Xf)
Thread1383 = threading.Thread(target=decrypt_Xh)
Thread1384 = threading.Thread(target=decrypt_Xj)
Thread1385 = threading.Thread(target=decrypt_Xl)
Thread1386 = threading.Thread(target=decrypt_Xn)
Thread1387 = threading.Thread(target=decrypt_Xp)
Thread1388 = threading.Thread(target=decrypt_Xr)
Thread1389 = threading.Thread(target=decrypt_Xt)
Thread1390 = threading.Thread(target=decrypt_Xv)
Thread1391 = threading.Thread(target=decrypt_Xx)
Thread1392 = threading.Thread(target=decrypt_Xz)
Thread1393 = threading.Thread(target=decrypt_XA)
Thread1394 = threading.Thread(target=decrypt_XB)
Thread1395 = threading.Thread(target=decrypt_XD)
Thread1396 = threading.Thread(target=decrypt_XF)
Thread1397 = threading.Thread(target=decrypt_XH)
Thread1398 = threading.Thread(target=decrypt_XJ)
Thread1399 = threading.Thread(target=decrypt_XL)
Thread1400 = threading.Thread(target=decrypt_XN)
Thread1401 = threading.Thread(target=decrypt_XP)
Thread1402 = threading.Thread(target=decrypt_XR)
Thread1403 = threading.Thread(target=decrypt_XT)
Thread1404 = threading.Thread(target=decrypt_XV)
Thread1405 = threading.Thread(target=decrypt_XX)
Thread1406 = threading.Thread(target=decrypt_XZ)
Thread1407 = threading.Thread(target=decrypt_X0)
Thread1408 = threading.Thread(target=decrypt_X2)
Thread1409 = threading.Thread(target=decrypt_X4)
Thread1410 = threading.Thread(target=decrypt_X6)
Thread1411 = threading.Thread(target=decrypt_X8)
Thread1412 = threading.Thread(target=decrypt_Xexcl)
Thread1413 = threading.Thread(target=decrypt_Xdquote)
Thread1414 = threading.Thread(target=decrypt_Xdoll)
Thread1415 = threading.Thread(target=decrypt_Xand)
Thread1416 = threading.Thread(target=decrypt_Xquote)
Thread1417 = threading.Thread(target=decrypt_Xpar)
Thread1418 = threading.Thread(target=decrypt_Xast)
Thread1419 = threading.Thread(target=decrypt_Xvir)
Thread1420 = threading.Thread(target=decrypt_Xpp)
Thread1421 = threading.Thread(target=decrypt_Xtp)
Thread1422 = threading.Thread(target=decrypt_Xless)
Thread1423 = threading.Thread(target=decrypt_Xmore)
Thread1424 = threading.Thread(target=decrypt_Xaro)
Thread1425 = threading.Thread(target=decrypt_Xcroc)
Thread1426 = threading.Thread(target=decrypt_Xbsl)
Thread1427 = threading.Thread(target=decrypt_Xcirc)
Thread1428 = threading.Thread(target=decrypt_Xesp)
Thread1429 = threading.Thread(target=decrypt_Xcr)
Thread1430 = threading.Thread(target=decrypt_Xhl)
Thread1431 = threading.Thread(target=decrypt_Xtild)
Thread1432 = threading.Thread(target=decrypt_Za)
Thread1433 = threading.Thread(target=decrypt_Zb)
Thread1434 = threading.Thread(target=decrypt_Zd)
Thread1435 = threading.Thread(target=decrypt_Zf)
Thread1436 = threading.Thread(target=decrypt_Zh)
Thread1437 = threading.Thread(target=decrypt_Zj)
Thread1438 = threading.Thread(target=decrypt_Zl)
Thread1439 = threading.Thread(target=decrypt_Zn)
Thread1440 = threading.Thread(target=decrypt_Zp)
Thread1441 = threading.Thread(target=decrypt_Zr)
Thread1442 = threading.Thread(target=decrypt_Zt)
Thread1443 = threading.Thread(target=decrypt_Zv)
Thread1444 = threading.Thread(target=decrypt_Zx)
Thread1445 = threading.Thread(target=decrypt_Zz)
Thread1446 = threading.Thread(target=decrypt_ZA)
Thread1447 = threading.Thread(target=decrypt_ZB)
Thread1448 = threading.Thread(target=decrypt_ZD)
Thread1449 = threading.Thread(target=decrypt_ZF)
Thread1450 = threading.Thread(target=decrypt_ZH)
Thread1451 = threading.Thread(target=decrypt_ZJ)
Thread1452 = threading.Thread(target=decrypt_ZL)
Thread1453 = threading.Thread(target=decrypt_ZN)
Thread1454 = threading.Thread(target=decrypt_ZP)
Thread1455 = threading.Thread(target=decrypt_ZR)
Thread1456 = threading.Thread(target=decrypt_ZT)
Thread1457 = threading.Thread(target=decrypt_ZV)
Thread1458 = threading.Thread(target=decrypt_ZX)
Thread1459 = threading.Thread(target=decrypt_ZZ)
Thread1460 = threading.Thread(target=decrypt_Z0)
Thread1461 = threading.Thread(target=decrypt_Z2)
Thread1462 = threading.Thread(target=decrypt_Z4)
Thread1463 = threading.Thread(target=decrypt_Z6)
Thread1464 = threading.Thread(target=decrypt_Z8)
Thread1465 = threading.Thread(target=decrypt_Zexcl)
Thread1466 = threading.Thread(target=decrypt_Zdquote)
Thread1467 = threading.Thread(target=decrypt_Zdoll)
Thread1468 = threading.Thread(target=decrypt_Zand)
Thread1469 = threading.Thread(target=decrypt_Zquote)
Thread1470 = threading.Thread(target=decrypt_Zpar)
Thread1471 = threading.Thread(target=decrypt_Zast)
Thread1472 = threading.Thread(target=decrypt_Zvir)
Thread1473 = threading.Thread(target=decrypt_Zpp)
Thread1474 = threading.Thread(target=decrypt_Ztp)
Thread1475 = threading.Thread(target=decrypt_Zless)
Thread1476 = threading.Thread(target=decrypt_Zmore)
Thread1477 = threading.Thread(target=decrypt_Zaro)
Thread1478 = threading.Thread(target=decrypt_Zcroc)
Thread1479 = threading.Thread(target=decrypt_Zbsl)
Thread1480 = threading.Thread(target=decrypt_Zcirc)
Thread1481 = threading.Thread(target=decrypt_Zesp)
Thread1482 = threading.Thread(target=decrypt_Zcr)
Thread1483 = threading.Thread(target=decrypt_Zhl)
Thread1484 = threading.Thread(target=decrypt_Ztild)
Thread1485 = threading.Thread(target=decrypt_0a)
Thread1486 = threading.Thread(target=decrypt_0b)
Thread1487 = threading.Thread(target=decrypt_0d)
Thread1488 = threading.Thread(target=decrypt_0f)
Thread1489 = threading.Thread(target=decrypt_0h)
Thread1490 = threading.Thread(target=decrypt_0j)
Thread1491 = threading.Thread(target=decrypt_0l)
Thread1492 = threading.Thread(target=decrypt_0n)
Thread1493 = threading.Thread(target=decrypt_0p)
Thread1494 = threading.Thread(target=decrypt_0r)
Thread1495 = threading.Thread(target=decrypt_0t)
Thread1496 = threading.Thread(target=decrypt_0v)
Thread1497 = threading.Thread(target=decrypt_0x)
Thread1498 = threading.Thread(target=decrypt_0z)
Thread1499 = threading.Thread(target=decrypt_0A)
Thread1500 = threading.Thread(target=decrypt_0B)
Thread1501 = threading.Thread(target=decrypt_0D)
Thread1502 = threading.Thread(target=decrypt_0F)
Thread1503 = threading.Thread(target=decrypt_0H)
Thread1504 = threading.Thread(target=decrypt_0J)
Thread1505 = threading.Thread(target=decrypt_0L)
Thread1506 = threading.Thread(target=decrypt_0N)
Thread1507 = threading.Thread(target=decrypt_0P)
Thread1508 = threading.Thread(target=decrypt_0R)
Thread1509 = threading.Thread(target=decrypt_0T)
Thread1510 = threading.Thread(target=decrypt_0V)
Thread1511 = threading.Thread(target=decrypt_0X)
Thread1512 = threading.Thread(target=decrypt_0Z)
Thread1513 = threading.Thread(target=decrypt_00)
Thread1514 = threading.Thread(target=decrypt_02)
Thread1515 = threading.Thread(target=decrypt_04)
Thread1516 = threading.Thread(target=decrypt_06)
Thread1517 = threading.Thread(target=decrypt_08)
Thread1518 = threading.Thread(target=decrypt_0excl)
Thread1519 = threading.Thread(target=decrypt_0dquote)
Thread1520 = threading.Thread(target=decrypt_0doll)
Thread1521 = threading.Thread(target=decrypt_0and)
Thread1522 = threading.Thread(target=decrypt_0quote)
Thread1523 = threading.Thread(target=decrypt_0par)
Thread1524 = threading.Thread(target=decrypt_0ast)
Thread1525 = threading.Thread(target=decrypt_0vir)
Thread1526 = threading.Thread(target=decrypt_0pp)
Thread1527 = threading.Thread(target=decrypt_0tp)
Thread1528 = threading.Thread(target=decrypt_0less)
Thread1529 = threading.Thread(target=decrypt_0more)
Thread1530 = threading.Thread(target=decrypt_0aro)
Thread1531 = threading.Thread(target=decrypt_0croc)
Thread1532 = threading.Thread(target=decrypt_0bsl)
Thread1533 = threading.Thread(target=decrypt_0circ)
Thread1534 = threading.Thread(target=decrypt_0esp)
Thread1535 = threading.Thread(target=decrypt_0cr)
Thread1536 = threading.Thread(target=decrypt_0hl)
Thread1537 = threading.Thread(target=decrypt_0tild)
Thread1538 = threading.Thread(target=decrypt_2a)
Thread1539 = threading.Thread(target=decrypt_2b)
Thread1540 = threading.Thread(target=decrypt_2d)
Thread1541 = threading.Thread(target=decrypt_2f)
Thread1542 = threading.Thread(target=decrypt_2h)
Thread1543 = threading.Thread(target=decrypt_2j)
Thread1544 = threading.Thread(target=decrypt_2l)
Thread1545 = threading.Thread(target=decrypt_2n)
Thread1546 = threading.Thread(target=decrypt_2p)
Thread1547 = threading.Thread(target=decrypt_2r)
Thread1548 = threading.Thread(target=decrypt_2t)
Thread1549 = threading.Thread(target=decrypt_2v)
Thread1550 = threading.Thread(target=decrypt_2x)
Thread1551 = threading.Thread(target=decrypt_2z)
Thread1552 = threading.Thread(target=decrypt_2A)
Thread1553 = threading.Thread(target=decrypt_2B)
Thread1554 = threading.Thread(target=decrypt_2D)
Thread1555 = threading.Thread(target=decrypt_2F)
Thread1556 = threading.Thread(target=decrypt_2H)
Thread1557 = threading.Thread(target=decrypt_2J)
Thread1558 = threading.Thread(target=decrypt_2L)
Thread1559 = threading.Thread(target=decrypt_2N)
Thread1560 = threading.Thread(target=decrypt_2P)
Thread1561 = threading.Thread(target=decrypt_2R)
Thread1562 = threading.Thread(target=decrypt_2T)
Thread1563 = threading.Thread(target=decrypt_2V)
Thread1564 = threading.Thread(target=decrypt_2X)
Thread1565 = threading.Thread(target=decrypt_2Z)
Thread1566 = threading.Thread(target=decrypt_20)
Thread1567 = threading.Thread(target=decrypt_22)
Thread1568 = threading.Thread(target=decrypt_24)
Thread1569 = threading.Thread(target=decrypt_26)
Thread1570 = threading.Thread(target=decrypt_28)
Thread1571 = threading.Thread(target=decrypt_2excl)
Thread1572 = threading.Thread(target=decrypt_2dquote)
Thread1573 = threading.Thread(target=decrypt_2doll)
Thread1574 = threading.Thread(target=decrypt_2and)
Thread1575 = threading.Thread(target=decrypt_2quote)
Thread1576 = threading.Thread(target=decrypt_2par)
Thread1577 = threading.Thread(target=decrypt_2ast)
Thread1578 = threading.Thread(target=decrypt_2vir)
Thread1579 = threading.Thread(target=decrypt_2pp)
Thread1580 = threading.Thread(target=decrypt_2tp)
Thread1581 = threading.Thread(target=decrypt_2less)
Thread1582 = threading.Thread(target=decrypt_2more)
Thread1583 = threading.Thread(target=decrypt_2aro)
Thread1584 = threading.Thread(target=decrypt_2croc)
Thread1585 = threading.Thread(target=decrypt_2bsl)
Thread1586 = threading.Thread(target=decrypt_2circ)
Thread1587 = threading.Thread(target=decrypt_2esp)
Thread1588 = threading.Thread(target=decrypt_2cr)
Thread1589 = threading.Thread(target=decrypt_2hl)
Thread1590 = threading.Thread(target=decrypt_2tild)
Thread1591 = threading.Thread(target=decrypt_4a)
Thread1592 = threading.Thread(target=decrypt_4b)
Thread1593 = threading.Thread(target=decrypt_4d)
Thread1594 = threading.Thread(target=decrypt_4f)
Thread1595 = threading.Thread(target=decrypt_4h)
Thread1596 = threading.Thread(target=decrypt_4j)
Thread1597 = threading.Thread(target=decrypt_4l)
Thread1598 = threading.Thread(target=decrypt_4n)
Thread1599 = threading.Thread(target=decrypt_4p)
Thread1600 = threading.Thread(target=decrypt_4r)
Thread1601 = threading.Thread(target=decrypt_4t)
Thread1602 = threading.Thread(target=decrypt_4v)
Thread1603 = threading.Thread(target=decrypt_4x)
Thread1604 = threading.Thread(target=decrypt_4z)
Thread1605 = threading.Thread(target=decrypt_4A)
Thread1606 = threading.Thread(target=decrypt_4B)
Thread1607 = threading.Thread(target=decrypt_4D)
Thread1608 = threading.Thread(target=decrypt_4F)
Thread1609 = threading.Thread(target=decrypt_4H)
Thread1610 = threading.Thread(target=decrypt_4J)
Thread1611 = threading.Thread(target=decrypt_4L)
Thread1612 = threading.Thread(target=decrypt_4N)
Thread1613 = threading.Thread(target=decrypt_4P)
Thread1614 = threading.Thread(target=decrypt_4R)
Thread1615 = threading.Thread(target=decrypt_4T)
Thread1616 = threading.Thread(target=decrypt_4V)
Thread1617 = threading.Thread(target=decrypt_4X)
Thread1618 = threading.Thread(target=decrypt_4Z)
Thread1619 = threading.Thread(target=decrypt_40)
Thread1620 = threading.Thread(target=decrypt_42)
Thread1621 = threading.Thread(target=decrypt_44)
Thread1622 = threading.Thread(target=decrypt_46)
Thread1623 = threading.Thread(target=decrypt_48)
Thread1624 = threading.Thread(target=decrypt_4excl)
Thread1625 = threading.Thread(target=decrypt_4dquote)
Thread1626 = threading.Thread(target=decrypt_4doll)
Thread1627 = threading.Thread(target=decrypt_4and)
Thread1628 = threading.Thread(target=decrypt_4quote)
Thread1629 = threading.Thread(target=decrypt_4par)
Thread1630 = threading.Thread(target=decrypt_4ast)
Thread1631 = threading.Thread(target=decrypt_4vir)
Thread1632 = threading.Thread(target=decrypt_4pp)
Thread1633 = threading.Thread(target=decrypt_4tp)
Thread1634 = threading.Thread(target=decrypt_4less)
Thread1635 = threading.Thread(target=decrypt_4more)
Thread1636 = threading.Thread(target=decrypt_4aro)
Thread1637 = threading.Thread(target=decrypt_4croc)
Thread1638 = threading.Thread(target=decrypt_4bsl)
Thread1639 = threading.Thread(target=decrypt_4circ)
Thread1640 = threading.Thread(target=decrypt_4esp)
Thread1641 = threading.Thread(target=decrypt_4cr)
Thread1642 = threading.Thread(target=decrypt_4hl)
Thread1643 = threading.Thread(target=decrypt_4tild)
Thread1644 = threading.Thread(target=decrypt_6a)
Thread1645 = threading.Thread(target=decrypt_6b)
Thread1646 = threading.Thread(target=decrypt_6d)
Thread1647 = threading.Thread(target=decrypt_6f)
Thread1648 = threading.Thread(target=decrypt_6h)
Thread1649 = threading.Thread(target=decrypt_6j)
Thread1650 = threading.Thread(target=decrypt_6l)
Thread1651 = threading.Thread(target=decrypt_6n)
Thread1652 = threading.Thread(target=decrypt_6p)
Thread1653 = threading.Thread(target=decrypt_6r)
Thread1654 = threading.Thread(target=decrypt_6t)
Thread1655 = threading.Thread(target=decrypt_6v)
Thread1656 = threading.Thread(target=decrypt_6x)
Thread1657 = threading.Thread(target=decrypt_6z)
Thread1658 = threading.Thread(target=decrypt_6A)
Thread1659 = threading.Thread(target=decrypt_6B)
Thread1660 = threading.Thread(target=decrypt_6D)
Thread1661 = threading.Thread(target=decrypt_6F)
Thread1662 = threading.Thread(target=decrypt_6H)
Thread1663 = threading.Thread(target=decrypt_6J)
Thread1664 = threading.Thread(target=decrypt_6L)
Thread1665 = threading.Thread(target=decrypt_6N)
Thread1666 = threading.Thread(target=decrypt_6P)
Thread1667 = threading.Thread(target=decrypt_6R)
Thread1668 = threading.Thread(target=decrypt_6T)
Thread1669 = threading.Thread(target=decrypt_6V)
Thread1670 = threading.Thread(target=decrypt_6X)
Thread1671 = threading.Thread(target=decrypt_6Z)
Thread1672 = threading.Thread(target=decrypt_60)
Thread1673 = threading.Thread(target=decrypt_62)
Thread1674 = threading.Thread(target=decrypt_64)
Thread1675 = threading.Thread(target=decrypt_66)
Thread1676 = threading.Thread(target=decrypt_68)
Thread1677 = threading.Thread(target=decrypt_6excl)
Thread1678 = threading.Thread(target=decrypt_6dquote)
Thread1679 = threading.Thread(target=decrypt_6doll)
Thread1680 = threading.Thread(target=decrypt_6and)
Thread1681 = threading.Thread(target=decrypt_6quote)
Thread1682 = threading.Thread(target=decrypt_6par)
Thread1683 = threading.Thread(target=decrypt_6ast)
Thread1684 = threading.Thread(target=decrypt_6vir)
Thread1685 = threading.Thread(target=decrypt_6pp)
Thread1686 = threading.Thread(target=decrypt_6tp)
Thread1687 = threading.Thread(target=decrypt_6less)
Thread1688 = threading.Thread(target=decrypt_6more)
Thread1689 = threading.Thread(target=decrypt_6aro)
Thread1690 = threading.Thread(target=decrypt_6croc)
Thread1691 = threading.Thread(target=decrypt_6bsl)
Thread1692 = threading.Thread(target=decrypt_6circ)
Thread1693 = threading.Thread(target=decrypt_6esp)
Thread1694 = threading.Thread(target=decrypt_6cr)
Thread1695 = threading.Thread(target=decrypt_6hl)
Thread1696 = threading.Thread(target=decrypt_6tild)
Thread1697 = threading.Thread(target=decrypt_8a)
Thread1698 = threading.Thread(target=decrypt_8b)
Thread1699 = threading.Thread(target=decrypt_8d)
Thread1700 = threading.Thread(target=decrypt_8f)
Thread1701 = threading.Thread(target=decrypt_8h)
Thread1702 = threading.Thread(target=decrypt_8j)
Thread1703 = threading.Thread(target=decrypt_8l)
Thread1704 = threading.Thread(target=decrypt_8n)
Thread1705 = threading.Thread(target=decrypt_8p)
Thread1706 = threading.Thread(target=decrypt_8r)
Thread1707 = threading.Thread(target=decrypt_8t)
Thread1708 = threading.Thread(target=decrypt_8v)
Thread1709 = threading.Thread(target=decrypt_8x)
Thread1710 = threading.Thread(target=decrypt_8z)
Thread1711 = threading.Thread(target=decrypt_8A)
Thread1712 = threading.Thread(target=decrypt_8B)
Thread1713 = threading.Thread(target=decrypt_8D)
Thread1714 = threading.Thread(target=decrypt_8F)
Thread1715 = threading.Thread(target=decrypt_8H)
Thread1716 = threading.Thread(target=decrypt_8J)
Thread1717 = threading.Thread(target=decrypt_8L)
Thread1718 = threading.Thread(target=decrypt_8N)
Thread1719 = threading.Thread(target=decrypt_8P)
Thread1720 = threading.Thread(target=decrypt_8R)
Thread1721 = threading.Thread(target=decrypt_8T)
Thread1722 = threading.Thread(target=decrypt_8V)
Thread1723 = threading.Thread(target=decrypt_8X)
Thread1724 = threading.Thread(target=decrypt_8Z)
Thread1725 = threading.Thread(target=decrypt_80)
Thread1726 = threading.Thread(target=decrypt_82)
Thread1727 = threading.Thread(target=decrypt_84)
Thread1728 = threading.Thread(target=decrypt_86)
Thread1729 = threading.Thread(target=decrypt_88)
Thread1730 = threading.Thread(target=decrypt_8excl)
Thread1731 = threading.Thread(target=decrypt_8dquote)
Thread1732 = threading.Thread(target=decrypt_8doll)
Thread1733 = threading.Thread(target=decrypt_8and)
Thread1734 = threading.Thread(target=decrypt_8quote)
Thread1735 = threading.Thread(target=decrypt_8par)
Thread1736 = threading.Thread(target=decrypt_8ast)
Thread1737 = threading.Thread(target=decrypt_8vir)
Thread1738 = threading.Thread(target=decrypt_8pp)
Thread1739 = threading.Thread(target=decrypt_8tp)
Thread1740 = threading.Thread(target=decrypt_8less)
Thread1741 = threading.Thread(target=decrypt_8more)
Thread1742 = threading.Thread(target=decrypt_8aro)
Thread1743 = threading.Thread(target=decrypt_8croc)
Thread1744 = threading.Thread(target=decrypt_8bsl)
Thread1745 = threading.Thread(target=decrypt_8circ)
Thread1746 = threading.Thread(target=decrypt_8esp)
Thread1747 = threading.Thread(target=decrypt_8cr)
Thread1748 = threading.Thread(target=decrypt_8hl)
Thread1749 = threading.Thread(target=decrypt_8tild)
Thread1750 = threading.Thread(target=decrypt_excla)
Thread1751 = threading.Thread(target=decrypt_exclb)
Thread1752 = threading.Thread(target=decrypt_excld)
Thread1753 = threading.Thread(target=decrypt_exclf)
Thread1754 = threading.Thread(target=decrypt_exclh)
Thread1755 = threading.Thread(target=decrypt_exclj)
Thread1756 = threading.Thread(target=decrypt_excll)
Thread1757 = threading.Thread(target=decrypt_excln)
Thread1758 = threading.Thread(target=decrypt_exclp)
Thread1759 = threading.Thread(target=decrypt_exclr)
Thread1760 = threading.Thread(target=decrypt_exclt)
Thread1761 = threading.Thread(target=decrypt_exclv)
Thread1762 = threading.Thread(target=decrypt_exclx)
Thread1763 = threading.Thread(target=decrypt_exclz)
Thread1764 = threading.Thread(target=decrypt_exclA)
Thread1765 = threading.Thread(target=decrypt_exclB)
Thread1766 = threading.Thread(target=decrypt_exclD)
Thread1767 = threading.Thread(target=decrypt_exclF)
Thread1768 = threading.Thread(target=decrypt_exclH)
Thread1769 = threading.Thread(target=decrypt_exclJ)
Thread1770 = threading.Thread(target=decrypt_exclL)
Thread1771 = threading.Thread(target=decrypt_exclN)
Thread1772 = threading.Thread(target=decrypt_exclP)
Thread1773 = threading.Thread(target=decrypt_exclR)
Thread1774 = threading.Thread(target=decrypt_exclT)
Thread1775 = threading.Thread(target=decrypt_exclV)
Thread1776 = threading.Thread(target=decrypt_exclX)
Thread1777 = threading.Thread(target=decrypt_exclZ)
Thread1778 = threading.Thread(target=decrypt_excl0)
Thread1779 = threading.Thread(target=decrypt_excl2)
Thread1780 = threading.Thread(target=decrypt_excl4)
Thread1781 = threading.Thread(target=decrypt_excl6)
Thread1782 = threading.Thread(target=decrypt_excl8)
Thread1783 = threading.Thread(target=decrypt_exclexcl)
Thread1784 = threading.Thread(target=decrypt_excldquote)
Thread1785 = threading.Thread(target=decrypt_excldoll)
Thread1786 = threading.Thread(target=decrypt_excland)
Thread1787 = threading.Thread(target=decrypt_exclquote)
Thread1788 = threading.Thread(target=decrypt_exclpar)
Thread1789 = threading.Thread(target=decrypt_exclast)
Thread1790 = threading.Thread(target=decrypt_exclvir)
Thread1791 = threading.Thread(target=decrypt_exclpp)
Thread1792 = threading.Thread(target=decrypt_excltp)
Thread1793 = threading.Thread(target=decrypt_exclless)
Thread1794 = threading.Thread(target=decrypt_exclmore)
Thread1795 = threading.Thread(target=decrypt_exclaro)
Thread1796 = threading.Thread(target=decrypt_exclcroc)
Thread1797 = threading.Thread(target=decrypt_exclbsl)
Thread1798 = threading.Thread(target=decrypt_exclcirc)
Thread1799 = threading.Thread(target=decrypt_exclesp)
Thread1800 = threading.Thread(target=decrypt_exclcr)
Thread1801 = threading.Thread(target=decrypt_exclhl)
Thread1802 = threading.Thread(target=decrypt_excltild)
Thread1803 = threading.Thread(target=decrypt_doubquota)
Thread1804 = threading.Thread(target=decrypt_doubquotb)
Thread1805 = threading.Thread(target=decrypt_doubquotd)
Thread1806 = threading.Thread(target=decrypt_doubquotf)
Thread1807 = threading.Thread(target=decrypt_doubquoth)
Thread1808 = threading.Thread(target=decrypt_doubquotj)
Thread1809 = threading.Thread(target=decrypt_doubquotl)
Thread1810 = threading.Thread(target=decrypt_doubquotn)
Thread1811 = threading.Thread(target=decrypt_doubquotp)
Thread1812 = threading.Thread(target=decrypt_doubquotr)
Thread1813 = threading.Thread(target=decrypt_doubquott)
Thread1814 = threading.Thread(target=decrypt_doubquotv)
Thread1815 = threading.Thread(target=decrypt_doubquotx)
Thread1816 = threading.Thread(target=decrypt_doubquotz)
Thread1817 = threading.Thread(target=decrypt_doubquotA)
Thread1818 = threading.Thread(target=decrypt_doubquotB)
Thread1819 = threading.Thread(target=decrypt_doubquotD)
Thread1820 = threading.Thread(target=decrypt_doubquotF)
Thread1821 = threading.Thread(target=decrypt_doubquotH)
Thread1822 = threading.Thread(target=decrypt_doubquotJ)
Thread1823 = threading.Thread(target=decrypt_doubquotL)
Thread1824 = threading.Thread(target=decrypt_doubquotN)
Thread1825 = threading.Thread(target=decrypt_doubquotP)
Thread1826 = threading.Thread(target=decrypt_doubquotR)
Thread1827 = threading.Thread(target=decrypt_doubquotT)
Thread1828 = threading.Thread(target=decrypt_doubquotV)
Thread1829 = threading.Thread(target=decrypt_doubquotX)
Thread1830 = threading.Thread(target=decrypt_doubquotZ)
Thread1831 = threading.Thread(target=decrypt_doubquot0)
Thread1832 = threading.Thread(target=decrypt_doubquot2)
Thread1833 = threading.Thread(target=decrypt_doubquot4)
Thread1834 = threading.Thread(target=decrypt_doubquot6)
Thread1835 = threading.Thread(target=decrypt_doubquot8)
Thread1836 = threading.Thread(target=decrypt_doubquotexcl)
Thread1837 = threading.Thread(target=decrypt_doubquotdquote)
Thread1838 = threading.Thread(target=decrypt_doubquotdoll)
Thread1839 = threading.Thread(target=decrypt_doubquotand)
Thread1840 = threading.Thread(target=decrypt_doubquotquote)
Thread1841 = threading.Thread(target=decrypt_doubquotpar)
Thread1842 = threading.Thread(target=decrypt_doubquotast)
Thread1843 = threading.Thread(target=decrypt_doubquotvir)
Thread1844 = threading.Thread(target=decrypt_doubquotpp)
Thread1845 = threading.Thread(target=decrypt_doubquottp)
Thread1846 = threading.Thread(target=decrypt_doubquotless)
Thread1847 = threading.Thread(target=decrypt_doubquotmore)
Thread1848 = threading.Thread(target=decrypt_doubquotaro)
Thread1849 = threading.Thread(target=decrypt_doubquotcroc)
Thread1850 = threading.Thread(target=decrypt_doubquotbsl)
Thread1851 = threading.Thread(target=decrypt_doubquotcirc)
Thread1852 = threading.Thread(target=decrypt_doubquotesp)
Thread1853 = threading.Thread(target=decrypt_doubquotcr)
Thread1854 = threading.Thread(target=decrypt_doubquothl)
Thread1855 = threading.Thread(target=decrypt_doubquottild)
Thread1856 = threading.Thread(target=decrypt_dolla)
Thread1857 = threading.Thread(target=decrypt_dollb)
Thread1858 = threading.Thread(target=decrypt_dolld)
Thread1859 = threading.Thread(target=decrypt_dollf)
Thread1860 = threading.Thread(target=decrypt_dollh)
Thread1861 = threading.Thread(target=decrypt_dollj)
Thread1862 = threading.Thread(target=decrypt_dolll)
Thread1863 = threading.Thread(target=decrypt_dolln)
Thread1864 = threading.Thread(target=decrypt_dollp)
Thread1865 = threading.Thread(target=decrypt_dollr)
Thread1866 = threading.Thread(target=decrypt_dollt)
Thread1867 = threading.Thread(target=decrypt_dollv)
Thread1868 = threading.Thread(target=decrypt_dollx)
Thread1869 = threading.Thread(target=decrypt_dollz)
Thread1870 = threading.Thread(target=decrypt_dollA)
Thread1871 = threading.Thread(target=decrypt_dollB)
Thread1872 = threading.Thread(target=decrypt_dollD)
Thread1873 = threading.Thread(target=decrypt_dollF)
Thread1874 = threading.Thread(target=decrypt_dollH)
Thread1875 = threading.Thread(target=decrypt_dollJ)
Thread1876 = threading.Thread(target=decrypt_dollL)
Thread1877 = threading.Thread(target=decrypt_dollN)
Thread1878 = threading.Thread(target=decrypt_dollP)
Thread1879 = threading.Thread(target=decrypt_dollR)
Thread1880 = threading.Thread(target=decrypt_dollT)
Thread1881 = threading.Thread(target=decrypt_dollV)
Thread1882 = threading.Thread(target=decrypt_dollX)
Thread1883 = threading.Thread(target=decrypt_dollZ)
Thread1884 = threading.Thread(target=decrypt_doll0)
Thread1885 = threading.Thread(target=decrypt_doll2)
Thread1886 = threading.Thread(target=decrypt_doll4)
Thread1887 = threading.Thread(target=decrypt_doll6)
Thread1888 = threading.Thread(target=decrypt_doll8)
Thread1889 = threading.Thread(target=decrypt_dollexcl)
Thread1890 = threading.Thread(target=decrypt_dolldquote)
Thread1891 = threading.Thread(target=decrypt_dolldoll)
Thread1892 = threading.Thread(target=decrypt_dolland)
Thread1893 = threading.Thread(target=decrypt_dollquote)
Thread1894 = threading.Thread(target=decrypt_dollpar)
Thread1895 = threading.Thread(target=decrypt_dollast)
Thread1896 = threading.Thread(target=decrypt_dollvir)
Thread1897 = threading.Thread(target=decrypt_dollpp)
Thread1898 = threading.Thread(target=decrypt_dolltp)
Thread1899 = threading.Thread(target=decrypt_dollless)
Thread1900 = threading.Thread(target=decrypt_dollmore)
Thread1901 = threading.Thread(target=decrypt_dollaro)
Thread1902 = threading.Thread(target=decrypt_dollcroc)
Thread1903 = threading.Thread(target=decrypt_dollbsl)
Thread1904 = threading.Thread(target=decrypt_dollcirc)
Thread1905 = threading.Thread(target=decrypt_dollesp)
Thread1906 = threading.Thread(target=decrypt_dollcr)
Thread1907 = threading.Thread(target=decrypt_dollhl)
Thread1908 = threading.Thread(target=decrypt_dolltild)
Thread1909 = threading.Thread(target=decrypt_quota)
Thread1910 = threading.Thread(target=decrypt_quotb)
Thread1911 = threading.Thread(target=decrypt_quotd)
Thread1912 = threading.Thread(target=decrypt_quotf)
Thread1913 = threading.Thread(target=decrypt_quoth)
Thread1914 = threading.Thread(target=decrypt_quotj)
Thread1915 = threading.Thread(target=decrypt_quotl)
Thread1916 = threading.Thread(target=decrypt_quotn)
Thread1917 = threading.Thread(target=decrypt_quotp)
Thread1918 = threading.Thread(target=decrypt_quotr)
Thread1919 = threading.Thread(target=decrypt_quott)
Thread1920 = threading.Thread(target=decrypt_quotv)
Thread1921 = threading.Thread(target=decrypt_quotx)
Thread1922 = threading.Thread(target=decrypt_quotz)
Thread1923 = threading.Thread(target=decrypt_quotA)
Thread1924 = threading.Thread(target=decrypt_quotB)
Thread1925 = threading.Thread(target=decrypt_quotD)
Thread1926 = threading.Thread(target=decrypt_quotF)
Thread1927 = threading.Thread(target=decrypt_quotH)
Thread1928 = threading.Thread(target=decrypt_quotJ)
Thread1929 = threading.Thread(target=decrypt_quotL)
Thread1930 = threading.Thread(target=decrypt_quotN)
Thread1931 = threading.Thread(target=decrypt_quotP)
Thread1932 = threading.Thread(target=decrypt_quotR)
Thread1933 = threading.Thread(target=decrypt_quotT)
Thread1934 = threading.Thread(target=decrypt_quotV)
Thread1935 = threading.Thread(target=decrypt_quotX)
Thread1936 = threading.Thread(target=decrypt_quotZ)
Thread1937 = threading.Thread(target=decrypt_quot0)
Thread1938 = threading.Thread(target=decrypt_quot2)
Thread1939 = threading.Thread(target=decrypt_quot4)
Thread1940 = threading.Thread(target=decrypt_quot6)
Thread1941 = threading.Thread(target=decrypt_quot8)
Thread1942 = threading.Thread(target=decrypt_quotexcl)
Thread1943 = threading.Thread(target=decrypt_quotdquote)
Thread1944 = threading.Thread(target=decrypt_quotdoll)
Thread1945 = threading.Thread(target=decrypt_quotand)
Thread1946 = threading.Thread(target=decrypt_quotquote)
Thread1947 = threading.Thread(target=decrypt_quotpar)
Thread1948 = threading.Thread(target=decrypt_quotast)
Thread1949 = threading.Thread(target=decrypt_quotvir)
Thread1950 = threading.Thread(target=decrypt_quotpp)
Thread1951 = threading.Thread(target=decrypt_quottp)
Thread1952 = threading.Thread(target=decrypt_quotless)
Thread1953 = threading.Thread(target=decrypt_quotmore)
Thread1954 = threading.Thread(target=decrypt_quotaro)
Thread1955 = threading.Thread(target=decrypt_quotcroc)
Thread1956 = threading.Thread(target=decrypt_quotbsl)
Thread1957 = threading.Thread(target=decrypt_quotcirc)
Thread1958 = threading.Thread(target=decrypt_quotesp)
Thread1959 = threading.Thread(target=decrypt_quotcr)
Thread1960 = threading.Thread(target=decrypt_quothl)
Thread1961 = threading.Thread(target=decrypt_quottild)
Thread1962 = threading.Thread(target=decrypt_parena)
Thread1963 = threading.Thread(target=decrypt_parenb)
Thread1964 = threading.Thread(target=decrypt_parend)
Thread1965 = threading.Thread(target=decrypt_parenf)
Thread1966 = threading.Thread(target=decrypt_parenh)
Thread1967 = threading.Thread(target=decrypt_parenj)
Thread1968 = threading.Thread(target=decrypt_parenl)
Thread1969 = threading.Thread(target=decrypt_parenn)
Thread1970 = threading.Thread(target=decrypt_parenp)
Thread1971 = threading.Thread(target=decrypt_parenr)
Thread1972 = threading.Thread(target=decrypt_parent)
Thread1973 = threading.Thread(target=decrypt_parenv)
Thread1974 = threading.Thread(target=decrypt_parenx)
Thread1975 = threading.Thread(target=decrypt_parenz)
Thread1976 = threading.Thread(target=decrypt_parenA)
Thread1977 = threading.Thread(target=decrypt_parenB)
Thread1978 = threading.Thread(target=decrypt_parenD)
Thread1979 = threading.Thread(target=decrypt_parenF)
Thread1980 = threading.Thread(target=decrypt_parenH)
Thread1981 = threading.Thread(target=decrypt_parenJ)
Thread1982 = threading.Thread(target=decrypt_parenL)
Thread1983 = threading.Thread(target=decrypt_parenN)
Thread1984 = threading.Thread(target=decrypt_parenP)
Thread1985 = threading.Thread(target=decrypt_parenR)
Thread1986 = threading.Thread(target=decrypt_parenT)
Thread1987 = threading.Thread(target=decrypt_parenV)
Thread1988 = threading.Thread(target=decrypt_parenX)
Thread1989 = threading.Thread(target=decrypt_parenZ)
Thread1990 = threading.Thread(target=decrypt_paren0)
Thread1991 = threading.Thread(target=decrypt_paren2)
Thread1992 = threading.Thread(target=decrypt_paren4)
Thread1993 = threading.Thread(target=decrypt_paren6)
Thread1994 = threading.Thread(target=decrypt_paren8)
Thread1995 = threading.Thread(target=decrypt_parenexcl)
Thread1996 = threading.Thread(target=decrypt_parendquote)
Thread1997 = threading.Thread(target=decrypt_parendoll)
Thread1998 = threading.Thread(target=decrypt_parenand)
Thread1999 = threading.Thread(target=decrypt_parenquote)
Thread2000 = threading.Thread(target=decrypt_parpara)
Thread2001 = threading.Thread(target=decrypt_parenast)
Thread2002 = threading.Thread(target=decrypt_parenvir)
Thread2003 = threading.Thread(target=decrypt_parenpp)
Thread2004 = threading.Thread(target=decrypt_parentp)
Thread2005 = threading.Thread(target=decrypt_parenless)
Thread2006 = threading.Thread(target=decrypt_parenmore)
Thread2007 = threading.Thread(target=decrypt_parenaro)
Thread2008 = threading.Thread(target=decrypt_parencroc)
Thread2009 = threading.Thread(target=decrypt_parenbsl)
Thread2010 = threading.Thread(target=decrypt_parencirc)
Thread2011 = threading.Thread(target=decrypt_parenesp)
Thread2012 = threading.Thread(target=decrypt_parencr)
Thread2013 = threading.Thread(target=decrypt_parenhl)
Thread2014 = threading.Thread(target=decrypt_parentild)
Thread2015 = threading.Thread(target=decrypt_espea)
Thread2016 = threading.Thread(target=decrypt_espeb)
Thread2017 = threading.Thread(target=decrypt_esped)
Thread2018 = threading.Thread(target=decrypt_espef)
Thread2019 = threading.Thread(target=decrypt_espeh)
Thread2020 = threading.Thread(target=decrypt_espej)
Thread2021 = threading.Thread(target=decrypt_espel)
Thread2022 = threading.Thread(target=decrypt_espen)
Thread2023 = threading.Thread(target=decrypt_espep)
Thread2024 = threading.Thread(target=decrypt_esper)
Thread2025 = threading.Thread(target=decrypt_espet)
Thread2026 = threading.Thread(target=decrypt_espev)
Thread2027 = threading.Thread(target=decrypt_espex)
Thread2028 = threading.Thread(target=decrypt_espez)
Thread2029 = threading.Thread(target=decrypt_espeA)
Thread2030 = threading.Thread(target=decrypt_espeB)
Thread2031 = threading.Thread(target=decrypt_espeD)
Thread2032 = threading.Thread(target=decrypt_espeF)
Thread2033 = threading.Thread(target=decrypt_espeH)
Thread2034 = threading.Thread(target=decrypt_espeJ)
Thread2035 = threading.Thread(target=decrypt_espeL)
Thread2036 = threading.Thread(target=decrypt_espeN)
Thread2037 = threading.Thread(target=decrypt_espeP)
Thread2038 = threading.Thread(target=decrypt_espeR)
Thread2039 = threading.Thread(target=decrypt_espeT)
Thread2040 = threading.Thread(target=decrypt_espeV)
Thread2041 = threading.Thread(target=decrypt_espeX)
Thread2042 = threading.Thread(target=decrypt_espeZ)
Thread2043 = threading.Thread(target=decrypt_espe0)
Thread2044 = threading.Thread(target=decrypt_espe2)
Thread2045 = threading.Thread(target=decrypt_espe4)
Thread2046 = threading.Thread(target=decrypt_espe6)
Thread2047 = threading.Thread(target=decrypt_espe8)
Thread2048 = threading.Thread(target=decrypt_espeexcl)
Thread2049 = threading.Thread(target=decrypt_espedquote)
Thread2050 = threading.Thread(target=decrypt_espedoll)
Thread2051 = threading.Thread(target=decrypt_espeand)
Thread2052 = threading.Thread(target=decrypt_espequote)
Thread2053 = threading.Thread(target=decrypt_astpar)
Thread2054 = threading.Thread(target=decrypt_espeast)
Thread2055 = threading.Thread(target=decrypt_espevir)
Thread2056 = threading.Thread(target=decrypt_espepp)
Thread2057 = threading.Thread(target=decrypt_espetp)
Thread2058 = threading.Thread(target=decrypt_espeless)
Thread2059 = threading.Thread(target=decrypt_espemore)
Thread2060 = threading.Thread(target=decrypt_espearo)
Thread2061 = threading.Thread(target=decrypt_especroc)
Thread2062 = threading.Thread(target=decrypt_espebsl)
Thread2063 = threading.Thread(target=decrypt_especirc)
Thread2064 = threading.Thread(target=decrypt_espeesp)
Thread2065 = threading.Thread(target=decrypt_especr)
Thread2066 = threading.Thread(target=decrypt_espehl)
Thread2067 = threading.Thread(target=decrypt_espetild)
Thread2068 = threading.Thread(target=decrypt_vira)
Thread2069 = threading.Thread(target=decrypt_virb)
Thread2070 = threading.Thread(target=decrypt_vird)
Thread2071 = threading.Thread(target=decrypt_virf)
Thread2072 = threading.Thread(target=decrypt_virh)
Thread2073 = threading.Thread(target=decrypt_virj)
Thread2074 = threading.Thread(target=decrypt_virl)
Thread2075 = threading.Thread(target=decrypt_virn)
Thread2076 = threading.Thread(target=decrypt_virp)
Thread2077 = threading.Thread(target=decrypt_virr)
Thread2078 = threading.Thread(target=decrypt_virt)
Thread2079 = threading.Thread(target=decrypt_virv)
Thread2080 = threading.Thread(target=decrypt_virx)
Thread2081 = threading.Thread(target=decrypt_virz)
Thread2082 = threading.Thread(target=decrypt_virA)
Thread2083 = threading.Thread(target=decrypt_virB)
Thread2084 = threading.Thread(target=decrypt_virD)
Thread2085 = threading.Thread(target=decrypt_virF)
Thread2086 = threading.Thread(target=decrypt_virH)
Thread2087 = threading.Thread(target=decrypt_virJ)
Thread2088 = threading.Thread(target=decrypt_virL)
Thread2089 = threading.Thread(target=decrypt_virN)
Thread2090 = threading.Thread(target=decrypt_virP)
Thread2091 = threading.Thread(target=decrypt_virR)
Thread2092 = threading.Thread(target=decrypt_virT)
Thread2093 = threading.Thread(target=decrypt_virV)
Thread2094 = threading.Thread(target=decrypt_virX)
Thread2095 = threading.Thread(target=decrypt_virZ)
Thread2096 = threading.Thread(target=decrypt_vir0)
Thread2097 = threading.Thread(target=decrypt_vir2)
Thread2098 = threading.Thread(target=decrypt_vir4)
Thread2099 = threading.Thread(target=decrypt_vir6)
Thread2100 = threading.Thread(target=decrypt_vir8)
Thread2101 = threading.Thread(target=decrypt_virexcl)
Thread2102 = threading.Thread(target=decrypt_virdquote)
Thread2103 = threading.Thread(target=decrypt_virdoll)
Thread2104 = threading.Thread(target=decrypt_virand)
Thread2105 = threading.Thread(target=decrypt_virquote)
Thread2106 = threading.Thread(target=decrypt_virpar)
Thread2107 = threading.Thread(target=decrypt_virast)
Thread2108 = threading.Thread(target=decrypt_virvir)
Thread2109 = threading.Thread(target=decrypt_virpp)
Thread2110 = threading.Thread(target=decrypt_virtp)
Thread2111 = threading.Thread(target=decrypt_virless)
Thread2112 = threading.Thread(target=decrypt_virmore)
Thread2113 = threading.Thread(target=decrypt_viraro)
Thread2114 = threading.Thread(target=decrypt_vircroc)
Thread2115 = threading.Thread(target=decrypt_virbsl)
Thread2116 = threading.Thread(target=decrypt_vircirc)
Thread2117 = threading.Thread(target=decrypt_viresp)
Thread2118 = threading.Thread(target=decrypt_vircr)
Thread2119 = threading.Thread(target=decrypt_virhl)
Thread2120 = threading.Thread(target=decrypt_virtild)
Thread2121 = threading.Thread(target=decrypt_poina)
Thread2122 = threading.Thread(target=decrypt_poinb)
Thread2123 = threading.Thread(target=decrypt_poind)
Thread2124 = threading.Thread(target=decrypt_poinf)
Thread2125 = threading.Thread(target=decrypt_poinh)
Thread2126 = threading.Thread(target=decrypt_poinj)
Thread2127 = threading.Thread(target=decrypt_poinl)
Thread2128 = threading.Thread(target=decrypt_poinn)
Thread2129 = threading.Thread(target=decrypt_poinp)
Thread2130 = threading.Thread(target=decrypt_poinr)
Thread2131 = threading.Thread(target=decrypt_point)
Thread2132 = threading.Thread(target=decrypt_poinv)
Thread2133 = threading.Thread(target=decrypt_poinx)
Thread2134 = threading.Thread(target=decrypt_poinz)
Thread2135 = threading.Thread(target=decrypt_poinA)
Thread2136 = threading.Thread(target=decrypt_poinB)
Thread2137 = threading.Thread(target=decrypt_poinD)
Thread2138 = threading.Thread(target=decrypt_poinF)
Thread2139 = threading.Thread(target=decrypt_poinH)
Thread2140 = threading.Thread(target=decrypt_poinJ)
Thread2141 = threading.Thread(target=decrypt_poinL)
Thread2142 = threading.Thread(target=decrypt_poinN)
Thread2143 = threading.Thread(target=decrypt_poinP)
Thread2144 = threading.Thread(target=decrypt_poinR)
Thread2145 = threading.Thread(target=decrypt_poinT)
Thread2146 = threading.Thread(target=decrypt_poinV)
Thread2147 = threading.Thread(target=decrypt_poinX)
Thread2148 = threading.Thread(target=decrypt_poinZ)
Thread2149 = threading.Thread(target=decrypt_poin0)
Thread2150 = threading.Thread(target=decrypt_poin2)
Thread2151 = threading.Thread(target=decrypt_poin4)
Thread2152 = threading.Thread(target=decrypt_poin6)
Thread2153 = threading.Thread(target=decrypt_poin8)
Thread2154 = threading.Thread(target=decrypt_poinexcl)
Thread2155 = threading.Thread(target=decrypt_poindquote)
Thread2156 = threading.Thread(target=decrypt_poindoll)
Thread2157 = threading.Thread(target=decrypt_poinand)
Thread2158 = threading.Thread(target=decrypt_poinquote)
Thread2159 = threading.Thread(target=decrypt_pppar)
Thread2160 = threading.Thread(target=decrypt_poinast)
Thread2161 = threading.Thread(target=decrypt_poinvir)
Thread2162 = threading.Thread(target=decrypt_poinpp)
Thread2163 = threading.Thread(target=decrypt_pointp)
Thread2164 = threading.Thread(target=decrypt_poinless)
Thread2165 = threading.Thread(target=decrypt_poinmore)
Thread2166 = threading.Thread(target=decrypt_poinaro)
Thread2167 = threading.Thread(target=decrypt_poincroc)
Thread2168 = threading.Thread(target=decrypt_poinbsl)
Thread2169 = threading.Thread(target=decrypt_poincirc)
Thread2170 = threading.Thread(target=decrypt_poinesp)
Thread2171 = threading.Thread(target=decrypt_poincr)
Thread2172 = threading.Thread(target=decrypt_poinhl)
Thread2173 = threading.Thread(target=decrypt_pointild)
Thread2174 = threading.Thread(target=decrypt_doubpoina)
Thread2175 = threading.Thread(target=decrypt_doubpoinb)
Thread2176 = threading.Thread(target=decrypt_doubpoind)
Thread2177 = threading.Thread(target=decrypt_doubpoinf)
Thread2178 = threading.Thread(target=decrypt_doubpoinh)
Thread2179 = threading.Thread(target=decrypt_doubpoinj)
Thread2180 = threading.Thread(target=decrypt_doubpoinl)
Thread2181 = threading.Thread(target=decrypt_doubpoinn)
Thread2182 = threading.Thread(target=decrypt_doubpoinp)
Thread2183 = threading.Thread(target=decrypt_doubpoinr)
Thread2184 = threading.Thread(target=decrypt_doubpoint)
Thread2185 = threading.Thread(target=decrypt_doubpoinv)
Thread2186 = threading.Thread(target=decrypt_doubpoinx)
Thread2187 = threading.Thread(target=decrypt_doubpoinz)
Thread2188 = threading.Thread(target=decrypt_doubpoinA)
Thread2189 = threading.Thread(target=decrypt_doubpoinB)
Thread2190 = threading.Thread(target=decrypt_doubpoinD)
Thread2191 = threading.Thread(target=decrypt_doubpoinF)
Thread2192 = threading.Thread(target=decrypt_doubpoinH)
Thread2193 = threading.Thread(target=decrypt_doubpoinJ)
Thread2194 = threading.Thread(target=decrypt_doubpoinL)
Thread2195 = threading.Thread(target=decrypt_doubpoinN)
Thread2196 = threading.Thread(target=decrypt_doubpoinP)
Thread2197 = threading.Thread(target=decrypt_doubpoinR)
Thread2198 = threading.Thread(target=decrypt_doubpoinT)
Thread2199 = threading.Thread(target=decrypt_doubpoinV)
Thread2200 = threading.Thread(target=decrypt_doubpoinX)
Thread2201 = threading.Thread(target=decrypt_doubpoinZ)
Thread2202 = threading.Thread(target=decrypt_doubpoin0)
Thread2203 = threading.Thread(target=decrypt_doubpoin2)
Thread2204 = threading.Thread(target=decrypt_doubpoin4)
Thread2205 = threading.Thread(target=decrypt_doubpoin6)
Thread2206 = threading.Thread(target=decrypt_doubpoin8)
Thread2207 = threading.Thread(target=decrypt_doubpoinexcl)
Thread2208 = threading.Thread(target=decrypt_doubpoindquote)
Thread2209 = threading.Thread(target=decrypt_doubpoindoll)
Thread2210 = threading.Thread(target=decrypt_doubpoinand)
Thread2211 = threading.Thread(target=decrypt_doubpoinquote)
Thread2212 = threading.Thread(target=decrypt_tppar)
Thread2213 = threading.Thread(target=decrypt_doubpoinast)
Thread2214 = threading.Thread(target=decrypt_doubpoinvir)
Thread2215 = threading.Thread(target=decrypt_doubpoinpp)
Thread2216 = threading.Thread(target=decrypt_doubpointp)
Thread2217 = threading.Thread(target=decrypt_doubpoinless)
Thread2218 = threading.Thread(target=decrypt_doubpoinmore)
Thread2219 = threading.Thread(target=decrypt_doubpoinaro)
Thread2220 = threading.Thread(target=decrypt_doubpoincroc)
Thread2221 = threading.Thread(target=decrypt_doubpoinbsl)
Thread2222 = threading.Thread(target=decrypt_doubpoincirc)
Thread2223 = threading.Thread(target=decrypt_doubpoinesp)
Thread2224 = threading.Thread(target=decrypt_doubpoincr)
Thread2225 = threading.Thread(target=decrypt_doubpoinhl)
Thread2226 = threading.Thread(target=decrypt_doubpointild)
Thread2227 = threading.Thread(target=decrypt_lessa)
Thread2228 = threading.Thread(target=decrypt_lessb)
Thread2229 = threading.Thread(target=decrypt_lessd)
Thread2230 = threading.Thread(target=decrypt_lessf)
Thread2231 = threading.Thread(target=decrypt_lessh)
Thread2232 = threading.Thread(target=decrypt_lessj)
Thread2233 = threading.Thread(target=decrypt_lessl)
Thread2234 = threading.Thread(target=decrypt_lessn)
Thread2235 = threading.Thread(target=decrypt_lessp)
Thread2236 = threading.Thread(target=decrypt_lessr)
Thread2237 = threading.Thread(target=decrypt_lesst)
Thread2238 = threading.Thread(target=decrypt_lessv)
Thread2239 = threading.Thread(target=decrypt_lessx)
Thread2240 = threading.Thread(target=decrypt_lessz)
Thread2241 = threading.Thread(target=decrypt_lessA)
Thread2242 = threading.Thread(target=decrypt_lessB)
Thread2243 = threading.Thread(target=decrypt_lessD)
Thread2244 = threading.Thread(target=decrypt_lessF)
Thread2245 = threading.Thread(target=decrypt_lessH)
Thread2246 = threading.Thread(target=decrypt_lessJ)
Thread2247 = threading.Thread(target=decrypt_lessL)
Thread2248 = threading.Thread(target=decrypt_lessN)
Thread2249 = threading.Thread(target=decrypt_lessP)
Thread2250 = threading.Thread(target=decrypt_lessR)
Thread2251 = threading.Thread(target=decrypt_lessT)
Thread2252 = threading.Thread(target=decrypt_lessV)
Thread2253 = threading.Thread(target=decrypt_lessX)
Thread2254 = threading.Thread(target=decrypt_lessZ)
Thread2255 = threading.Thread(target=decrypt_less0)
Thread2256 = threading.Thread(target=decrypt_less2)
Thread2257 = threading.Thread(target=decrypt_less4)
Thread2258 = threading.Thread(target=decrypt_less6)
Thread2259 = threading.Thread(target=decrypt_less8)
Thread2260 = threading.Thread(target=decrypt_lessexcl)
Thread2261 = threading.Thread(target=decrypt_lessdquote)
Thread2262 = threading.Thread(target=decrypt_lessdoll)
Thread2263 = threading.Thread(target=decrypt_lessand)
Thread2264 = threading.Thread(target=decrypt_lessquote)
Thread2265 = threading.Thread(target=decrypt_morepar)
Thread2266 = threading.Thread(target=decrypt_lessast)
Thread2267 = threading.Thread(target=decrypt_lessvir)
Thread2268 = threading.Thread(target=decrypt_lesspp)
Thread2269 = threading.Thread(target=decrypt_lesstp)
Thread2270 = threading.Thread(target=decrypt_lessless)
Thread2271 = threading.Thread(target=decrypt_lessmore)
Thread2272 = threading.Thread(target=decrypt_lessaro)
Thread2273 = threading.Thread(target=decrypt_lesscroc)
Thread2274 = threading.Thread(target=decrypt_lessbsl)
Thread2275 = threading.Thread(target=decrypt_lesscirc)
Thread2276 = threading.Thread(target=decrypt_lessesp)
Thread2277 = threading.Thread(target=decrypt_lesscr)
Thread2278 = threading.Thread(target=decrypt_lesshl)
Thread2279 = threading.Thread(target=decrypt_lesstild)
Thread2280 = threading.Thread(target=decrypt_morea)
Thread2281 = threading.Thread(target=decrypt_moreb)
Thread2282 = threading.Thread(target=decrypt_mored)
Thread2283 = threading.Thread(target=decrypt_moref)
Thread2284 = threading.Thread(target=decrypt_moreh)
Thread2285 = threading.Thread(target=decrypt_morej)
Thread2286 = threading.Thread(target=decrypt_morel)
Thread2287 = threading.Thread(target=decrypt_moren)
Thread2288 = threading.Thread(target=decrypt_morep)
Thread2289 = threading.Thread(target=decrypt_morer)
Thread2290 = threading.Thread(target=decrypt_moret)
Thread2291 = threading.Thread(target=decrypt_morev)
Thread2292 = threading.Thread(target=decrypt_morex)
Thread2293 = threading.Thread(target=decrypt_morez)
Thread2294 = threading.Thread(target=decrypt_moreA)
Thread2295 = threading.Thread(target=decrypt_moreB)
Thread2296 = threading.Thread(target=decrypt_moreD)
Thread2297 = threading.Thread(target=decrypt_moreF)
Thread2298 = threading.Thread(target=decrypt_moreH)
Thread2299 = threading.Thread(target=decrypt_moreJ)
Thread2300 = threading.Thread(target=decrypt_moreL)
Thread2301 = threading.Thread(target=decrypt_moreN)
Thread2302 = threading.Thread(target=decrypt_moreP)
Thread2303 = threading.Thread(target=decrypt_moreR)
Thread2304 = threading.Thread(target=decrypt_moreT)
Thread2305 = threading.Thread(target=decrypt_moreV)
Thread2306 = threading.Thread(target=decrypt_moreX)
Thread2307 = threading.Thread(target=decrypt_moreZ)
Thread2308 = threading.Thread(target=decrypt_more0)
Thread2309 = threading.Thread(target=decrypt_more2)
Thread2310 = threading.Thread(target=decrypt_more4)
Thread2311 = threading.Thread(target=decrypt_more6)
Thread2312 = threading.Thread(target=decrypt_more8)
Thread2313 = threading.Thread(target=decrypt_moreexcl)
Thread2314 = threading.Thread(target=decrypt_moredquote)
Thread2315 = threading.Thread(target=decrypt_moredoll)
Thread2316 = threading.Thread(target=decrypt_moreand)
Thread2317 = threading.Thread(target=decrypt_morequote)
Thread2318 = threading.Thread(target=decrypt_lesspar)
Thread2319 = threading.Thread(target=decrypt_moreast)
Thread2320 = threading.Thread(target=decrypt_morevir)
Thread2321 = threading.Thread(target=decrypt_morepp)
Thread2322 = threading.Thread(target=decrypt_moretp)
Thread2323 = threading.Thread(target=decrypt_moreless)
Thread2324 = threading.Thread(target=decrypt_moremore)
Thread2325 = threading.Thread(target=decrypt_morearo)
Thread2326 = threading.Thread(target=decrypt_morecroc)
Thread2327 = threading.Thread(target=decrypt_morebsl)
Thread2328 = threading.Thread(target=decrypt_morecirc)
Thread2329 = threading.Thread(target=decrypt_moreesp)
Thread2330 = threading.Thread(target=decrypt_morecr)
Thread2331 = threading.Thread(target=decrypt_morehl)
Thread2332 = threading.Thread(target=decrypt_moretild)
Thread2333 = threading.Thread(target=decrypt_arobasa)
Thread2334 = threading.Thread(target=decrypt_arobasb)
Thread2335 = threading.Thread(target=decrypt_arobasd)
Thread2336 = threading.Thread(target=decrypt_arobasf)
Thread2337 = threading.Thread(target=decrypt_arobash)
Thread2338 = threading.Thread(target=decrypt_arobasj)
Thread2339 = threading.Thread(target=decrypt_arobasl)
Thread2340 = threading.Thread(target=decrypt_arobasn)
Thread2341 = threading.Thread(target=decrypt_arobasp)
Thread2342 = threading.Thread(target=decrypt_arobasr)
Thread2343 = threading.Thread(target=decrypt_arobast)
Thread2344 = threading.Thread(target=decrypt_arobasv)
Thread2345 = threading.Thread(target=decrypt_arobasx)
Thread2346 = threading.Thread(target=decrypt_arobasz)
Thread2347 = threading.Thread(target=decrypt_arobasA)
Thread2348 = threading.Thread(target=decrypt_arobasB)
Thread2349 = threading.Thread(target=decrypt_arobasD)
Thread2350 = threading.Thread(target=decrypt_arobasF)
Thread2351 = threading.Thread(target=decrypt_arobasH)
Thread2352 = threading.Thread(target=decrypt_arobasJ)
Thread2353 = threading.Thread(target=decrypt_arobasL)
Thread2354 = threading.Thread(target=decrypt_arobasN)
Thread2355 = threading.Thread(target=decrypt_arobasP)
Thread2356 = threading.Thread(target=decrypt_arobasR)
Thread2357 = threading.Thread(target=decrypt_arobasT)
Thread2358 = threading.Thread(target=decrypt_arobasV)
Thread2359 = threading.Thread(target=decrypt_arobasX)
Thread2360 = threading.Thread(target=decrypt_arobasZ)
Thread2361 = threading.Thread(target=decrypt_arobas0)
Thread2362 = threading.Thread(target=decrypt_arobas2)
Thread2363 = threading.Thread(target=decrypt_arobas4)
Thread2364 = threading.Thread(target=decrypt_arobas6)
Thread2365 = threading.Thread(target=decrypt_arobas8)
Thread2366 = threading.Thread(target=decrypt_arobasexcl)
Thread2367 = threading.Thread(target=decrypt_arobasdquote)
Thread2368 = threading.Thread(target=decrypt_arobasdoll)
Thread2369 = threading.Thread(target=decrypt_arobasand)
Thread2370 = threading.Thread(target=decrypt_arobasquote)
Thread2371 = threading.Thread(target=decrypt_aropar)
Thread2372 = threading.Thread(target=decrypt_arobasast)
Thread2373 = threading.Thread(target=decrypt_arobasvir)
Thread2374 = threading.Thread(target=decrypt_arobaspp)
Thread2375 = threading.Thread(target=decrypt_arobastp)
Thread2376 = threading.Thread(target=decrypt_arobasless)
Thread2377 = threading.Thread(target=decrypt_arobasmore)
Thread2378 = threading.Thread(target=decrypt_arobasaro)
Thread2379 = threading.Thread(target=decrypt_arobascroc)
Thread2380 = threading.Thread(target=decrypt_arobasbsl)
Thread2381 = threading.Thread(target=decrypt_arobascirc)
Thread2382 = threading.Thread(target=decrypt_arobasesp)
Thread2383 = threading.Thread(target=decrypt_arobascr)
Thread2384 = threading.Thread(target=decrypt_arobashl)
Thread2385 = threading.Thread(target=decrypt_arobastild)
Thread2386 = threading.Thread(target=decrypt_crocha)
Thread2387 = threading.Thread(target=decrypt_crochb)
Thread2388 = threading.Thread(target=decrypt_crochd)
Thread2389 = threading.Thread(target=decrypt_crochf)
Thread2390 = threading.Thread(target=decrypt_crochh)
Thread2391 = threading.Thread(target=decrypt_crochj)
Thread2392 = threading.Thread(target=decrypt_crochl)
Thread2393 = threading.Thread(target=decrypt_crochn)
Thread2394 = threading.Thread(target=decrypt_crochp)
Thread2395 = threading.Thread(target=decrypt_crochr)
Thread2396 = threading.Thread(target=decrypt_crocht)
Thread2397 = threading.Thread(target=decrypt_crochv)
Thread2398 = threading.Thread(target=decrypt_crochx)
Thread2399 = threading.Thread(target=decrypt_crochz)
Thread2400 = threading.Thread(target=decrypt_crochA)
Thread2401 = threading.Thread(target=decrypt_crochB)
Thread2402 = threading.Thread(target=decrypt_crochD)
Thread2403 = threading.Thread(target=decrypt_crochF)
Thread2404 = threading.Thread(target=decrypt_crochH)
Thread2405 = threading.Thread(target=decrypt_crochJ)
Thread2406 = threading.Thread(target=decrypt_crochL)
Thread2407 = threading.Thread(target=decrypt_crochN)
Thread2408 = threading.Thread(target=decrypt_crochP)
Thread2409 = threading.Thread(target=decrypt_crochR)
Thread2410 = threading.Thread(target=decrypt_crochT)
Thread2411 = threading.Thread(target=decrypt_crochV)
Thread2412 = threading.Thread(target=decrypt_crochX)
Thread2413 = threading.Thread(target=decrypt_crochZ)
Thread2414 = threading.Thread(target=decrypt_croch0)
Thread2415 = threading.Thread(target=decrypt_croch2)
Thread2416 = threading.Thread(target=decrypt_croch4)
Thread2417 = threading.Thread(target=decrypt_croch6)
Thread2418 = threading.Thread(target=decrypt_croch8)
Thread2419 = threading.Thread(target=decrypt_crochexcl)
Thread2420 = threading.Thread(target=decrypt_crochdquote)
Thread2421 = threading.Thread(target=decrypt_crochdoll)
Thread2422 = threading.Thread(target=decrypt_crochand)
Thread2423 = threading.Thread(target=decrypt_crochquote)
Thread2424 = threading.Thread(target=decrypt_crocpar)
Thread2425 = threading.Thread(target=decrypt_crochast)
Thread2426 = threading.Thread(target=decrypt_crochvir)
Thread2427 = threading.Thread(target=decrypt_crochpp)
Thread2428 = threading.Thread(target=decrypt_crochtp)
Thread2429 = threading.Thread(target=decrypt_crochless)
Thread2430 = threading.Thread(target=decrypt_crochmore)
Thread2431 = threading.Thread(target=decrypt_crocharo)
Thread2432 = threading.Thread(target=decrypt_crochcroc)
Thread2433 = threading.Thread(target=decrypt_crochbsl)
Thread2434 = threading.Thread(target=decrypt_crochcirc)
Thread2435 = threading.Thread(target=decrypt_crochesp)
Thread2436 = threading.Thread(target=decrypt_crochcr)
Thread2437 = threading.Thread(target=decrypt_crochhl)
Thread2438 = threading.Thread(target=decrypt_crochtild)
Thread2439 = threading.Thread(target=decrypt_bsa)
Thread2440 = threading.Thread(target=decrypt_bsb)
Thread2441 = threading.Thread(target=decrypt_bsd)
Thread2442 = threading.Thread(target=decrypt_bsf)
Thread2443 = threading.Thread(target=decrypt_bsh)
Thread2444 = threading.Thread(target=decrypt_bsj)
Thread2445 = threading.Thread(target=decrypt_bsl)
Thread2446 = threading.Thread(target=decrypt_bsn)
Thread2447 = threading.Thread(target=decrypt_bsp)
Thread2448 = threading.Thread(target=decrypt_bsr)
Thread2449 = threading.Thread(target=decrypt_bst)
Thread2450 = threading.Thread(target=decrypt_bsv)
Thread2451 = threading.Thread(target=decrypt_bsx)
Thread2452 = threading.Thread(target=decrypt_bsz)
Thread2453 = threading.Thread(target=decrypt_bsA)
Thread2454 = threading.Thread(target=decrypt_bsB)
Thread2455 = threading.Thread(target=decrypt_bsD)
Thread2456 = threading.Thread(target=decrypt_bsF)
Thread2457 = threading.Thread(target=decrypt_bsH)
Thread2458 = threading.Thread(target=decrypt_bsJ)
Thread2459 = threading.Thread(target=decrypt_bsL)
Thread2460 = threading.Thread(target=decrypt_bsN)
Thread2461 = threading.Thread(target=decrypt_bsP)
Thread2462 = threading.Thread(target=decrypt_bsR)
Thread2463 = threading.Thread(target=decrypt_bsT)
Thread2464 = threading.Thread(target=decrypt_bsV)
Thread2465 = threading.Thread(target=decrypt_bsX)
Thread2466 = threading.Thread(target=decrypt_bsZ)
Thread2467 = threading.Thread(target=decrypt_bs0)
Thread2468 = threading.Thread(target=decrypt_bs2)
Thread2469 = threading.Thread(target=decrypt_bs4)
Thread2470 = threading.Thread(target=decrypt_bs6)
Thread2471 = threading.Thread(target=decrypt_bs8)
Thread2472 = threading.Thread(target=decrypt_bsexcl)
Thread2473 = threading.Thread(target=decrypt_bsdquote)
Thread2474 = threading.Thread(target=decrypt_bsdoll)
Thread2475 = threading.Thread(target=decrypt_bsand)
Thread2476 = threading.Thread(target=decrypt_bsquote)
Thread2477 = threading.Thread(target=decrypt_bslpar)
Thread2478 = threading.Thread(target=decrypt_bsast)
Thread2479 = threading.Thread(target=decrypt_bsvir)
Thread2480 = threading.Thread(target=decrypt_bspp)
Thread2481 = threading.Thread(target=decrypt_bstp)
Thread2482 = threading.Thread(target=decrypt_bsless)
Thread2483 = threading.Thread(target=decrypt_bsmore)
Thread2484 = threading.Thread(target=decrypt_bsaro)
Thread2485 = threading.Thread(target=decrypt_bscroc)
Thread2486 = threading.Thread(target=decrypt_bsbsl)
Thread2487 = threading.Thread(target=decrypt_bscirc)
Thread2488 = threading.Thread(target=decrypt_bsesp)
Thread2489 = threading.Thread(target=decrypt_bscr)
Thread2490 = threading.Thread(target=decrypt_bshl)
Thread2491 = threading.Thread(target=decrypt_bstild)
Thread2492 = threading.Thread(target=decrypt_cira)
Thread2493 = threading.Thread(target=decrypt_cirb)
Thread2494 = threading.Thread(target=decrypt_cird)
Thread2495 = threading.Thread(target=decrypt_cirf)
Thread2496 = threading.Thread(target=decrypt_cirh)
Thread2497 = threading.Thread(target=decrypt_cirj)
Thread2498 = threading.Thread(target=decrypt_cirl)
Thread2499 = threading.Thread(target=decrypt_cirn)
Thread2500 = threading.Thread(target=decrypt_cirp)
Thread2501 = threading.Thread(target=decrypt_cirr)
Thread2502 = threading.Thread(target=decrypt_cirt)
Thread2503 = threading.Thread(target=decrypt_cirv)
Thread2504 = threading.Thread(target=decrypt_cirx)
Thread2505 = threading.Thread(target=decrypt_cirz)
Thread2506 = threading.Thread(target=decrypt_cirA)
Thread2507 = threading.Thread(target=decrypt_cirB)
Thread2508 = threading.Thread(target=decrypt_cirD)
Thread2509 = threading.Thread(target=decrypt_cirF)
Thread2510 = threading.Thread(target=decrypt_cirH)
Thread2511 = threading.Thread(target=decrypt_cirJ)
Thread2512 = threading.Thread(target=decrypt_cirL)
Thread2513 = threading.Thread(target=decrypt_cirN)
Thread2514 = threading.Thread(target=decrypt_cirP)
Thread2515 = threading.Thread(target=decrypt_cirR)
Thread2516 = threading.Thread(target=decrypt_cirT)
Thread2517 = threading.Thread(target=decrypt_cirV)
Thread2518 = threading.Thread(target=decrypt_cirX)
Thread2519 = threading.Thread(target=decrypt_cirZ)
Thread2520 = threading.Thread(target=decrypt_cir0)
Thread2521 = threading.Thread(target=decrypt_cir2)
Thread2522 = threading.Thread(target=decrypt_cir4)
Thread2523 = threading.Thread(target=decrypt_cir6)
Thread2524 = threading.Thread(target=decrypt_cir8)
Thread2525 = threading.Thread(target=decrypt_cirexcl)
Thread2526 = threading.Thread(target=decrypt_cirdquote)
Thread2527 = threading.Thread(target=decrypt_cirdoll)
Thread2528 = threading.Thread(target=decrypt_cirand)
Thread2529 = threading.Thread(target=decrypt_cirquote)
Thread2530 = threading.Thread(target=decrypt_circpar)
Thread2531 = threading.Thread(target=decrypt_cirast)
Thread2532 = threading.Thread(target=decrypt_cirvir)
Thread2533 = threading.Thread(target=decrypt_cirpp)
Thread2534 = threading.Thread(target=decrypt_cirtp)
Thread2535 = threading.Thread(target=decrypt_cirless)
Thread2536 = threading.Thread(target=decrypt_cirmore)
Thread2537 = threading.Thread(target=decrypt_ciraro)
Thread2538 = threading.Thread(target=decrypt_circroc)
Thread2539 = threading.Thread(target=decrypt_cirbsl)
Thread2540 = threading.Thread(target=decrypt_circirc)
Thread2541 = threading.Thread(target=decrypt_ciresp)
Thread2542 = threading.Thread(target=decrypt_circr)
Thread2543 = threading.Thread(target=decrypt_cirhl)
Thread2544 = threading.Thread(target=decrypt_cirtild)
Thread2545 = threading.Thread(target=decrypt_esua)
Thread2546 = threading.Thread(target=decrypt_esub)
Thread2547 = threading.Thread(target=decrypt_esud)
Thread2548 = threading.Thread(target=decrypt_esuf)
Thread2549 = threading.Thread(target=decrypt_esuh)
Thread2550 = threading.Thread(target=decrypt_esuj)
Thread2551 = threading.Thread(target=decrypt_esul)
Thread2552 = threading.Thread(target=decrypt_esun)
Thread2553 = threading.Thread(target=decrypt_esup)
Thread2554 = threading.Thread(target=decrypt_esur)
Thread2555 = threading.Thread(target=decrypt_esut)
Thread2556 = threading.Thread(target=decrypt_esuv)
Thread2557 = threading.Thread(target=decrypt_esux)
Thread2558 = threading.Thread(target=decrypt_esuz)
Thread2559 = threading.Thread(target=decrypt_esuA)
Thread2560 = threading.Thread(target=decrypt_esuB)
Thread2561 = threading.Thread(target=decrypt_esuD)
Thread2562 = threading.Thread(target=decrypt_esuF)
Thread2563 = threading.Thread(target=decrypt_esuH)
Thread2564 = threading.Thread(target=decrypt_esuJ)
Thread2565 = threading.Thread(target=decrypt_esuL)
Thread2566 = threading.Thread(target=decrypt_esuN)
Thread2567 = threading.Thread(target=decrypt_esuP)
Thread2568 = threading.Thread(target=decrypt_esuR)
Thread2569 = threading.Thread(target=decrypt_esuT)
Thread2570 = threading.Thread(target=decrypt_esuV)
Thread2571 = threading.Thread(target=decrypt_esuX)
Thread2572 = threading.Thread(target=decrypt_esuZ)
Thread2573 = threading.Thread(target=decrypt_esu0)
Thread2574 = threading.Thread(target=decrypt_esu2)
Thread2575 = threading.Thread(target=decrypt_esu4)
Thread2576 = threading.Thread(target=decrypt_esu6)
Thread2577 = threading.Thread(target=decrypt_esu8)
Thread2578 = threading.Thread(target=decrypt_esuexcl)
Thread2579 = threading.Thread(target=decrypt_esudquote)
Thread2580 = threading.Thread(target=decrypt_esudoll)
Thread2581 = threading.Thread(target=decrypt_esuand)
Thread2582 = threading.Thread(target=decrypt_esuquote)
Thread2583 = threading.Thread(target=decrypt_esppar)
Thread2584 = threading.Thread(target=decrypt_esuast)
Thread2585 = threading.Thread(target=decrypt_esuvir)
Thread2586 = threading.Thread(target=decrypt_esupp)
Thread2587 = threading.Thread(target=decrypt_esutp)
Thread2588 = threading.Thread(target=decrypt_esuless)
Thread2589 = threading.Thread(target=decrypt_esumore)
Thread2590 = threading.Thread(target=decrypt_esuaro)
Thread2591 = threading.Thread(target=decrypt_esucroc)
Thread2592 = threading.Thread(target=decrypt_esubsl)
Thread2593 = threading.Thread(target=decrypt_esucirc)
Thread2594 = threading.Thread(target=decrypt_esuesp)
Thread2595 = threading.Thread(target=decrypt_esucr)
Thread2596 = threading.Thread(target=decrypt_esuhl)
Thread2597 = threading.Thread(target=decrypt_esutild)
Thread2598 = threading.Thread(target=decrypt_crocha)
Thread2599 = threading.Thread(target=decrypt_crochb)
Thread2600 = threading.Thread(target=decrypt_crochd)
Thread2601 = threading.Thread(target=decrypt_crochf)
Thread2602 = threading.Thread(target=decrypt_crochh)
Thread2603 = threading.Thread(target=decrypt_crochj)
Thread2604 = threading.Thread(target=decrypt_crochl)
Thread2605 = threading.Thread(target=decrypt_crochn)
Thread2606 = threading.Thread(target=decrypt_crochp)
Thread2607 = threading.Thread(target=decrypt_crochr)
Thread2608 = threading.Thread(target=decrypt_crocht)
Thread2609 = threading.Thread(target=decrypt_crochv)
Thread2610 = threading.Thread(target=decrypt_crochx)
Thread2611 = threading.Thread(target=decrypt_crochz)
Thread2612 = threading.Thread(target=decrypt_crochA)
Thread2613 = threading.Thread(target=decrypt_crochB)
Thread2614 = threading.Thread(target=decrypt_crochD)
Thread2615 = threading.Thread(target=decrypt_crochF)
Thread2616 = threading.Thread(target=decrypt_crochH)
Thread2617 = threading.Thread(target=decrypt_crochJ)
Thread2618 = threading.Thread(target=decrypt_crochL)
Thread2619 = threading.Thread(target=decrypt_crochN)
Thread2620 = threading.Thread(target=decrypt_crochP)
Thread2621 = threading.Thread(target=decrypt_crochR)
Thread2622 = threading.Thread(target=decrypt_crochT)
Thread2623 = threading.Thread(target=decrypt_crochV)
Thread2624 = threading.Thread(target=decrypt_crochX)
Thread2625 = threading.Thread(target=decrypt_crochZ)
Thread2626 = threading.Thread(target=decrypt_croch0)
Thread2627 = threading.Thread(target=decrypt_croch2)
Thread2628 = threading.Thread(target=decrypt_croch4)
Thread2629 = threading.Thread(target=decrypt_croch6)
Thread2630 = threading.Thread(target=decrypt_croch8)
Thread2631 = threading.Thread(target=decrypt_crochexcl)
Thread2632 = threading.Thread(target=decrypt_crochdquote)
Thread2633 = threading.Thread(target=decrypt_crochdoll)
Thread2634 = threading.Thread(target=decrypt_crochand)
Thread2635 = threading.Thread(target=decrypt_crochquote)
Thread2636 = threading.Thread(target=decrypt_crpar)
Thread2637 = threading.Thread(target=decrypt_crochast)
Thread2638 = threading.Thread(target=decrypt_crochvir)
Thread2639 = threading.Thread(target=decrypt_crochpp)
Thread2640 = threading.Thread(target=decrypt_crochtp)
Thread2641 = threading.Thread(target=decrypt_crochless)
Thread2642 = threading.Thread(target=decrypt_crochmore)
Thread2643 = threading.Thread(target=decrypt_crocharo)
Thread2644 = threading.Thread(target=decrypt_crochcroc)
Thread2645 = threading.Thread(target=decrypt_crochbsl)
Thread2646 = threading.Thread(target=decrypt_crochcirc)
Thread2647 = threading.Thread(target=decrypt_crochesp)
Thread2648 = threading.Thread(target=decrypt_crochcr)
Thread2649 = threading.Thread(target=decrypt_crochhl)
Thread2650 = threading.Thread(target=decrypt_crochtild)
Thread2651 = threading.Thread(target=decrypt_vsla)
Thread2652 = threading.Thread(target=decrypt_vslb)
Thread2653 = threading.Thread(target=decrypt_vsld)
Thread2654 = threading.Thread(target=decrypt_vslf)
Thread2655 = threading.Thread(target=decrypt_vslh)
Thread2656 = threading.Thread(target=decrypt_vslj)
Thread2657 = threading.Thread(target=decrypt_vsll)
Thread2658 = threading.Thread(target=decrypt_vsln)
Thread2659 = threading.Thread(target=decrypt_vslp)
Thread2660 = threading.Thread(target=decrypt_vslr)
Thread2661 = threading.Thread(target=decrypt_vslt)
Thread2662 = threading.Thread(target=decrypt_vslv)
Thread2663 = threading.Thread(target=decrypt_vslx)
Thread2664 = threading.Thread(target=decrypt_vslz)
Thread2665 = threading.Thread(target=decrypt_vslA)
Thread2666 = threading.Thread(target=decrypt_vslB)
Thread2667 = threading.Thread(target=decrypt_vslD)
Thread2668 = threading.Thread(target=decrypt_vslF)
Thread2669 = threading.Thread(target=decrypt_vslH)
Thread2670 = threading.Thread(target=decrypt_vslJ)
Thread2671 = threading.Thread(target=decrypt_vslL)
Thread2672 = threading.Thread(target=decrypt_vslN)
Thread2673 = threading.Thread(target=decrypt_vslP)
Thread2674 = threading.Thread(target=decrypt_vslR)
Thread2675 = threading.Thread(target=decrypt_vslT)
Thread2676 = threading.Thread(target=decrypt_vslV)
Thread2677 = threading.Thread(target=decrypt_vslX)
Thread2678 = threading.Thread(target=decrypt_vslZ)
Thread2679 = threading.Thread(target=decrypt_vsl0)
Thread2680 = threading.Thread(target=decrypt_vsl2)
Thread2681 = threading.Thread(target=decrypt_vsl4)
Thread2682 = threading.Thread(target=decrypt_vsl6)
Thread2683 = threading.Thread(target=decrypt_vsl8)
Thread2684 = threading.Thread(target=decrypt_vslexcl)
Thread2685 = threading.Thread(target=decrypt_vsldquote)
Thread2686 = threading.Thread(target=decrypt_vsldoll)
Thread2687 = threading.Thread(target=decrypt_vsland)
Thread2688 = threading.Thread(target=decrypt_vslquote)
Thread2689 = threading.Thread(target=decrypt_hlpar)
Thread2690 = threading.Thread(target=decrypt_vslast)
Thread2691 = threading.Thread(target=decrypt_vslvir)
Thread2692 = threading.Thread(target=decrypt_vslpp)
Thread2693 = threading.Thread(target=decrypt_vsltp)
Thread2694 = threading.Thread(target=decrypt_vslless)
Thread2695 = threading.Thread(target=decrypt_vslmore)
Thread2696 = threading.Thread(target=decrypt_vslaro)
Thread2697 = threading.Thread(target=decrypt_vslcroc)
Thread2698 = threading.Thread(target=decrypt_vslbsl)
Thread2699 = threading.Thread(target=decrypt_vslcirc)
Thread2700 = threading.Thread(target=decrypt_vslesp)
Thread2701 = threading.Thread(target=decrypt_vslcr)
Thread2702 = threading.Thread(target=decrypt_vslhl)
Thread2703 = threading.Thread(target=decrypt_vsltild)
Thread2704 = threading.Thread(target=decrypt_tila)
Thread2705 = threading.Thread(target=decrypt_tilb)
Thread2706 = threading.Thread(target=decrypt_tild)
Thread2707 = threading.Thread(target=decrypt_tilf)
Thread2708 = threading.Thread(target=decrypt_tilh)
Thread2709 = threading.Thread(target=decrypt_tilj)
Thread2710 = threading.Thread(target=decrypt_till)
Thread2711 = threading.Thread(target=decrypt_tiln)
Thread2712 = threading.Thread(target=decrypt_tilp)
Thread2713 = threading.Thread(target=decrypt_tilr)
Thread2714 = threading.Thread(target=decrypt_tilt)
Thread2715 = threading.Thread(target=decrypt_tilv)
Thread2716 = threading.Thread(target=decrypt_tilx)
Thread2717 = threading.Thread(target=decrypt_tilz)
Thread2718 = threading.Thread(target=decrypt_tilA)
Thread2719 = threading.Thread(target=decrypt_tilB)
Thread2720 = threading.Thread(target=decrypt_tilD)
Thread2721 = threading.Thread(target=decrypt_tilF)
Thread2722 = threading.Thread(target=decrypt_tilH)
Thread2723 = threading.Thread(target=decrypt_tilJ)
Thread2724 = threading.Thread(target=decrypt_tilL)
Thread2725 = threading.Thread(target=decrypt_tilN)
Thread2726 = threading.Thread(target=decrypt_tilP)
Thread2727 = threading.Thread(target=decrypt_tilR)
Thread2728 = threading.Thread(target=decrypt_tilT)
Thread2729 = threading.Thread(target=decrypt_tilV)
Thread2730 = threading.Thread(target=decrypt_tilX)
Thread2731 = threading.Thread(target=decrypt_tilZ)
Thread2732 = threading.Thread(target=decrypt_til0)
Thread2733 = threading.Thread(target=decrypt_til2)
Thread2734 = threading.Thread(target=decrypt_til4)
Thread2735 = threading.Thread(target=decrypt_til6)
Thread2736 = threading.Thread(target=decrypt_til8)
Thread2737 = threading.Thread(target=decrypt_tilexcl)
Thread2738 = threading.Thread(target=decrypt_tildquote)
Thread2739 = threading.Thread(target=decrypt_tildoll)
Thread2740 = threading.Thread(target=decrypt_tiland)
Thread2741 = threading.Thread(target=decrypt_tilquote)
Thread2742 = threading.Thread(target=decrypt_tilpar)
Thread2743 = threading.Thread(target=decrypt_tilast)
Thread2744 = threading.Thread(target=decrypt_tilvir)
Thread2745 = threading.Thread(target=decrypt_tilpp)
Thread2746 = threading.Thread(target=decrypt_tiltp)
Thread2747 = threading.Thread(target=decrypt_tilless)
Thread2748 = threading.Thread(target=decrypt_tilmore)
Thread2749 = threading.Thread(target=decrypt_tilaro)
Thread2750 = threading.Thread(target=decrypt_tilcroc)
Thread2751 = threading.Thread(target=decrypt_tilbsl)
Thread2752 = threading.Thread(target=decrypt_tilcirc)
Thread2753 = threading.Thread(target=decrypt_tilesp)
Thread2754 = threading.Thread(target=decrypt_tilcr)
Thread2755 = threading.Thread(target=decrypt_tilhl)
Thread2756 = threading.Thread(target=decrypt_tiltild)

Thread1.start()
Thread2.start()
Thread3.start()
Thread4.start()
Thread5.start()
Thread6.start()
Thread7.start()
Thread8.start()
Thread9.start()
Thread10.start()
Thread11.start()
Thread12.start()
Thread13.start()
Thread14.start()
Thread15.start()
Thread16.start()
Thread17.start()
Thread18.start()
Thread19.start()
Thread20.start()
Thread21.start()
Thread22.start()
Thread23.start()
Thread24.start()
Thread25.start()
Thread26.start()
Thread27.start()
Thread28.start()
Thread29.start()
Thread30.start()
Thread31.start()
Thread32.start()
Thread33.start()
Thread34.start()
Thread35.start()
Thread36.start()
Thread37.start()
Thread38.start()
Thread39.start()
Thread40.start()
Thread41.start()
Thread42.start()
Thread43.start()
Thread44.start()
Thread45.start()
Thread46.start()
Thread47.start()
Thread48.start()
Thread49.start()
Thread50.start()
Thread51.start()
Thread52.start()
Thread53.start()
Thread54.start()
Thread55.start()
Thread56.start()
Thread57.start()
Thread58.start()
Thread59.start()
Thread60.start()
Thread61.start()
Thread62.start()
Thread63.start()
Thread64.start()
Thread65.start()
Thread66.start()
Thread67.start()
Thread68.start()
Thread69.start()
Thread70.start()
Thread71.start()
Thread72.start()
Thread73.start()
Thread74.start()
Thread75.start()
Thread76.start()
Thread77.start()
Thread78.start()
Thread79.start()
Thread80.start()
Thread81.start()
Thread82.start()
Thread83.start()
Thread84.start()
Thread85.start()
Thread86.start()
Thread87.start()
Thread88.start()
Thread89.start()
Thread90.start()
Thread91.start()
Thread92.start()
Thread93.start()
Thread94.start()
Thread95.start()
Thread96.start()
Thread97.start()
Thread98.start()
Thread99.start()
Thread100.start()
Thread101.start()
Thread102.start()
Thread103.start()
Thread104.start()
Thread105.start()
Thread106.start()
Thread107.start()
Thread108.start()
Thread109.start()
Thread110.start()
Thread111.start()
Thread112.start()
Thread113.start()
Thread114.start()
Thread115.start()
Thread116.start()
Thread117.start()
Thread118.start()
Thread119.start()
Thread120.start()
Thread121.start()
Thread122.start()
Thread123.start()
Thread124.start()
Thread125.start()
Thread126.start()
Thread127.start()
Thread128.start()
Thread129.start()
Thread130.start()
Thread131.start()
Thread132.start()
Thread133.start()
Thread134.start()
Thread135.start()
Thread136.start()
Thread137.start()
Thread138.start()
Thread139.start()
Thread140.start()
Thread141.start()
Thread142.start()
Thread143.start()
Thread144.start()
Thread145.start()
Thread146.start()
Thread147.start()
Thread148.start()
Thread149.start()
Thread150.start()
Thread151.start()
Thread152.start()
Thread153.start()
Thread154.start()
Thread155.start()
Thread156.start()
Thread157.start()
Thread158.start()
Thread159.start()
Thread160.start()
Thread161.start()
Thread162.start()
Thread163.start()
Thread164.start()
Thread165.start()
Thread166.start()
Thread167.start()
Thread168.start()
Thread169.start()
Thread170.start()
Thread171.start()
Thread172.start()
Thread173.start()
Thread174.start()
Thread175.start()
Thread176.start()
Thread177.start()
Thread178.start()
Thread179.start()
Thread180.start()
Thread181.start()
Thread182.start()
Thread183.start()
Thread184.start()
Thread185.start()
Thread186.start()
Thread187.start()
Thread188.start()
Thread189.start()
Thread190.start()
Thread191.start()
Thread192.start()
Thread193.start()
Thread194.start()
Thread195.start()
Thread196.start()
Thread197.start()
Thread198.start()
Thread199.start()
Thread200.start()
Thread201.start()
Thread202.start()
Thread203.start()
Thread204.start()
Thread205.start()
Thread206.start()
Thread207.start()
Thread208.start()
Thread209.start()
Thread210.start()
Thread211.start()
Thread212.start()
Thread213.start()
Thread214.start()
Thread215.start()
Thread216.start()
Thread217.start()
Thread218.start()
Thread219.start()
Thread220.start()
Thread221.start()
Thread222.start()
Thread223.start()
Thread224.start()
Thread225.start()
Thread226.start()
Thread227.start()
Thread228.start()
Thread229.start()
Thread230.start()
Thread231.start()
Thread232.start()
Thread233.start()
Thread234.start()
Thread235.start()
Thread236.start()
Thread237.start()
Thread238.start()
Thread239.start()
Thread240.start()
Thread241.start()
Thread242.start()
Thread243.start()
Thread244.start()
Thread245.start()
Thread246.start()
Thread247.start()
Thread248.start()
Thread249.start()
Thread250.start()
Thread251.start()
Thread252.start()
Thread253.start()
Thread254.start()
Thread255.start()
Thread256.start()
Thread257.start()
Thread258.start()
Thread259.start()
Thread260.start()
Thread261.start()
Thread262.start()
Thread263.start()
Thread264.start()
Thread265.start()
Thread266.start()
Thread267.start()
Thread268.start()
Thread269.start()
Thread270.start()
Thread271.start()
Thread272.start()
Thread273.start()
Thread274.start()
Thread275.start()
Thread276.start()
Thread277.start()
Thread278.start()
Thread279.start()
Thread280.start()
Thread281.start()
Thread282.start()
Thread283.start()
Thread284.start()
Thread285.start()
Thread286.start()
Thread287.start()
Thread288.start()
Thread289.start()
Thread290.start()
Thread291.start()
Thread292.start()
Thread293.start()
Thread294.start()
Thread295.start()
Thread296.start()
Thread297.start()
Thread298.start()
Thread299.start()
Thread300.start()
Thread301.start()
Thread302.start()
Thread303.start()
Thread304.start()
Thread305.start()
Thread306.start()
Thread307.start()
Thread308.start()
Thread309.start()
Thread310.start()
Thread311.start()
Thread312.start()
Thread313.start()
Thread314.start()
Thread315.start()
Thread316.start()
Thread317.start()
Thread318.start()
Thread319.start()
Thread320.start()
Thread321.start()
Thread322.start()
Thread323.start()
Thread324.start()
Thread325.start()
Thread326.start()
Thread327.start()
Thread328.start()
Thread329.start()
Thread330.start()
Thread331.start()
Thread332.start()
Thread333.start()
Thread334.start()
Thread335.start()
Thread336.start()
Thread337.start()
Thread338.start()
Thread339.start()
Thread340.start()
Thread341.start()
Thread342.start()
Thread343.start()
Thread344.start()
Thread345.start()
Thread346.start()
Thread347.start()
Thread348.start()
Thread349.start()
Thread350.start()
Thread351.start()
Thread352.start()
Thread353.start()
Thread354.start()
Thread355.start()
Thread356.start()
Thread357.start()
Thread358.start()
Thread359.start()
Thread360.start()
Thread361.start()
Thread362.start()
Thread363.start()
Thread364.start()
Thread365.start()
Thread366.start()
Thread367.start()
Thread368.start()
Thread369.start()
Thread370.start()
Thread371.start()
Thread372.start()
Thread373.start()
Thread374.start()
Thread375.start()
Thread376.start()
Thread377.start()
Thread378.start()
Thread379.start()
Thread380.start()
Thread381.start()
Thread382.start()
Thread383.start()
Thread384.start()
Thread385.start()
Thread386.start()
Thread387.start()
Thread388.start()
Thread389.start()
Thread390.start()
Thread391.start()
Thread392.start()
Thread393.start()
Thread394.start()
Thread395.start()
Thread396.start()
Thread397.start()
Thread398.start()
Thread399.start()
Thread400.start()
Thread401.start()
Thread402.start()
Thread403.start()
Thread404.start()
Thread405.start()
Thread406.start()
Thread407.start()
Thread408.start()
Thread409.start()
Thread410.start()
Thread411.start()
Thread412.start()
Thread413.start()
Thread414.start()
Thread415.start()
Thread416.start()
Thread417.start()
Thread418.start()
Thread419.start()
Thread420.start()
Thread421.start()
Thread422.start()
Thread423.start()
Thread424.start()
Thread425.start()
Thread426.start()
Thread427.start()
Thread428.start()
Thread429.start()
Thread430.start()
Thread431.start()
Thread432.start()
Thread433.start()
Thread434.start()
Thread435.start()
Thread436.start()
Thread437.start()
Thread438.start()
Thread439.start()
Thread440.start()
Thread441.start()
Thread442.start()
Thread443.start()
Thread444.start()
Thread445.start()
Thread446.start()
Thread447.start()
Thread448.start()
Thread449.start()
Thread450.start()
Thread451.start()
Thread452.start()
Thread453.start()
Thread454.start()
Thread455.start()
Thread456.start()
Thread457.start()
Thread458.start()
Thread459.start()
Thread460.start()
Thread461.start()
Thread462.start()
Thread463.start()
Thread464.start()
Thread465.start()
Thread466.start()
Thread467.start()
Thread468.start()
Thread469.start()
Thread470.start()
Thread471.start()
Thread472.start()
Thread473.start()
Thread474.start()
Thread475.start()
Thread476.start()
Thread477.start()
Thread478.start()
Thread479.start()
Thread480.start()
Thread481.start()
Thread482.start()
Thread483.start()
Thread484.start()
Thread485.start()
Thread486.start()
Thread487.start()
Thread488.start()
Thread489.start()
Thread490.start()
Thread491.start()
Thread492.start()
Thread493.start()
Thread494.start()
Thread495.start()
Thread496.start()
Thread497.start()
Thread498.start()
Thread499.start()
Thread500.start()
Thread501.start()
Thread502.start()
Thread503.start()
Thread504.start()
Thread505.start()
Thread506.start()
Thread507.start()
Thread508.start()
Thread509.start()
Thread510.start()
Thread511.start()
Thread512.start()
Thread513.start()
Thread514.start()
Thread515.start()
Thread516.start()
Thread517.start()
Thread518.start()
Thread519.start()
Thread520.start()
Thread521.start()
Thread522.start()
Thread523.start()
Thread524.start()
Thread525.start()
Thread526.start()
Thread527.start()
Thread528.start()
Thread529.start()
Thread530.start()
Thread531.start()
Thread532.start()
Thread533.start()
Thread534.start()
Thread535.start()
Thread536.start()
Thread537.start()
Thread538.start()
Thread539.start()
Thread540.start()
Thread541.start()
Thread542.start()
Thread543.start()
Thread544.start()
Thread545.start()
Thread546.start()
Thread547.start()
Thread548.start()
Thread549.start()
Thread550.start()
Thread551.start()
Thread552.start()
Thread553.start()
Thread554.start()
Thread555.start()
Thread556.start()
Thread557.start()
Thread558.start()
Thread559.start()
Thread560.start()
Thread561.start()
Thread562.start()
Thread563.start()
Thread564.start()
Thread565.start()
Thread566.start()
Thread567.start()
Thread568.start()
Thread569.start()
Thread570.start()
Thread571.start()
Thread572.start()
Thread573.start()
Thread574.start()
Thread575.start()
Thread576.start()
Thread577.start()
Thread578.start()
Thread579.start()
Thread580.start()
Thread581.start()
Thread582.start()
Thread583.start()
Thread584.start()
Thread585.start()
Thread586.start()
Thread587.start()
Thread588.start()
Thread589.start()
Thread590.start()
Thread591.start()
Thread592.start()
Thread593.start()
Thread594.start()
Thread595.start()
Thread596.start()
Thread597.start()
Thread598.start()
Thread599.start()
Thread600.start()
Thread601.start()
Thread602.start()
Thread603.start()
Thread604.start()
Thread605.start()
Thread606.start()
Thread607.start()
Thread608.start()
Thread609.start()
Thread610.start()
Thread611.start()
Thread612.start()
Thread613.start()
Thread614.start()
Thread615.start()
Thread616.start()
Thread617.start()
Thread618.start()
Thread619.start()
Thread620.start()
Thread621.start()
Thread622.start()
Thread623.start()
Thread624.start()
Thread625.start()
Thread626.start()
Thread627.start()
Thread628.start()
Thread629.start()
Thread630.start()
Thread631.start()
Thread632.start()
Thread633.start()
Thread634.start()
Thread635.start()
Thread636.start()
Thread637.start()
Thread638.start()
Thread639.start()
Thread640.start()
Thread641.start()
Thread642.start()
Thread643.start()
Thread644.start()
Thread645.start()
Thread646.start()
Thread647.start()
Thread648.start()
Thread649.start()
Thread650.start()
Thread651.start()
Thread652.start()
Thread653.start()
Thread654.start()
Thread655.start()
Thread656.start()
Thread657.start()
Thread658.start()
Thread659.start()
Thread660.start()
Thread661.start()
Thread662.start()
Thread663.start()
Thread664.start()
Thread665.start()
Thread666.start()
Thread667.start()
Thread668.start()
Thread669.start()
Thread670.start()
Thread671.start()
Thread672.start()
Thread673.start()
Thread674.start()
Thread675.start()
Thread676.start()
Thread677.start()
Thread678.start()
Thread679.start()
Thread680.start()
Thread681.start()
Thread682.start()
Thread683.start()
Thread684.start()
Thread685.start()
Thread686.start()
Thread687.start()
Thread688.start()
Thread689.start()
Thread690.start()
Thread691.start()
Thread692.start()
Thread693.start()
Thread694.start()
Thread695.start()
Thread696.start()
Thread697.start()
Thread698.start()
Thread699.start()
Thread700.start()
Thread701.start()
Thread702.start()
Thread703.start()
Thread704.start()
Thread705.start()
Thread706.start()
Thread707.start()
Thread708.start()
Thread709.start()
Thread710.start()
Thread711.start()
Thread712.start()
Thread713.start()
Thread714.start()
Thread715.start()
Thread716.start()
Thread717.start()
Thread718.start()
Thread719.start()
Thread720.start()
Thread721.start()
Thread722.start()
Thread723.start()
Thread724.start()
Thread725.start()
Thread726.start()
Thread727.start()
Thread728.start()
Thread729.start()
Thread730.start()
Thread731.start()
Thread732.start()
Thread733.start()
Thread734.start()
Thread735.start()
Thread736.start()
Thread737.start()
Thread738.start()
Thread739.start()
Thread740.start()
Thread741.start()
Thread742.start()
Thread743.start()
Thread744.start()
Thread745.start()
Thread746.start()
Thread747.start()
Thread748.start()
Thread749.start()
Thread750.start()
Thread751.start()
Thread752.start()
Thread753.start()
Thread754.start()
Thread755.start()
Thread756.start()
Thread757.start()
Thread758.start()
Thread759.start()
Thread760.start()
Thread761.start()
Thread762.start()
Thread763.start()
Thread764.start()
Thread765.start()
Thread766.start()
Thread767.start()
Thread768.start()
Thread769.start()
Thread770.start()
Thread771.start()
Thread772.start()
Thread773.start()
Thread774.start()
Thread775.start()
Thread776.start()
Thread777.start()
Thread778.start()
Thread779.start()
Thread780.start()
Thread781.start()
Thread782.start()
Thread783.start()
Thread784.start()
Thread785.start()
Thread786.start()
Thread787.start()
Thread788.start()
Thread789.start()
Thread790.start()
Thread791.start()
Thread792.start()
Thread793.start()
Thread794.start()
Thread795.start()
Thread796.start()
Thread797.start()
Thread798.start()
Thread799.start()
Thread800.start()
Thread801.start()
Thread802.start()
Thread803.start()
Thread804.start()
Thread805.start()
Thread806.start()
Thread807.start()
Thread808.start()
Thread809.start()
Thread810.start()
Thread811.start()
Thread812.start()
Thread813.start()
Thread814.start()
Thread815.start()
Thread816.start()
Thread817.start()
Thread818.start()
Thread819.start()
Thread820.start()
Thread821.start()
Thread822.start()
Thread823.start()
Thread824.start()
Thread825.start()
Thread826.start()
Thread827.start()
Thread828.start()
Thread829.start()
Thread830.start()
Thread831.start()
Thread832.start()
Thread833.start()
Thread834.start()
Thread835.start()
Thread836.start()
Thread837.start()
Thread838.start()
Thread839.start()
Thread840.start()
Thread841.start()
Thread842.start()
Thread843.start()
Thread844.start()
Thread845.start()
Thread846.start()
Thread847.start()
Thread848.start()
Thread849.start()
Thread850.start()
Thread851.start()
Thread852.start()
Thread853.start()
Thread854.start()
Thread855.start()
Thread856.start()
Thread857.start()
Thread858.start()
Thread859.start()
Thread860.start()
Thread861.start()
Thread862.start()
Thread863.start()
Thread864.start()
Thread865.start()
Thread866.start()
Thread867.start()
Thread868.start()
Thread869.start()
Thread870.start()
Thread871.start()
Thread872.start()
Thread873.start()
Thread874.start()
Thread875.start()
Thread876.start()
Thread877.start()
Thread878.start()
Thread879.start()
Thread880.start()
Thread881.start()
Thread882.start()
Thread883.start()
Thread884.start()
Thread885.start()
Thread886.start()
Thread887.start()
Thread888.start()
Thread889.start()
Thread890.start()
Thread891.start()
Thread892.start()
Thread893.start()
Thread894.start()
Thread895.start()
Thread896.start()
Thread897.start()
Thread898.start()
Thread899.start()
Thread900.start()
Thread901.start()
Thread902.start()
Thread903.start()
Thread904.start()
Thread905.start()
Thread906.start()
Thread907.start()
Thread908.start()
Thread909.start()
Thread910.start()
Thread911.start()
Thread912.start()
Thread913.start()
Thread914.start()
Thread915.start()
Thread916.start()
Thread917.start()
Thread918.start()
Thread919.start()
Thread920.start()
Thread921.start()
Thread922.start()
Thread923.start()
Thread924.start()
Thread925.start()
Thread926.start()
Thread927.start()
Thread928.start()
Thread929.start()
Thread930.start()
Thread931.start()
Thread932.start()
Thread933.start()
Thread934.start()
Thread935.start()
Thread936.start()
Thread937.start()
Thread938.start()
Thread939.start()
Thread940.start()
Thread941.start()
Thread942.start()
Thread943.start()
Thread944.start()
Thread945.start()
Thread946.start()
Thread947.start()
Thread948.start()
Thread949.start()
Thread950.start()
Thread951.start()
Thread952.start()
Thread953.start()
Thread954.start()
Thread955.start()
Thread956.start()
Thread957.start()
Thread958.start()
Thread959.start()
Thread960.start()
Thread961.start()
Thread962.start()
Thread963.start()
Thread964.start()
Thread965.start()
Thread966.start()
Thread967.start()
Thread968.start()
Thread969.start()
Thread970.start()
Thread971.start()
Thread972.start()
Thread973.start()
Thread974.start()
Thread975.start()
Thread976.start()
Thread977.start()
Thread978.start()
Thread979.start()
Thread980.start()
Thread981.start()
Thread982.start()
Thread983.start()
Thread984.start()
Thread985.start()
Thread986.start()
Thread987.start()
Thread988.start()
Thread989.start()
Thread990.start()
Thread991.start()
Thread992.start()
Thread993.start()
Thread994.start()
Thread995.start()
Thread996.start()
Thread997.start()
Thread998.start()
Thread999.start()
Thread1000.start()
Thread1001.start()
Thread1002.start()
Thread1003.start()
Thread1004.start()
Thread1005.start()
Thread1006.start()
Thread1007.start()
Thread1008.start()
Thread1009.start()
Thread1010.start()
Thread1011.start()
Thread1012.start()
Thread1013.start()
Thread1014.start()
Thread1015.start()
Thread1016.start()
Thread1017.start()
Thread1018.start()
Thread1019.start()
Thread1020.start()
Thread1021.start()
Thread1022.start()
Thread1023.start()
Thread1024.start()
Thread1025.start()
Thread1026.start()
Thread1027.start()
Thread1028.start()
Thread1029.start()
Thread1030.start()
Thread1031.start()
Thread1032.start()
Thread1033.start()
Thread1034.start()
Thread1035.start()
Thread1036.start()
Thread1037.start()
Thread1038.start()
Thread1039.start()
Thread1040.start()
Thread1041.start()
Thread1042.start()
Thread1043.start()
Thread1044.start()
Thread1045.start()
Thread1046.start()
Thread1047.start()
Thread1048.start()
Thread1049.start()
Thread1050.start()
Thread1051.start()
Thread1052.start()
Thread1053.start()
Thread1054.start()
Thread1055.start()
Thread1056.start()
Thread1057.start()
Thread1058.start()
Thread1059.start()
Thread1060.start()
Thread1061.start()
Thread1062.start()
Thread1063.start()
Thread1064.start()
Thread1065.start()
Thread1066.start()
Thread1067.start()
Thread1068.start()
Thread1069.start()
Thread1070.start()
Thread1071.start()
Thread1072.start()
Thread1073.start()
Thread1074.start()
Thread1075.start()
Thread1076.start()
Thread1077.start()
Thread1078.start()
Thread1079.start()
Thread1080.start()
Thread1081.start()
Thread1082.start()
Thread1083.start()
Thread1084.start()
Thread1085.start()
Thread1086.start()
Thread1087.start()
Thread1088.start()
Thread1089.start()
Thread1090.start()
Thread1091.start()
Thread1092.start()
Thread1093.start()
Thread1094.start()
Thread1095.start()
Thread1096.start()
Thread1097.start()
Thread1098.start()
Thread1099.start()
Thread1100.start()
Thread1101.start()
Thread1102.start()
Thread1103.start()
Thread1104.start()
Thread1105.start()
Thread1106.start()
Thread1107.start()
Thread1108.start()
Thread1109.start()
Thread1110.start()
Thread1111.start()
Thread1112.start()
Thread1113.start()
Thread1114.start()
Thread1115.start()
Thread1116.start()
Thread1117.start()
Thread1118.start()
Thread1119.start()
Thread1120.start()
Thread1121.start()
Thread1122.start()
Thread1123.start()
Thread1124.start()
Thread1125.start()
Thread1126.start()
Thread1127.start()
Thread1128.start()
Thread1129.start()
Thread1130.start()
Thread1131.start()
Thread1132.start()
Thread1133.start()
Thread1134.start()
Thread1135.start()
Thread1136.start()
Thread1137.start()
Thread1138.start()
Thread1139.start()
Thread1140.start()
Thread1141.start()
Thread1142.start()
Thread1143.start()
Thread1144.start()
Thread1145.start()
Thread1146.start()
Thread1147.start()
Thread1148.start()
Thread1149.start()
Thread1150.start()
Thread1151.start()
Thread1152.start()
Thread1153.start()
Thread1154.start()
Thread1155.start()
Thread1156.start()
Thread1157.start()
Thread1158.start()
Thread1159.start()
Thread1160.start()
Thread1161.start()
Thread1162.start()
Thread1163.start()
Thread1164.start()
Thread1165.start()
Thread1166.start()
Thread1167.start()
Thread1168.start()
Thread1169.start()
Thread1170.start()
Thread1171.start()
Thread1172.start()
Thread1173.start()
Thread1174.start()
Thread1175.start()
Thread1176.start()
Thread1177.start()
Thread1178.start()
Thread1179.start()
Thread1180.start()
Thread1181.start()
Thread1182.start()
Thread1183.start()
Thread1184.start()
Thread1185.start()
Thread1186.start()
Thread1187.start()
Thread1188.start()
Thread1189.start()
Thread1190.start()
Thread1191.start()
Thread1192.start()
Thread1193.start()
Thread1194.start()
Thread1195.start()
Thread1196.start()
Thread1197.start()
Thread1198.start()
Thread1199.start()
Thread1200.start()
Thread1201.start()
Thread1202.start()
Thread1203.start()
Thread1204.start()
Thread1205.start()
Thread1206.start()
Thread1207.start()
Thread1208.start()
Thread1209.start()
Thread1210.start()
Thread1211.start()
Thread1212.start()
Thread1213.start()
Thread1214.start()
Thread1215.start()
Thread1216.start()
Thread1217.start()
Thread1218.start()
Thread1219.start()
Thread1220.start()
Thread1221.start()
Thread1222.start()
Thread1223.start()
Thread1224.start()
Thread1225.start()
Thread1226.start()
Thread1227.start()
Thread1228.start()
Thread1229.start()
Thread1230.start()
Thread1231.start()
Thread1232.start()
Thread1233.start()
Thread1234.start()
Thread1235.start()
Thread1236.start()
Thread1237.start()
Thread1238.start()
Thread1239.start()
Thread1240.start()
Thread1241.start()
Thread1242.start()
Thread1243.start()
Thread1244.start()
Thread1245.start()
Thread1246.start()
Thread1247.start()
Thread1248.start()
Thread1249.start()
Thread1250.start()
Thread1251.start()
Thread1252.start()
Thread1253.start()
Thread1254.start()
Thread1255.start()
Thread1256.start()
Thread1257.start()
Thread1258.start()
Thread1259.start()
Thread1260.start()
Thread1261.start()
Thread1262.start()
Thread1263.start()
Thread1264.start()
Thread1265.start()
Thread1266.start()
Thread1267.start()
Thread1268.start()
Thread1269.start()
Thread1270.start()
Thread1271.start()
Thread1272.start()
Thread1273.start()
Thread1274.start()
Thread1275.start()
Thread1276.start()
Thread1277.start()
Thread1278.start()
Thread1279.start()
Thread1280.start()
Thread1281.start()
Thread1282.start()
Thread1283.start()
Thread1284.start()
Thread1285.start()
Thread1286.start()
Thread1287.start()
Thread1288.start()
Thread1289.start()
Thread1290.start()
Thread1291.start()
Thread1292.start()
Thread1293.start()
Thread1294.start()
Thread1295.start()
Thread1296.start()
Thread1297.start()
Thread1298.start()
Thread1299.start()
Thread1300.start()
Thread1301.start()
Thread1302.start()
Thread1303.start()
Thread1304.start()
Thread1305.start()
Thread1306.start()
Thread1307.start()
Thread1308.start()
Thread1309.start()
Thread1310.start()
Thread1311.start()
Thread1312.start()
Thread1313.start()
Thread1314.start()
Thread1315.start()
Thread1316.start()
Thread1317.start()
Thread1318.start()
Thread1319.start()
Thread1320.start()
Thread1321.start()
Thread1322.start()
Thread1323.start()
Thread1324.start()
Thread1325.start()
Thread1326.start()
Thread1327.start()
Thread1328.start()
Thread1329.start()
Thread1330.start()
Thread1331.start()
Thread1332.start()
Thread1333.start()
Thread1334.start()
Thread1335.start()
Thread1336.start()
Thread1337.start()
Thread1338.start()
Thread1339.start()
Thread1340.start()
Thread1341.start()
Thread1342.start()
Thread1343.start()
Thread1344.start()
Thread1345.start()
Thread1346.start()
Thread1347.start()
Thread1348.start()
Thread1349.start()
Thread1350.start()
Thread1351.start()
Thread1352.start()
Thread1353.start()
Thread1354.start()
Thread1355.start()
Thread1356.start()
Thread1357.start()
Thread1358.start()
Thread1359.start()
Thread1360.start()
Thread1361.start()
Thread1362.start()
Thread1363.start()
Thread1364.start()
Thread1365.start()
Thread1366.start()
Thread1367.start()
Thread1368.start()
Thread1369.start()
Thread1370.start()
Thread1371.start()
Thread1372.start()
Thread1373.start()
Thread1374.start()
Thread1375.start()
Thread1376.start()
Thread1377.start()
Thread1378.start()
Thread1379.start()
Thread1380.start()
Thread1381.start()
Thread1382.start()
Thread1383.start()
Thread1384.start()
Thread1385.start()
Thread1386.start()
Thread1387.start()
Thread1388.start()
Thread1389.start()
Thread1390.start()
Thread1391.start()
Thread1392.start()
Thread1393.start()
Thread1394.start()
Thread1395.start()
Thread1396.start()
Thread1397.start()
Thread1398.start()
Thread1399.start()
Thread1400.start()
Thread1401.start()
Thread1402.start()
Thread1403.start()
Thread1404.start()
Thread1405.start()
Thread1406.start()
Thread1407.start()
Thread1408.start()
Thread1409.start()
Thread1410.start()
Thread1411.start()
Thread1412.start()
Thread1413.start()
Thread1414.start()
Thread1415.start()
Thread1416.start()
Thread1417.start()
Thread1418.start()
Thread1419.start()
Thread1420.start()
Thread1421.start()
Thread1422.start()
Thread1423.start()
Thread1424.start()
Thread1425.start()
Thread1426.start()
Thread1427.start()
Thread1428.start()
Thread1429.start()
Thread1430.start()
Thread1431.start()
Thread1432.start()
Thread1433.start()
Thread1434.start()
Thread1435.start()
Thread1436.start()
Thread1437.start()
Thread1438.start()
Thread1439.start()
Thread1440.start()
Thread1441.start()
Thread1442.start()
Thread1443.start()
Thread1444.start()
Thread1445.start()
Thread1446.start()
Thread1447.start()
Thread1448.start()
Thread1449.start()
Thread1450.start()
Thread1451.start()
Thread1452.start()
Thread1453.start()
Thread1454.start()
Thread1455.start()
Thread1456.start()
Thread1457.start()
Thread1458.start()
Thread1459.start()
Thread1460.start()
Thread1461.start()
Thread1462.start()
Thread1463.start()
Thread1464.start()
Thread1465.start()
Thread1466.start()
Thread1467.start()
Thread1468.start()
Thread1469.start()
Thread1470.start()
Thread1471.start()
Thread1472.start()
Thread1473.start()
Thread1474.start()
Thread1475.start()
Thread1476.start()
Thread1477.start()
Thread1478.start()
Thread1479.start()
Thread1480.start()
Thread1481.start()
Thread1482.start()
Thread1483.start()
Thread1484.start()
Thread1485.start()
Thread1486.start()
Thread1487.start()
Thread1488.start()
Thread1489.start()
Thread1490.start()
Thread1491.start()
Thread1492.start()
Thread1493.start()
Thread1494.start()
Thread1495.start()
Thread1496.start()
Thread1497.start()
Thread1498.start()
Thread1499.start()
Thread1500.start()
Thread1501.start()
Thread1502.start()
Thread1503.start()
Thread1504.start()
Thread1505.start()
Thread1506.start()
Thread1507.start()
Thread1508.start()
Thread1509.start()
Thread1510.start()
Thread1511.start()
Thread1512.start()
Thread1513.start()
Thread1514.start()
Thread1515.start()
Thread1516.start()
Thread1517.start()
Thread1518.start()
Thread1519.start()
Thread1520.start()
Thread1521.start()
Thread1522.start()
Thread1523.start()
Thread1524.start()
Thread1525.start()
Thread1526.start()
Thread1527.start()
Thread1528.start()
Thread1529.start()
Thread1530.start()
Thread1531.start()
Thread1532.start()
Thread1533.start()
Thread1534.start()
Thread1535.start()
Thread1536.start()
Thread1537.start()
Thread1538.start()
Thread1539.start()
Thread1540.start()
Thread1541.start()
Thread1542.start()
Thread1543.start()
Thread1544.start()
Thread1545.start()
Thread1546.start()
Thread1547.start()
Thread1548.start()
Thread1549.start()
Thread1550.start()
Thread1551.start()
Thread1552.start()
Thread1553.start()
Thread1554.start()
Thread1555.start()
Thread1556.start()
Thread1557.start()
Thread1558.start()
Thread1559.start()
Thread1560.start()
Thread1561.start()
Thread1562.start()
Thread1563.start()
Thread1564.start()
Thread1565.start()
Thread1566.start()
Thread1567.start()
Thread1568.start()
Thread1569.start()
Thread1570.start()
Thread1571.start()
Thread1572.start()
Thread1573.start()
Thread1574.start()
Thread1575.start()
Thread1576.start()
Thread1577.start()
Thread1578.start()
Thread1579.start()
Thread1580.start()
Thread1581.start()
Thread1582.start()
Thread1583.start()
Thread1584.start()
Thread1585.start()
Thread1586.start()
Thread1587.start()
Thread1588.start()
Thread1589.start()
Thread1590.start()
Thread1591.start()
Thread1592.start()
Thread1593.start()
Thread1594.start()
Thread1595.start()
Thread1596.start()
Thread1597.start()
Thread1598.start()
Thread1599.start()
Thread1600.start()
Thread1601.start()
Thread1602.start()
Thread1603.start()
Thread1604.start()
Thread1605.start()
Thread1606.start()
Thread1607.start()
Thread1608.start()
Thread1609.start()
Thread1610.start()
Thread1611.start()
Thread1612.start()
Thread1613.start()
Thread1614.start()
Thread1615.start()
Thread1616.start()
Thread1617.start()
Thread1618.start()
Thread1619.start()
Thread1620.start()
Thread1621.start()
Thread1622.start()
Thread1623.start()
Thread1624.start()
Thread1625.start()
Thread1626.start()
Thread1627.start()
Thread1628.start()
Thread1629.start()
Thread1630.start()
Thread1631.start()
Thread1632.start()
Thread1633.start()
Thread1634.start()
Thread1635.start()
Thread1636.start()
Thread1637.start()
Thread1638.start()
Thread1639.start()
Thread1640.start()
Thread1641.start()
Thread1642.start()
Thread1643.start()
Thread1644.start()
Thread1645.start()
Thread1646.start()
Thread1647.start()
Thread1648.start()
Thread1649.start()
Thread1650.start()
Thread1651.start()
Thread1652.start()
Thread1653.start()
Thread1654.start()
Thread1655.start()
Thread1656.start()
Thread1657.start()
Thread1658.start()
Thread1659.start()
Thread1660.start()
Thread1661.start()
Thread1662.start()
Thread1663.start()
Thread1664.start()
Thread1665.start()
Thread1666.start()
Thread1667.start()
Thread1668.start()
Thread1669.start()
Thread1670.start()
Thread1671.start()
Thread1672.start()
Thread1673.start()
Thread1674.start()
Thread1675.start()
Thread1676.start()
Thread1677.start()
Thread1678.start()
Thread1679.start()
Thread1680.start()
Thread1681.start()
Thread1682.start()
Thread1683.start()
Thread1684.start()
Thread1685.start()
Thread1686.start()
Thread1687.start()
Thread1688.start()
Thread1689.start()
Thread1690.start()
Thread1691.start()
Thread1692.start()
Thread1693.start()
Thread1694.start()
Thread1695.start()
Thread1696.start()
Thread1697.start()
Thread1698.start()
Thread1699.start()
Thread1700.start()
Thread1701.start()
Thread1702.start()
Thread1703.start()
Thread1704.start()
Thread1705.start()
Thread1706.start()
Thread1707.start()
Thread1708.start()
Thread1709.start()
Thread1710.start()
Thread1711.start()
Thread1712.start()
Thread1713.start()
Thread1714.start()
Thread1715.start()
Thread1716.start()
Thread1717.start()
Thread1718.start()
Thread1719.start()
Thread1720.start()
Thread1721.start()
Thread1722.start()
Thread1723.start()
Thread1724.start()
Thread1725.start()
Thread1726.start()
Thread1727.start()
Thread1728.start()
Thread1729.start()
Thread1730.start()
Thread1731.start()
Thread1732.start()
Thread1733.start()
Thread1734.start()
Thread1735.start()
Thread1736.start()
Thread1737.start()
Thread1738.start()
Thread1739.start()
Thread1740.start()
Thread1741.start()
Thread1742.start()
Thread1743.start()
Thread1744.start()
Thread1745.start()
Thread1746.start()
Thread1747.start()
Thread1748.start()
Thread1749.start()
Thread1750.start()
Thread1751.start()
Thread1752.start()
Thread1753.start()
Thread1754.start()
Thread1755.start()
Thread1756.start()
Thread1757.start()
Thread1758.start()
Thread1759.start()
Thread1760.start()
Thread1761.start()
Thread1762.start()
Thread1763.start()
Thread1764.start()
Thread1765.start()
Thread1766.start()
Thread1767.start()
Thread1768.start()
Thread1769.start()
Thread1770.start()
Thread1771.start()
Thread1772.start()
Thread1773.start()
Thread1774.start()
Thread1775.start()
Thread1776.start()
Thread1777.start()
Thread1778.start()
Thread1779.start()
Thread1780.start()
Thread1781.start()
Thread1782.start()
Thread1783.start()
Thread1784.start()
Thread1785.start()
Thread1786.start()
Thread1787.start()
Thread1788.start()
Thread1789.start()
Thread1790.start()
Thread1791.start()
Thread1792.start()
Thread1793.start()
Thread1794.start()
Thread1795.start()
Thread1796.start()
Thread1797.start()
Thread1798.start()
Thread1799.start()
Thread1800.start()
Thread1801.start()
Thread1802.start()
Thread1803.start()
Thread1804.start()
Thread1805.start()
Thread1806.start()
Thread1807.start()
Thread1808.start()
Thread1809.start()
Thread1810.start()
Thread1811.start()
Thread1812.start()
Thread1813.start()
Thread1814.start()
Thread1815.start()
Thread1816.start()
Thread1817.start()
Thread1818.start()
Thread1819.start()
Thread1820.start()
Thread1821.start()
Thread1822.start()
Thread1823.start()
Thread1824.start()
Thread1825.start()
Thread1826.start()
Thread1827.start()
Thread1828.start()
Thread1829.start()
Thread1830.start()
Thread1831.start()
Thread1832.start()
Thread1833.start()
Thread1834.start()
Thread1835.start()
Thread1836.start()
Thread1837.start()
Thread1838.start()
Thread1839.start()
Thread1840.start()
Thread1841.start()
Thread1842.start()
Thread1843.start()
Thread1844.start()
Thread1845.start()
Thread1846.start()
Thread1847.start()
Thread1848.start()
Thread1849.start()
Thread1850.start()
Thread1851.start()
Thread1852.start()
Thread1853.start()
Thread1854.start()
Thread1855.start()
Thread1856.start()
Thread1857.start()
Thread1858.start()
Thread1859.start()
Thread1860.start()
Thread1861.start()
Thread1862.start()
Thread1863.start()
Thread1864.start()
Thread1865.start()
Thread1866.start()
Thread1867.start()
Thread1868.start()
Thread1869.start()
Thread1870.start()
Thread1871.start()
Thread1872.start()
Thread1873.start()
Thread1874.start()
Thread1875.start()
Thread1876.start()
Thread1877.start()
Thread1878.start()
Thread1879.start()
Thread1880.start()
Thread1881.start()
Thread1882.start()
Thread1883.start()
Thread1884.start()
Thread1885.start()
Thread1886.start()
Thread1887.start()
Thread1888.start()
Thread1889.start()
Thread1890.start()
Thread1891.start()
Thread1892.start()
Thread1893.start()
Thread1894.start()
Thread1895.start()
Thread1896.start()
Thread1897.start()
Thread1898.start()
Thread1899.start()
Thread1900.start()
Thread1901.start()
Thread1902.start()
Thread1903.start()
Thread1904.start()
Thread1905.start()
Thread1906.start()
Thread1907.start()
Thread1908.start()
Thread1909.start()
Thread1910.start()
Thread1911.start()
Thread1912.start()
Thread1913.start()
Thread1914.start()
Thread1915.start()
Thread1916.start()
Thread1917.start()
Thread1918.start()
Thread1919.start()
Thread1920.start()
Thread1921.start()
Thread1922.start()
Thread1923.start()
Thread1924.start()
Thread1925.start()
Thread1926.start()
Thread1927.start()
Thread1928.start()
Thread1929.start()
Thread1930.start()
Thread1931.start()
Thread1932.start()
Thread1933.start()
Thread1934.start()
Thread1935.start()
Thread1936.start()
Thread1937.start()
Thread1938.start()
Thread1939.start()
Thread1940.start()
Thread1941.start()
Thread1942.start()
Thread1943.start()
Thread1944.start()
Thread1945.start()
Thread1946.start()
Thread1947.start()
Thread1948.start()
Thread1949.start()
Thread1950.start()
Thread1951.start()
Thread1952.start()
Thread1953.start()
Thread1954.start()
Thread1955.start()
Thread1956.start()
Thread1957.start()
Thread1958.start()
Thread1959.start()
Thread1960.start()
Thread1961.start()
Thread1962.start()
Thread1963.start()
Thread1964.start()
Thread1965.start()
Thread1966.start()
Thread1967.start()
Thread1968.start()
Thread1969.start()
Thread1970.start()
Thread1971.start()
Thread1972.start()
Thread1973.start()
Thread1974.start()
Thread1975.start()
Thread1976.start()
Thread1977.start()
Thread1978.start()
Thread1979.start()
Thread1980.start()
Thread1981.start()
Thread1982.start()
Thread1983.start()
Thread1984.start()
Thread1985.start()
Thread1986.start()
Thread1987.start()
Thread1988.start()
Thread1989.start()
Thread1990.start()
Thread1991.start()
Thread1992.start()
Thread1993.start()
Thread1994.start()
Thread1995.start()
Thread1996.start()
Thread1997.start()
Thread1998.start()
Thread1999.start()
Thread2000.start()
Thread2001.start()
Thread2002.start()
Thread2003.start()
Thread2004.start()
Thread2005.start()
Thread2006.start()
Thread2007.start()
Thread2008.start()
Thread2009.start()
Thread2010.start()
Thread2011.start()
Thread2012.start()
Thread2013.start()
Thread2014.start()
Thread2015.start()
Thread2016.start()
Thread2017.start()
Thread2018.start()
Thread2019.start()
Thread2020.start()
Thread2021.start()
Thread2022.start()
Thread2023.start()
Thread2024.start()
Thread2025.start()
Thread2026.start()
Thread2027.start()
Thread2028.start()
Thread2029.start()
Thread2030.start()
Thread2031.start()
Thread2032.start()
Thread2033.start()
Thread2034.start()
Thread2035.start()
Thread2036.start()
Thread2037.start()
Thread2038.start()
Thread2039.start()
Thread2040.start()
Thread2041.start()
Thread2042.start()
Thread2043.start()
Thread2044.start()
Thread2045.start()
Thread2046.start()
Thread2047.start()
Thread2048.start()
Thread2049.start()
Thread2050.start()
Thread2051.start()
Thread2052.start()
Thread2053.start()
Thread2054.start()
Thread2055.start()
Thread2056.start()
Thread2057.start()
Thread2058.start()
Thread2059.start()
Thread2060.start()
Thread2061.start()
Thread2062.start()
Thread2063.start()
Thread2064.start()
Thread2065.start()
Thread2066.start()
Thread2067.start()
Thread2068.start()
Thread2069.start()
Thread2070.start()
Thread2071.start()
Thread2072.start()
Thread2073.start()
Thread2074.start()
Thread2075.start()
Thread2076.start()
Thread2077.start()
Thread2078.start()
Thread2079.start()
Thread2080.start()
Thread2081.start()
Thread2082.start()
Thread2083.start()
Thread2084.start()
Thread2085.start()
Thread2086.start()
Thread2087.start()
Thread2088.start()
Thread2089.start()
Thread2090.start()
Thread2091.start()
Thread2092.start()
Thread2093.start()
Thread2094.start()
Thread2095.start()
Thread2096.start()
Thread2097.start()
Thread2098.start()
Thread2099.start()
Thread2100.start()
Thread2101.start()
Thread2102.start()
Thread2103.start()
Thread2104.start()
Thread2105.start()
Thread2106.start()
Thread2107.start()
Thread2108.start()
Thread2109.start()
Thread2110.start()
Thread2111.start()
Thread2112.start()
Thread2113.start()
Thread2114.start()
Thread2115.start()
Thread2116.start()
Thread2117.start()
Thread2118.start()
Thread2119.start()
Thread2120.start()
Thread2121.start()
Thread2122.start()
Thread2123.start()
Thread2124.start()
Thread2125.start()
Thread2126.start()
Thread2127.start()
Thread2128.start()
Thread2129.start()
Thread2130.start()
Thread2131.start()
Thread2132.start()
Thread2133.start()
Thread2134.start()
Thread2135.start()
Thread2136.start()
Thread2137.start()
Thread2138.start()
Thread2139.start()
Thread2140.start()
Thread2141.start()
Thread2142.start()
Thread2143.start()
Thread2144.start()
Thread2145.start()
Thread2146.start()
Thread2147.start()
Thread2148.start()
Thread2149.start()
Thread2150.start()
Thread2151.start()
Thread2152.start()
Thread2153.start()
Thread2154.start()
Thread2155.start()
Thread2156.start()
Thread2157.start()
Thread2158.start()
Thread2159.start()
Thread2160.start()
Thread2161.start()
Thread2162.start()
Thread2163.start()
Thread2164.start()
Thread2165.start()
Thread2166.start()
Thread2167.start()
Thread2168.start()
Thread2169.start()
Thread2170.start()
Thread2171.start()
Thread2172.start()
Thread2173.start()
Thread2174.start()
Thread2175.start()
Thread2176.start()
Thread2177.start()
Thread2178.start()
Thread2179.start()
Thread2180.start()
Thread2181.start()
Thread2182.start()
Thread2183.start()
Thread2184.start()
Thread2185.start()
Thread2186.start()
Thread2187.start()
Thread2188.start()
Thread2189.start()
Thread2190.start()
Thread2191.start()
Thread2192.start()
Thread2193.start()
Thread2194.start()
Thread2195.start()
Thread2196.start()
Thread2197.start()
Thread2198.start()
Thread2199.start()
Thread2200.start()
Thread2201.start()
Thread2202.start()
Thread2203.start()
Thread2204.start()
Thread2205.start()
Thread2206.start()
Thread2207.start()
Thread2208.start()
Thread2209.start()
Thread2210.start()
Thread2211.start()
Thread2212.start()
Thread2213.start()
Thread2214.start()
Thread2215.start()
Thread2216.start()
Thread2217.start()
Thread2218.start()
Thread2219.start()
Thread2220.start()
Thread2221.start()
Thread2222.start()
Thread2223.start()
Thread2224.start()
Thread2225.start()
Thread2226.start()
Thread2227.start()
Thread2228.start()
Thread2229.start()
Thread2230.start()
Thread2231.start()
Thread2232.start()
Thread2233.start()
Thread2234.start()
Thread2235.start()
Thread2236.start()
Thread2237.start()
Thread2238.start()
Thread2239.start()
Thread2240.start()
Thread2241.start()
Thread2242.start()
Thread2243.start()
Thread2244.start()
Thread2245.start()
Thread2246.start()
Thread2247.start()
Thread2248.start()
Thread2249.start()
Thread2250.start()
Thread2251.start()
Thread2252.start()
Thread2253.start()
Thread2254.start()
Thread2255.start()
Thread2256.start()
Thread2257.start()
Thread2258.start()
Thread2259.start()
Thread2260.start()
Thread2261.start()
Thread2262.start()
Thread2263.start()
Thread2264.start()
Thread2265.start()
Thread2266.start()
Thread2267.start()
Thread2268.start()
Thread2269.start()
Thread2270.start()
Thread2271.start()
Thread2272.start()
Thread2273.start()
Thread2274.start()
Thread2275.start()
Thread2276.start()
Thread2277.start()
Thread2278.start()
Thread2279.start()
Thread2280.start()
Thread2281.start()
Thread2282.start()
Thread2283.start()
Thread2284.start()
Thread2285.start()
Thread2286.start()
Thread2287.start()
Thread2288.start()
Thread2289.start()
Thread2290.start()
Thread2291.start()
Thread2292.start()
Thread2293.start()
Thread2294.start()
Thread2295.start()
Thread2296.start()
Thread2297.start()
Thread2298.start()
Thread2299.start()
Thread2300.start()
Thread2301.start()
Thread2302.start()
Thread2303.start()
Thread2304.start()
Thread2305.start()
Thread2306.start()
Thread2307.start()
Thread2308.start()
Thread2309.start()
Thread2310.start()
Thread2311.start()
Thread2312.start()
Thread2313.start()
Thread2314.start()
Thread2315.start()
Thread2316.start()
Thread2317.start()
Thread2318.start()
Thread2319.start()
Thread2320.start()
Thread2321.start()
Thread2322.start()
Thread2323.start()
Thread2324.start()
Thread2325.start()
Thread2326.start()
Thread2327.start()
Thread2328.start()
Thread2329.start()
Thread2330.start()
Thread2331.start()
Thread2332.start()
Thread2333.start()
Thread2334.start()
Thread2335.start()
Thread2336.start()
Thread2337.start()
Thread2338.start()
Thread2339.start()
Thread2340.start()
Thread2341.start()
Thread2342.start()
Thread2343.start()
Thread2344.start()
Thread2345.start()
Thread2346.start()
Thread2347.start()
Thread2348.start()
Thread2349.start()
Thread2350.start()
Thread2351.start()
Thread2352.start()
Thread2353.start()
Thread2354.start()
Thread2355.start()
Thread2356.start()
Thread2357.start()
Thread2358.start()
Thread2359.start()
Thread2360.start()
Thread2361.start()
Thread2362.start()
Thread2363.start()
Thread2364.start()
Thread2365.start()
Thread2366.start()
Thread2367.start()
Thread2368.start()
Thread2369.start()
Thread2370.start()
Thread2371.start()
Thread2372.start()
Thread2373.start()
Thread2374.start()
Thread2375.start()
Thread2376.start()
Thread2377.start()
Thread2378.start()
Thread2379.start()
Thread2380.start()
Thread2381.start()
Thread2382.start()
Thread2383.start()
Thread2384.start()
Thread2385.start()
Thread2386.start()
Thread2387.start()
Thread2388.start()
Thread2389.start()
Thread2390.start()
Thread2391.start()
Thread2392.start()
Thread2393.start()
Thread2394.start()
Thread2395.start()
Thread2396.start()
Thread2397.start()
Thread2398.start()
Thread2399.start()
Thread2400.start()
Thread2401.start()
Thread2402.start()
Thread2403.start()
Thread2404.start()
Thread2405.start()
Thread2406.start()
Thread2407.start()
Thread2408.start()
Thread2409.start()
Thread2410.start()
Thread2411.start()
Thread2412.start()
Thread2413.start()
Thread2414.start()
Thread2415.start()
Thread2416.start()
Thread2417.start()
Thread2418.start()
Thread2419.start()
Thread2420.start()
Thread2421.start()
Thread2422.start()
Thread2423.start()
Thread2424.start()
Thread2425.start()
Thread2426.start()
Thread2427.start()
Thread2428.start()
Thread2429.start()
Thread2430.start()
Thread2431.start()
Thread2432.start()
Thread2433.start()
Thread2434.start()
Thread2435.start()
Thread2436.start()
Thread2437.start()
Thread2438.start()
Thread2439.start()
Thread2440.start()
Thread2441.start()
Thread2442.start()
Thread2443.start()
Thread2444.start()
Thread2445.start()
Thread2446.start()
Thread2447.start()
Thread2448.start()
Thread2449.start()
Thread2450.start()
Thread2451.start()
Thread2452.start()
Thread2453.start()
Thread2454.start()
Thread2455.start()
Thread2456.start()
Thread2457.start()
Thread2458.start()
Thread2459.start()
Thread2460.start()
Thread2461.start()
Thread2462.start()
Thread2463.start()
Thread2464.start()
Thread2465.start()
Thread2466.start()
Thread2467.start()
Thread2468.start()
Thread2469.start()
Thread2470.start()
Thread2471.start()
Thread2472.start()
Thread2473.start()
Thread2474.start()
Thread2475.start()
Thread2476.start()
Thread2477.start()
Thread2478.start()
Thread2479.start()
Thread2480.start()
Thread2481.start()
Thread2482.start()
Thread2483.start()
Thread2484.start()
Thread2485.start()
Thread2486.start()
Thread2487.start()
Thread2488.start()
Thread2489.start()
Thread2490.start()
Thread2491.start()
Thread2492.start()
Thread2493.start()
Thread2494.start()
Thread2495.start()
Thread2496.start()
Thread2497.start()
Thread2498.start()
Thread2499.start()
Thread2500.start()
Thread2501.start()
Thread2502.start()
Thread2503.start()
Thread2504.start()
Thread2505.start()
Thread2506.start()
Thread2507.start()
Thread2508.start()
Thread2509.start()
Thread2510.start()
Thread2511.start()
Thread2512.start()
Thread2513.start()
Thread2514.start()
Thread2515.start()
Thread2516.start()
Thread2517.start()
Thread2518.start()
Thread2519.start()
Thread2520.start()
Thread2521.start()
Thread2522.start()
Thread2523.start()
Thread2524.start()
Thread2525.start()
Thread2526.start()
Thread2527.start()
Thread2528.start()
Thread2529.start()
Thread2530.start()
Thread2531.start()
Thread2532.start()
Thread2533.start()
Thread2534.start()
Thread2535.start()
Thread2536.start()
Thread2537.start()
Thread2538.start()
Thread2539.start()
Thread2540.start()
Thread2541.start()
Thread2542.start()
Thread2543.start()
Thread2544.start()
Thread2545.start()
Thread2546.start()
Thread2547.start()
Thread2548.start()
Thread2549.start()
Thread2550.start()
Thread2551.start()
Thread2552.start()
Thread2553.start()
Thread2554.start()
Thread2555.start()
Thread2556.start()
Thread2557.start()
Thread2558.start()
Thread2559.start()
Thread2560.start()
Thread2561.start()
Thread2562.start()
Thread2563.start()
Thread2564.start()
Thread2565.start()
Thread2566.start()
Thread2567.start()
Thread2568.start()
Thread2569.start()
Thread2570.start()
Thread2571.start()
Thread2572.start()
Thread2573.start()
Thread2574.start()
Thread2575.start()
Thread2576.start()
Thread2577.start()
Thread2578.start()
Thread2579.start()
Thread2580.start()
Thread2581.start()
Thread2582.start()
Thread2583.start()
Thread2584.start()
Thread2585.start()
Thread2586.start()
Thread2587.start()
Thread2588.start()
Thread2589.start()
Thread2590.start()
Thread2591.start()
Thread2592.start()
Thread2593.start()
Thread2594.start()
Thread2595.start()
Thread2596.start()
Thread2597.start()
Thread2598.start()
Thread2599.start()
Thread2600.start()
Thread2601.start()
Thread2602.start()
Thread2603.start()
Thread2604.start()
Thread2605.start()
Thread2606.start()
Thread2607.start()
Thread2608.start()
Thread2609.start()
Thread2610.start()
Thread2611.start()
Thread2612.start()
Thread2613.start()
Thread2614.start()
Thread2615.start()
Thread2616.start()
Thread2617.start()
Thread2618.start()
Thread2619.start()
Thread2620.start()
Thread2621.start()
Thread2622.start()
Thread2623.start()
Thread2624.start()
Thread2625.start()
Thread2626.start()
Thread2627.start()
Thread2628.start()
Thread2629.start()
Thread2630.start()
Thread2631.start()
Thread2632.start()
Thread2633.start()
Thread2634.start()
Thread2635.start()
Thread2636.start()
Thread2637.start()
Thread2638.start()
Thread2639.start()
Thread2640.start()
Thread2641.start()
Thread2642.start()
Thread2643.start()
Thread2644.start()
Thread2645.start()
Thread2646.start()
Thread2647.start()
Thread2648.start()
Thread2649.start()
Thread2650.start()
Thread2651.start()
Thread2652.start()
Thread2653.start()
Thread2654.start()
Thread2655.start()
Thread2656.start()
Thread2657.start()
Thread2658.start()
Thread2659.start()
Thread2660.start()
Thread2661.start()
Thread2662.start()
Thread2663.start()
Thread2664.start()
Thread2665.start()
Thread2666.start()
Thread2667.start()
Thread2668.start()
Thread2669.start()
Thread2670.start()
Thread2671.start()
Thread2672.start()
Thread2673.start()
Thread2674.start()
Thread2675.start()
Thread2676.start()
Thread2677.start()
Thread2678.start()
Thread2679.start()
Thread2680.start()
Thread2681.start()
Thread2682.start()
Thread2683.start()
Thread2684.start()
Thread2685.start()
Thread2686.start()
Thread2687.start()
Thread2688.start()
Thread2689.start()
Thread2690.start()
Thread2691.start()
Thread2692.start()
Thread2693.start()
Thread2694.start()
Thread2695.start()
Thread2696.start()
Thread2697.start()
Thread2698.start()
Thread2699.start()
Thread2700.start()
Thread2701.start()
Thread2702.start()
Thread2703.start()
Thread2704.start()
Thread2705.start()
Thread2706.start()
Thread2707.start()
Thread2708.start()
Thread2709.start()
Thread2710.start()
Thread2711.start()
Thread2712.start()
Thread2713.start()
Thread2714.start()
Thread2715.start()
Thread2716.start()
Thread2717.start()
Thread2718.start()
Thread2719.start()
Thread2720.start()
Thread2721.start()
Thread2722.start()
Thread2723.start()
Thread2724.start()
Thread2725.start()
Thread2726.start()
Thread2727.start()
Thread2728.start()
Thread2729.start()
Thread2730.start()
Thread2731.start()
Thread2732.start()
Thread2733.start()
Thread2734.start()
Thread2735.start()
Thread2736.start()
Thread2737.start()
Thread2738.start()
Thread2739.start()
Thread2740.start()
Thread2741.start()
Thread2742.start()
Thread2743.start()
Thread2744.start()
Thread2745.start()
Thread2746.start()
Thread2747.start()
Thread2748.start()
Thread2749.start()
Thread2750.start()
Thread2751.start()
Thread2752.start()
Thread2753.start()
Thread2754.start()
Thread2755.start()
Thread2756.start()