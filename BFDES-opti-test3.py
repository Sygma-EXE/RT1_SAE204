from Crypto.Cipher import DES
import itertools
import threading
import base64

##############################################################################################
#estimated time on the base laptop: 141 days                                                 #
##############################################################################################

##############################################################################################
#estimated time on the big boy at home: 7 hours (need to test)                               #
##############################################################################################

key = b'aaaaaAz8'
texte = b'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus.'

#Chiffrement
enc = DES.new(key, DES.MODE_CFB)
cipher = enc.encrypt(texte)
enc_cipher = base64.b64encode(enc.iv + cipher)
#print(enc_cipher)

#DÃ©chiffrement
decoded = base64.b64decode(enc_cipher)
iv = decoded[:8]
ciphertext = decoded[8:]

def decrypt_aa():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'aa':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -aa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ab():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ab':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ab')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ad():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ad':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ad')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_af():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'af':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -af')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ah():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ah':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ah')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aj():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'aj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -aj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_al():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'al':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -al')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_an():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'an':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -an')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ap():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ap':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ap')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ar':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ar')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_at():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'at':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -at')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_av():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'av':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -av')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ax():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ax':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ax')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_az():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'az':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -az')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aA():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'aA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -aA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aB():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'aB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -aB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aD():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'aD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -aD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aF():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'aF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -aF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aH():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'aH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -aH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aJ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'aJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -aJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aL():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'aL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -aL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aN():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'aN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -aN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aP():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'aP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -aP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aR():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'aR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -aR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aT():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'aT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -aT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aV():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'aV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -aV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aX():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'aX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -aX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aZ():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'aZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -aZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_a0():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_a2():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_a4():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_a6():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_a8():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aexcl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_adquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_adoll():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aand():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aquote():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_apar():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aast():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_avir():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_app():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_atp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aless():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_amore():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aaro():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_acroc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_absl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_acirc():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aesp():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_acr():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ahl():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_atild():
    i = 0
    for x in map(''.join, itertools.product('abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'a~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -a~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ba():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ba':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ba')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bb():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bd():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bd':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bf():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bf':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bh():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bh':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bj():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bl():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bn():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bp():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_br():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'br':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -br')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bt():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bt':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bv():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bx():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bz():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bA():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bB():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bD():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bF():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bH():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bJ():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bL():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bN():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bP():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bR():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bT():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bV():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bX():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bZ():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'bZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_b0():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_b2():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_b4():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_b6():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_b8():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bexcl():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bdquote():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bdoll():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_band():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bquote():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bpar():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bast():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bvir():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bpp():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_btp():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bless():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bmore():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_baro():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bcroc():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bbsl():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bcirc():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_besp():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bcr():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bhl():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_btild():
    i = 0
    for x in map(''.join, itertools.product('badfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'b~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -b~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_da():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'da':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -da')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_db():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'db':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -db')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dd():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dd':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_df():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'df':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -df')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dh():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dh':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dj():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dl():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dn():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dp():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dr():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dt():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dt':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dv():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dx():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dz():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dA():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dB():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dD():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dF():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dH():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dJ():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dL():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dN():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dP():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dR():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dT():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dV():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dX():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dZ():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_d0():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_d2():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_d4():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_d6():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_d8():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dexcl():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ddquote():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ddoll():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dand():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dquote():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dpar():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dast():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dvir():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dpp():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dtp():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dless():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dmore():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_daro():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dcroc():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dbsl():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dcirc():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_desp():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dcr():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dhl():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dtild():
    i = 0
    for x in map(''.join, itertools.product('dabfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'd~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -d~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fa():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fa':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fb():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fd():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fd':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ff():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ff':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ff')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fh():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fh':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fj():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fl():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fn():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fp():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fr():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ft():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ft':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ft')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fv():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fx():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fz():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fA():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fB():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fD():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fF():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fH():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fJ():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fL():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fN():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fP():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fR():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fT():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fV():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fX():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fZ():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'fZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -fZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_f0():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_f2():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_f4():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_f6():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_f8():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fexcl():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fdquote():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fdoll():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fand():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fquote():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fpar():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fast():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fvir():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fpp():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ftp():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fless():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fmore():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_faro():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fcroc():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fbsl():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fcirc():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fesp():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fcr():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_fhl():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ftild():
    i = 0
    for x in map(''.join, itertools.product('fabdhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'f~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -f~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ha():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ha':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ha')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hb():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hd():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hd':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hf():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hf':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hh():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hh':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hj():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hl():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hn():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hp():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hr():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ht():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ht':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ht')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hv():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hx():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hz():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hA():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hB():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hD():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hF():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hH():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hJ():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hL():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hN():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hP():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hR():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hT():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hV():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hX():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hZ():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'hZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_h0():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_h2():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_h4():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_h6():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_h8():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hexcl():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hdquote():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hdoll():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hand():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hquote():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hpar():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hast():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hvir():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hpp():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_htp():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hless():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hmore():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_haro():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hcroc():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hbsl():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hcirc():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hesp():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hcr():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hhl():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_htild():
    i = 0
    for x in map(''.join, itertools.product('habdfjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'h~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -h~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ja():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ja':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ja')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jb():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jd():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jd':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jf():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jf':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jh():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jh':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jj():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jl():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jn():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jp():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jr():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jt():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jt':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jv():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jx():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jz():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jA():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jB():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jD():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jF():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jH():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jJ():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jL():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jN():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jP():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jR():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jT():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jV():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jX():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jZ():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'jZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -jZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_j0():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_j2():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_j4():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_j6():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_j8():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jexcl():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jdquote():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jdoll():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jand():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jquote():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jpar():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jast():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jvir():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jpp():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jtp():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jless():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jmore():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jaro():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jcroc():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jbsl():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jcirc():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jesp():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jcr():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jhl():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_jtild():
    i = 0
    for x in map(''.join, itertools.product('jabdfhlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'j~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -j~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_la():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'la':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -la')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lb():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ld():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ld':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ld')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lf():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lf':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lh():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lh':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lj():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ll():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'll':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ll')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ln():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ln':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ln')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lp():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lr():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lt():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lt':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lv():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lx():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lz():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lA():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lB():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lD():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lF():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lH():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lJ():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lL():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lN():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lP():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lR():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lT():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lV():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lX():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lZ():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'lZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -lZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_l0():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_l2():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_l4():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_l6():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_l8():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lexcl():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ldquote():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ldoll():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_land():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lquote():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lpar():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_last():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lvir():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lpp():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ltp():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lless():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lmore():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_laro():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lcroc():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lbsl():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lcirc():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lesp():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lcr():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lhl():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ltild():
    i = 0
    for x in map(''.join, itertools.product('labdfhjnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'l~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -l~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_na():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'na':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -na')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nb():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nd():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nd':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nf():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nf':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nh():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nh':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nj():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nl():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nn():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_np():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'np':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -np')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nr():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nt():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nt':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nv():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nx():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nz():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nA():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nB():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nD():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nF():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nH():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nJ():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nL():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nN():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nP():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nR():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nT():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nV():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nX():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nZ():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'nZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -nZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_n0():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_n2():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_n4():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_n6():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_n8():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nexcl():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ndquote():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ndoll():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nand():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nquote():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_npar():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nast():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nvir():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_npp():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ntp():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nless():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nmore():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_naro():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ncroc():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nbsl():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ncirc():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nesp():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ncr():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_nhl():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ntild():
    i = 0
    for x in map(''.join, itertools.product('nabdfhjlprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'n~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -n~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pa():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pa':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pb():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pd():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pd':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pf():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pf':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ph():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ph':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ph')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pj():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pl():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pn():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pp():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pr():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pt():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pt':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pv():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_px():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'px':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -px')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pz():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pA():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pB():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pD():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pF():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pH():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pJ():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pL():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pN():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pP():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pR():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pT():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pV():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pX():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pZ():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_p0():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_p2():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_p4():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_p6():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_p8():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pexcl():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pdquote():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pdoll():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pand():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pquote():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ppar():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_past():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pvir():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ppp():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ptp():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pless():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pmore():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_paro():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pcroc():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pbsl():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pcirc():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pesp():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pcr():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_phl():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ptild():
    i = 0
    for x in map(''.join, itertools.product('pabdfhjlnrtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'p~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -p~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ra():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ra':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ra')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rb():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rd():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rd':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rf():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rf':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rh():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rh':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rj():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rl():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rn():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rp():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rr():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rt():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rt':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rv():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rx():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rz():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rA():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rB():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rD():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rF():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rH():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rJ():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rL():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rN():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rP():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rR():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rT():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rV():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rX():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rZ():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'rZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -rZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_r0():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_r2():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_r4():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_r6():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_r8():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rexcl():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rdquote():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rdoll():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rand():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rquote():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rpar():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rast():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rvir():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rpp():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rtp():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rless():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rmore():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_raro():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rcroc():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rbsl():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rcirc():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_resp():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rcr():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rhl():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_rtild():
    i = 0
    for x in map(''.join, itertools.product('rabdfhjlnptvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'r~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -r~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ta():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ta':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ta')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tb():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_td():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'td':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -td')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tf():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tf':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_th():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'th':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -th')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tj():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tl():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tn():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tp():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tr():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tt():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tt':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tv():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tx():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tz():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tA():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tB():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tD():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tF():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tH():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tJ():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tL():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tN():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tP():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tR():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tT():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tV():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tX():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tZ():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_t0():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_t2():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_t4():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_t6():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_t8():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_texcl():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tdquote():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tdoll():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tand():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tquote():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tpar():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tast():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tvir():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tpp():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ttp():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tless():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tmore():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_taro():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tcroc():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tbsl():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tcirc():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tesp():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tcr():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_thl():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ttild():
    i = 0
    for x in map(''.join, itertools.product('tabdfhjlnprvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 't~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -t~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_va():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'va':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -va')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vb():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vd():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vd':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vf():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vf':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vh():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vh':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vj():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vl():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vn():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vp():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vr():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vt():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vt':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vv():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vx():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vz():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vA():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vB():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vD():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vF():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vH():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vJ():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vL():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vN():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vP():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vR():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vT():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vV():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vX():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vZ():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_v0():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_v2():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_v4():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_v6():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_v8():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vexcl():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vdquote():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vdoll():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vand():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vquote():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vpar():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vast():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vvir():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vpp():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vtp():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vless():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vmore():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_varo():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vcroc():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vbsl():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vcirc():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vesp():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vcr():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vhl():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vtild():
    i = 0
    for x in map(''.join, itertools.product('vabdfhjlnprtxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'v~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -v~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xa():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xa':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xb():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xd():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xd':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xf():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xf':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xh():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xh':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xj():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xl():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xn():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xp():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xr():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xt():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xt':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xv():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xx():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xz():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xA():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xB():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xD():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xF():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xH():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xJ():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xL():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xN():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xP():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xR():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xT():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xV():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xX():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xZ():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'xZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -xZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_x0():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_x2():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_x4():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_x6():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_x8():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xexcl():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xdquote():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xdoll():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xand():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xquote():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xpar():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xast():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xvir():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xpp():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xtp():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xless():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xmore():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xaro():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xcroc():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xbsl():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xcirc():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xesp():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xcr():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xhl():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_xtild():
    i = 0
    for x in map(''.join, itertools.product('xabdfhjlnprtvzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'x~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -x~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_za():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'za':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -za')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zb():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zd():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zd':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zf():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zf':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zh():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zh':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zj():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zl():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zn():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zp():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zr():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zt():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zt':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zv():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zx():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zz():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zA():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zB():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zD():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zF():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zH():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zJ():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zL():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zN():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zP():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zR():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zT():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zV():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zX():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zZ():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'zZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -zZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_z0():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_z2():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_z4():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_z6():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_z8():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zexcl():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zdquote():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zdoll():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zand():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zquote():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zpar():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zast():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zvir():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zpp():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ztp():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zless():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zmore():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zaro():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zcroc():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zbsl():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zcirc():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zesp():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zcr():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_zhl():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ztild():
    i = 0
    for x in map(''.join, itertools.product('zabdfhjlnprtvxABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'z~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -z~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Aa():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Aa':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Aa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ab():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Ab':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ab')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ad():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Ad':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ad')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Af():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Af':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Af')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ah():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Ah':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ah')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Aj():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Aj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Aj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Al():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Al':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Al')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_An():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'An':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -An')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ap():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Ap':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ap')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ar():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Ar':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ar')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_At():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'At':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -At')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Av():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Av':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Av')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ax():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Ax':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ax')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Az():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Az':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Az')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_AA():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'AA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -AA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_AB():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'AB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -AB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_AD():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'AD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -AD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_AF():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'AF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -AF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_AH():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'AH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -AH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_AJ():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'AJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -AJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_AL():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'AL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -AL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_AN():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'AN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -AN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_AP():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'AP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -AP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_AR():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'AR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -AR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_AT():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'AT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -AT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_AV():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'AV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -AV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_AX():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'AX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -AX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_AZ():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'AZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -AZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_A0():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_A2():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_A4():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_A6():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_A8():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Aexcl():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Adquote():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Adoll():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Aand():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Aquote():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Apar():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Aast():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Avir():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_App():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Atp():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Aless():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Amore():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Aaro():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Acroc():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Absl():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Acirc():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Aesp():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Acr():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ahl():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Atild():
    i = 0
    for x in map(''.join, itertools.product('AabdfhjlnprtvxzBDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'A~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -A~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ba():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Ba':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ba')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bb():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Bb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bd():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Bd':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bf():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Bf':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bh():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Bh':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bj():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Bj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bl():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Bl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bn():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Bn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bp():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Bp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Br():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Br':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Br')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bt():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Bt':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bv():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Bv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bx():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Bx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bz():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Bz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Bz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_BA():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'BA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -BA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_BB():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'BB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -BB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_BD():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'BD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -BD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_BF():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'BF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -BF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_BH():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'BH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -BH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_BJ():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'BJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -BJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_BL():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'BL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -BL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_BN():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'BN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -BN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_BP():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'BP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -BP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_BR():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'BR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -BR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_BT():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'BT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -BT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_BV():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'BV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -BV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_BX():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'BX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -BX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_BZ():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'BZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -BZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_B0():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_B2():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_B4():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_B6():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_B8():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bexcl():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bdquote():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bdoll():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Band():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bquote():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bpar():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bast():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bvir():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bpp():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Btp():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bless():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bmore():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Baro():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bcroc():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bbsl():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bcirc():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Besp():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bcr():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Bhl():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Btild():
    i = 0
    for x in map(''.join, itertools.product('BabdfhjlnprtvxzADFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'B~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -B~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Da():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Da':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Da')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Db():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Db':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Db')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dd():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Dd':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Df():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Df':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Df')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dh():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Dh':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dj():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Dj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dl():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Dl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dn():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Dn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dp():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Dp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dr():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Dr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dt():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Dt':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dv():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Dv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dx():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Dx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dz():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Dz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Dz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_DA():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'DA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -DA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_DB():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'DB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -DB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_DD():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'DD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -DD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_DF():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'DF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -DF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_DH():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'DH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -DH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_DJ():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'DJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -DJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_DL():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'DL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -DL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_DN():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'DN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -DN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_DP():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'DP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -DP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_DR():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'DR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -DR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_DT():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'DT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -DT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_DV():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'DV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -DV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_DX():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'DX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -DX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_DZ():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'DZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -DZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_D0():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_D2():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_D4():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_D6():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_D8():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dexcl():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ddquote():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ddoll():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dand():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dquote():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dpar():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dast():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dvir():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dpp():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dtp():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dless():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dmore():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Daro():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dcroc():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dbsl():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dcirc():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Desp():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dcr():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dhl():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Dtild():
    i = 0
    for x in map(''.join, itertools.product('DabdfhjlnprtvxzABFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'D~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -D~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fa():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Fa':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fb():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Fb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fd():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Fd':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ff():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Ff':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ff')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fh():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Fh':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fj():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Fj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fl():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Fl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fn():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Fn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fp():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Fp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fr():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Fr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ft():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Ft':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ft')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fv():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Fv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fx():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Fx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fz():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Fz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Fz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_FA():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'FA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -FA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_FB():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'FB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -FB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_FD():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'FD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -FD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_FF():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'FF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -FF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_FH():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'FH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -FH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_FJ():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'FJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -FJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_FL():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'FL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -FL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_FN():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'FN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -FN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_FP():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'FP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -FP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_FR():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'FR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -FR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_FT():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'FT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -FT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_FV():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'FV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -FV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_FX():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'FX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -FX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_FZ():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'FZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -FZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_F0():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_F2():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_F4():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_F6():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_F8():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fexcl():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fdquote():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fdoll():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fand():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fquote():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fpar():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fast():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fvir():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fpp():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ftp():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fless():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fmore():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Faro():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fcroc():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fbsl():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fcirc():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fesp():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fcr():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Fhl():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ftild():
    i = 0
    for x in map(''.join, itertools.product('FabdfhjlnprtvxzABDHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'F~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -F~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ha():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Ha':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ha')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hb():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Hb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hd():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Hd':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hf():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Hf':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hh():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Hh':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hj():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Hj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hl():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Hl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hn():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Hn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hp():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Hp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hr():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Hr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ht():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Ht':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ht')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hv():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Hv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hx():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Hx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hz():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Hz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Hz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_HA():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'HA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -HA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_HB():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'HB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -HB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_HD():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'HD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -HD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_HF():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'HF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -HF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_HH():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'HH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -HH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_HJ():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'HJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -HJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_HL():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'HL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -HL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_HN():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'HN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -HN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_HP():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'HP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -HP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_HR():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'HR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -HR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_HT():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'HT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -HT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_HV():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'HV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -HV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_HX():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'HX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -HX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_HZ():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'HZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -HZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_H0():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_H2():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_H4():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_H6():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_H8():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hexcl():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hdquote():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hdoll():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hand():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hquote():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hpar():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hast():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hvir():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hpp():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Htp():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hless():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hmore():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Haro():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hcroc():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hbsl():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hcirc():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hesp():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hcr():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Hhl():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Htild():
    i = 0
    for x in map(''.join, itertools.product('HabdfhjlnprtvxzABDFJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'H~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -H~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ja():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Ja':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ja')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jb():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Jb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jd():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Jd':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jf():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Jf':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jh():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Jh':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jj():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Jj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jl():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Jl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jn():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Jn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jp():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Jp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jr():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Jr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jt():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Jt':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jv():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Jv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jx():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Jx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jz():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Jz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Jz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_JA():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'JA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -JA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_JB():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'JB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -JB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_JD():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'JD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -JD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_JF():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'JF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -JF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_JH():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'JH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -JH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_JJ():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'JJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -JJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_JL():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'JL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -JL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_JN():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'JN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -JN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_JP():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'JP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -JP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_JR():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'JR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -JR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_JT():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'JT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -JT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_JV():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'JV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -JV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_JX():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'JX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -JX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_JZ():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'JZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -JZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_J0():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_J2():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_J4():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_J6():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_J8():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jexcl():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jdquote():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jdoll():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jand():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jquote():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jpar():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jast():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jvir():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jpp():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jtp():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jless():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jmore():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jaro():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jcroc():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jbsl():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jcirc():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jesp():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jcr():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jhl():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Jtild():
    i = 0
    for x in map(''.join, itertools.product('JabdfhjlnprtvxzABDFHLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'J~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -J~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_La():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'La':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -La')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lb():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Lb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ld():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Ld':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ld')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lf():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Lf':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lh():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Lh':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lj():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Lj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ll():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Ll':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ll')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ln():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Ln':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ln')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lp():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Lp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lr():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Lr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lt():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Lt':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lv():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Lv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lx():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Lx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lz():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Lz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Lz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_LA():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'LA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -LA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_LB():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'LB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -LB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_LD():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'LD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -LD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_LF():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'LF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -LF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_LH():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'LH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -LH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_LJ():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'LJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -LJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_LL():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'LL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -LL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_LN():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'LN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -LN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_LP():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'LP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -LP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_LR():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'LR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -LR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_LT():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'LT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -LT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_LV():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'LV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -LV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_LX():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'LX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -LX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_LZ():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'LZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -LZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_L0():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_L2():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_L4():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_L6():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_L8():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lexcl():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ldquote():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ldoll():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Land():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lquote():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lpar():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Last():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lvir():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lpp():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ltp():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lless():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lmore():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Laro():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lcroc():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lbsl():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lcirc():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lesp():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lcr():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Lhl():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ltild():
    i = 0
    for x in map(''.join, itertools.product('LabdfhjlnprtvxzABDFHJNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'L~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -L~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Na():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Na':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Na')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Nb():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Nb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Nd():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Nd':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Nf():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Nf':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Nh():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Nh':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Nj():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Nj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Nl():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Nl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Nn():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Nn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Np():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Np':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Np')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Nr():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Nr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Nt():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Nt':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Nv():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Nv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Nx():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Nx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Nz():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Nz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Nz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_NA():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'NA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -NA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_NB():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'NB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -NB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ND():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ND':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ND')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_NF():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'NF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -NF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_NH():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'NH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -NH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_NJ():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'NJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -NJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_NL():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'NL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -NL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_NN():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'NN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -NN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_NP():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'NP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -NP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_NR():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'NR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -NR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_NT():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'NT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -NT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_NV():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'NV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -NV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_NX():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'NX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -NX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_NZ():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'NZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -NZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_N0():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_N2():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_N4():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_N6():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_N8():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Nexcl():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ndquote():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ndoll():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Nand():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Nquote():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Npar():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Nast():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Nvir():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Npp():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ntp():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Nless():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Nmore():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Naro():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ncroc():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Nbsl():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ncirc():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Nesp():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ncr():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Nhl():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ntild():
    i = 0
    for x in map(''.join, itertools.product('NabdfhjlnprtvxzABDFHJLPRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'N~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -N~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pa():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Pa':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pb():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Pb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pd():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Pd':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pf():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Pf':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ph():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Ph':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ph')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pj():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Pj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pl():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Pl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pn():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Pn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pp():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Pp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pr():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Pr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pt():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Pt':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pv():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Pv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Px():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Px':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Px')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pz():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Pz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Pz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_PA():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'PA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -PA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_PB():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'PB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -PB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_PD():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'PD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -PD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_PF():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'PF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -PF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_PH():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'PH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -PH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_PJ():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'PJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -PJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_PL():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'PL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -PL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_PN():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'PN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -PN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_PP():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'PP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -PP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_PR():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'PR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -PR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_PT():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'PT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -PT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_PV():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'PV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -PV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_PX():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'PX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -PX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_PZ():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'PZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -PZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_P0():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_P2():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_P4():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_P6():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_P8():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pexcl():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pdquote():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pdoll():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pand():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pquote():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ppar():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Past():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pvir():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ppp():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ptp():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pless():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pmore():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Paro():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pcroc():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pbsl():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pcirc():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pesp():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Pcr():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Phl():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ptild():
    i = 0
    for x in map(''.join, itertools.product('PabdfhjlnprtvxzABDFHJLNRTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'P~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -P~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ra():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Ra':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ra')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rb():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Rb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rd():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Rd':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rf():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Rf':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rh():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Rh':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rj():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Rj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rl():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Rl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rn():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Rn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rp():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Rp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rr():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Rr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rt():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Rt':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rv():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Rv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rx():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Rx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rz():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Rz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Rz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_RA():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'RA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -RA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_RB():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'RB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -RB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_RD():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'RD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -RD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_RF():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'RF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -RF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_RH():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'RH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -RH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_RJ():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'RJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -RJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_RL():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'RL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -RL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_RN():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'RN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -RN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_RP():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'RP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -RP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_RR():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'RR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -RR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_RT():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'RT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -RT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_RV():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'RV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -RV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_RX():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'RX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -RX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_RZ():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'RZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -RZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_R0():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_R2():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_R4():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_R6():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_R8():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rexcl():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rdquote():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rdoll():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rand():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rquote():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rpar():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rast():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rvir():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rpp():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rtp():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rless():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rmore():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Raro():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rcroc():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rbsl():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rcirc():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Resp():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rcr():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rhl():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Rtild():
    i = 0
    for x in map(''.join, itertools.product('RabdfhjlnprtvxzABDFHJLNPTVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'R~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -R~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ta():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Ta':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Ta')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tb():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Tb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Td():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Td':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Td')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tf():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Tf':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Th():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Th':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Th')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tj():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Tj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tl():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Tl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tn():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Tn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tp():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Tp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tr():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Tr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tt():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Tt':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tv():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Tv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tx():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Tx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tz():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Tz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Tz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_TA():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'TA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -TA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_TB():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'TB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -TB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_TD():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'TD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -TD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_TF():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'TF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -TF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_TH():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'TH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -TH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_TJ():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'TJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -TJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_TL():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'TL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -TL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_TN():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'TN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -TN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_TP():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'TP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -TP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_TR():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'TR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -TR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_TT():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'TT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -TT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_TV():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'TV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -TV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_TX():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'TX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -TX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_TZ():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'TZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -TZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_T0():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_T2():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_T4():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_T6():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_T8():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Texcl():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tdquote():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tdoll():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tand():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tquote():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tpar():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tast():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tvir():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tpp():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ttp():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tless():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tmore():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Taro():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tcroc():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tbsl():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tcirc():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tesp():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Tcr():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Thl():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ttild():
    i = 0
    for x in map(''.join, itertools.product('TabdfhjlnprtvxzABDFHJLNPRVXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'T~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -T~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Va():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Va':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Va')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vb():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Vb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vd():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Vd':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vf():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Vf':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vh():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Vh':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vj():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Vj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vl():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Vl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vn():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Vn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vp():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Vp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vr():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Vr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vt():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Vt':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vv():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Vv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vx():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Vx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vz():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Vz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Vz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_VA():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'VA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -VA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_VB():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'VB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -VB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_VD():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'VD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -VD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_VF():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'VF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -VF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_VH():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'VH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -VH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_VJ():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'VJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -VJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_VL():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'VL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -VL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_VN():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'VN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -VN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_VP():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'VP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -VP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_VR():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'VR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -VR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_VT():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'VT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -VT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_VV():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'VV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -VV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_VX():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'VX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -VX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_VZ():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'VZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -VZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_V0():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_V2():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_V4():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_V6():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_V8():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vexcl():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vdquote():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vdoll():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vand():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vquote():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vpar():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vast():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vvir():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vpp():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vtp():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vless():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vmore():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Varo():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vcroc():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vbsl():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vcirc():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vesp():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vcr():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vhl():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Vtild():
    i = 0
    for x in map(''.join, itertools.product('VabdfhjlnprtvxzABDFHJLNPRTXZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'V~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -V~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xa():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Xa':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xa')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xb():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Xb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xd():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Xd':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xf():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Xf':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xh():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Xh':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xj():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Xj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xl():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Xl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xn():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Xn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xp():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Xp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xr():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Xr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xt():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Xt':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xv():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Xv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xx():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Xx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xz():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Xz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Xz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_XA():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'XA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -XA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_XB():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'XB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -XB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_XD():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'XD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -XD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_XF():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'XF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -XF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_XH():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'XH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -XH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_XJ():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'XJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -XJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_XL():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'XL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -XL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_XN():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'XN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -XN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_XP():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'XP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -XP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_XR():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'XR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -XR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_XT():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'XT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -XT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_XV():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'XV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -XV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_XX():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'XX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -XX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_XZ():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'XZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -XZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_X0():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_X2():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_X4():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_X6():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_X8():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xexcl():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xdquote():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xdoll():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xand():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xquote():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xpar():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xast():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xvir():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xpp():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xtp():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xless():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xmore():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xaro():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xcroc():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xbsl():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xcirc():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xesp():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xcr():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xhl():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Xtild():
    i = 0
    for x in map(''.join, itertools.product('XabdfhjlnprtvxzABDFHJLNPRTVZ02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'X~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -X~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Za():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Za':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Za')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zb():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Zb':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zb')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zd():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Zd':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zd')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zf():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Zf':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zf')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zh():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Zh':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zh')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zj():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Zj':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zj')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zl():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Zl':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zl')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zn():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Zn':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zn')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zp():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Zp':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zp')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zr():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Zr':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zr')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zt():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Zt':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zt')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zv():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Zv':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zv')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zx():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Zx':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zx')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zz():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Zz':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Zz')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ZA():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ZA':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZA')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ZB():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ZB':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZB')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ZD():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ZD':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZD')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ZF():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ZF':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZF')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ZH():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ZH':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZH')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ZJ():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ZJ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZJ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ZL():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ZL':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZL')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ZN():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ZN':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZN')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ZP():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ZP':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZP')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ZR():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ZR':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZR')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ZT():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ZT':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZT')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ZV():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ZV':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZV')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ZX():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ZX':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZX')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ZZ():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ZZ':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ZZ')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Z0():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Z2():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Z4():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Z6():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Z8():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zexcl():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zdquote():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zdoll():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zand():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zquote():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zpar():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zast():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zvir():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zpp():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ztp():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zless():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zmore():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zaro():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zcroc():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zbsl():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zcirc():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zesp():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zcr():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Zhl():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_Ztild():
    i = 0
    for x in map(''.join, itertools.product('ZabdfhjlnprtvxzABDFHJLNPRTVX02468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'Z~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -Z~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0a():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0b():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0d():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0f():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0h():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0j():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0l():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0n():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0p():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0r():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0t():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0v():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0x():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0z():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0A():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0B():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0D():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0F():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0H():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0J():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0L():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0N():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0P():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0R():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0T():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0V():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0X():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0Z():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_00():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '00':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -00')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_02():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '02':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -02')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_04():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '04':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -04')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_06():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '06':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -06')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_08():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '08':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -08')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0excl():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0dquote():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0doll():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0and():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0quote():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0par():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0ast():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0vir():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0pp():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0tp():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0less():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0more():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0aro():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0croc():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0bsl():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0circ():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0esp():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0cr():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0hl():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_0tild():
    i = 0
    for x in map(''.join, itertools.product('0abdfhjlnprtvxzABDFHJLNPRTVXZ2468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '0~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -0~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2a():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2b():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2d():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2f():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2h():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2j():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2l():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2n():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2p():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2r():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2t():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2v():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2x():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2z():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2A():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2B():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2D():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2F():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2H():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2J():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2L():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2N():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2P():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2R():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2T():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2V():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2X():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2Z():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_20():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '20':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -20')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_22():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '22':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -22')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_24():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '24':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -24')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_26():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '26':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -26')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_28():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '28':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -28')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2excl():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2dquote():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2doll():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2and():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2quote():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2par():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2ast():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2vir():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2pp():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2tp():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2less():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2more():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2aro():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2croc():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2bsl():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2circ():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2esp():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2cr():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2hl():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_2tild():
    i = 0
    for x in map(''.join, itertools.product('2abdfhjlnprtvxzABDFHJLNPRTVXZ0468!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '2~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -2~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4a():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4b():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4d():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4f():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4h():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4j():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4l():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4n():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4p():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4r():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4t():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4v():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4x():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4z():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4A():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4B():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4D():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4F():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4H():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4J():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4L():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4N():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4P():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4R():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4T():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4V():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4X():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4Z():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_40():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '40':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -40')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_42():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '42':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -42')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_44():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '44':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -44')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_46():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '46':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -46')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_48():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '48':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -48')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4excl():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4dquote():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4doll():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4and():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4quote():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4par():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4ast():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4vir():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4pp():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4tp():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4less():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4more():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4aro():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4croc():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4bsl():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4circ():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4esp():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4cr():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4hl():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_4tild():
    i = 0
    for x in map(''.join, itertools.product('4abdfhjlnprtvxzABDFHJLNPRTVXZ0268!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '4~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -4~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6a():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6b():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6d():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6f():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6h():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6j():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6l():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6n():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6p():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6r():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6t():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6v():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6x():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6z():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6A():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6B():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6D():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6F():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6H():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6J():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6L():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6N():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6P():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6R():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6T():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6V():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6X():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6Z():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_60():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '60':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -60')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_62():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '62':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -62')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_64():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '64':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -64')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_66():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '66':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -66')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_68():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '68':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -68')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6excl():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6dquote():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6doll():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6and():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6quote():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6par():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6ast():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6vir():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6pp():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6tp():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6less():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6more():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6aro():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6croc():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6bsl():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6circ():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6esp():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6cr():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6hl():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_6tild():
    i = 0
    for x in map(''.join, itertools.product('6abdfhjlnprtvxzABDFHJLNPRTVXZ0248!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '6~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -6~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8a():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8b():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8d():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8f():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8h():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8j():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8l():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8n():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8p():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8r():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8t():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8v():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8x():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8z():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8A():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8B():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8D():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8F():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8H():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8J():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8L():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8N():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8P():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8R():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8T():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8V():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8X():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8Z():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_80():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '80':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -80')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_82():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '82':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -82')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_84():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '84':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -84')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_86():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '86':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -86')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_88():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '88':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -88')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8excl():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8dquote():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8doll():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8and():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8quote():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8par():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8ast():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8vir():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8pp():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8tp():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8less():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8more():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8aro():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8croc():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8bsl():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8circ():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8esp():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8cr():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8hl():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_8tild():
    i = 0
    for x in map(''.join, itertools.product('8abdfhjlnprtvxzABDFHJLNPRTVXZ0246!"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '8~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -8~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_excla():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclb():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_excld():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclf():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclh():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclj():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_excll():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_excln():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclp():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclr():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclt():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclv():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclx():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclz():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclA():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclB():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclD():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclF():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclH():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclJ():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclL():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclN():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclP():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclR():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclT():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclV():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclX():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclZ():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_excl0():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_excl2():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_excl4():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_excl6():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_excl8():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclexcl():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_excldquote():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_excldoll():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_excland():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclquote():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclpar():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'excl(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -excl(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclast():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclvir():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclpp():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_excltp():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclless():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclmore():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclaro():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclcroc():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '![':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -![')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclbsl():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclcirc():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclesp():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclcr():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_exclhl():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_excltild():
    i = 0
    for x in map(''.join, itertools.product('!abdfhjlnprtvxzABDFHJLNPRTVXZ02468"$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '!~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -!~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquota():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotb():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotd():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotf():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquoth():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotj():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotl():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotn():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotp():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotr():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquott():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotv():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotx():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotz():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotA():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotB():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotD():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotF():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotH():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotJ():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotL():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotN():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotP():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotR():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotT():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotV():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotX():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotZ():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquot0():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquot2():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquot4():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquot6():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquot8():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotexcl():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotdquote():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '""':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -""')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotdoll():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotand():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotquote():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotpar():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'dquote(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -dquote(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotast():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotvir():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '",':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -",')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotpp():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '".':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -".')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquottp():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '":':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -":')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotless():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotmore():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '">':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -">')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotaro():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotcroc():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotbsl():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotcirc():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotesp():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquotcr():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquothl():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubquottild():
    i = 0
    for x in map(''.join, itertools.product('"abdfhjlnprtvxzABDFHJLNPRTVXZ02468!$&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '"~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -"~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dolla():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollb():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dolld():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollf():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollh():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollj():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dolll():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dolln():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollp():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollr():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollt():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollv():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollx():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollz():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollA():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollB():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollD():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollF():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollH():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollJ():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollL():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollN():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollP():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollR():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollT():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollV():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollX():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollZ():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doll0():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doll2():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doll4():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doll6():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doll8():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollexcl():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dolldquote():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dolldoll():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dolland():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollquote():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollpar():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'doll(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -doll(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollast():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollvir():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollpp():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dolltp():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollless():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollmore():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollaro():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollcroc():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollbsl():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollcirc():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollesp():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollcr():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '${':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -${')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dollhl():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_dolltild():
    i = 0
    for x in map(''.join, itertools.product('$abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"&\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '$~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -$~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaa():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespab():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespad():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaf():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespah():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaj():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespal():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespan():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespap():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespar():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespat():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespav():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespax():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaz():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaA():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaB():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaD():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaF():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaH():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaJ():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaL():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaN():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaP():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaR():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaT():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaV():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaX():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaZ():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespa0():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespa2():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespa4():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespa6():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespa8():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaexcl():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespadquote():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespadoll():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaand():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaquote():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespapar():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'and(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -and(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaast():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespavir():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespapp():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespatp():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaless():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespamore():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaaro():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespacroc():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespabsl():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespacirc():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespaesp():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespacr():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespahl():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decryptespatild():
    i = 0
    for x in map(''.join, itertools.product('&abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$\'(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '&~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -&~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quota():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotb():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotd():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotf():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quoth():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotj():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotl():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotn():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotp():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotr():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quott():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotv():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotx():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotz():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotA():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotB():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotD():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotF():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotH():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotJ():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotL():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotN():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotP():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotR():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotT():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotV():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotX():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotZ():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quot0():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quot2():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quot4():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quot6():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quot8():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotexcl():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotdquote():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotdoll():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotand():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotquote():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotpar():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotast():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotvir():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\',':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\',')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotpp():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quottp():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\':':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\':')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotless():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotmore():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotaro():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotcroc():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotbsl():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotcirc():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotesp():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quotcr():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quothl():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_quottild():
    i = 0
    for x in map(''.join, itertools.product('\'abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&(*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '\'~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\'~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parena():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenb():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parend():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenf():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenh():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenj():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenl():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenn():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenp():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenr():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parent():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenv():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenx():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenz():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenA():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenB():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenD():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenF():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenH():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenJ():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenL():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenN():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenP():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenR():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenT():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenV():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenX():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenZ():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_paren0():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_paren2():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_paren4():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_paren6():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_paren8():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenexcl():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parendquote():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '("':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -("')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parendoll():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '($':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -($')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenand():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenquote():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parpara():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'par(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -par(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenast():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenvir():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenpp():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parentp():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenless():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenmore():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenaro():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parencroc():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '([':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -([')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenbsl():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parencirc():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenesp():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parencr():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '({':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -({')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parenhl():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_parentild():
    i = 0
    for x in map(''.join, itertools.product('(abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'*,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '(~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -(~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espea():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espeb():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esped():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espef():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espeh():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espej():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espel():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espen():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espep():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esper():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espet():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espev():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espex():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espez():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espeA():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espeB():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espeD():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espeF():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espeH():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espeJ():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espeL():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espeN():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espeP():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espeR():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espeT():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espeV():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espeX():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espeZ():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espe0():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espe2():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espe4():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espe6():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espe8():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espeexcl():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espedquote():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espedoll():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espeand():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espequote():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_astpar():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'ast(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -ast(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espeast():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '**':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -**')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espevir():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espepp():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espetp():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espeless():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espemore():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espearo():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_especroc():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espebsl():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_especirc():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espeesp():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_especr():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espehl():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_espetild():
    i = 0
    for x in map(''.join, itertools.product('*abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(,.:<>@[\^`{|~', repeat=8)):
        if x[:2] != '*~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -*~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vira():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virb():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vird():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virf():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virh():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virj():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virl():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virn():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virp():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virr():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virt():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virv():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virx():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virz():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virA():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virB():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virD():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virF():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virH():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virJ():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virL():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virN():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virP():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virR():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virT():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virV():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virX():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virZ():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vir0():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vir2():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vir4():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vir6():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vir8():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virexcl():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virdquote():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virdoll():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virand():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virquote():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virpar():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'vir(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -vir(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virast():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virvir():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virpp():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virtp():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virless():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virmore():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_viraro():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vircroc():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virbsl():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vircirc():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_viresp():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vircr():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virhl():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_virtild():
    i = 0
    for x in map(''.join, itertools.product(',abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*.:<>@[\^`{|~', repeat=8)):
        if x[:2] != ',~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -,~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poina():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinb():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poind():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinf():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinh():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinj():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinl():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinn():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinp():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinr():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_point():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinv():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinx():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinz():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinA():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinB():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinD():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinF():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinH():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinJ():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinL():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinN():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinP():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinR():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinT():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinV():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinX():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinZ():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poin0():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poin2():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poin4():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poin6():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poin8():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinexcl():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poindquote():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '."':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -."')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poindoll():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinand():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinquote():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pppar():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != 'pp(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -pp(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinast():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinvir():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinpp():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '..':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -..')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pointp():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinless():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinmore():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinaro():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poincroc():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinbsl():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poincirc():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinesp():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poincr():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_poinhl():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_pointild():
    i = 0
    for x in map(''.join, itertools.product('.abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,:<>@[\^`{|~', repeat=8)):
        if x[:2] != '.~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -.~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoina():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinb():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoind():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinf():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinh():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinj():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinl():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinn():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinp():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinr():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoint():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinv():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinx():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinz():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinA():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinB():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinD():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinF():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinH():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinJ():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinL():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinN():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinP():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinR():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinT():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinV():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinX():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinZ():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoin0():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoin2():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoin4():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoin6():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoin8():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinexcl():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoindquote():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoindoll():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinand():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinquote():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tppar():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != 'tp(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tp(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinast():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinvir():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinpp():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpointp():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != '::':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -::')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinless():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinmore():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinaro():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoincroc():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinbsl():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoincirc():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinesp():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoincr():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpoinhl():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_doubpointild():
    i = 0
    for x in map(''.join, itertools.product(':abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.<>@[\^`{|~', repeat=8)):
        if x[:2] != ':~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -:~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessa():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessb():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessd():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessf():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessh():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessj():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessl():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessn():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessp():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessr():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lesst():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessv():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessx():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessz():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessA():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessB():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessD():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessF():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessH():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessJ():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessL():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessN():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessP():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessR():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessT():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessV():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessX():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessZ():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_less0():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_less2():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_less4():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_less6():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_less8():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessexcl():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessdquote():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessdoll():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessand():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessquote():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_morepar():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != 'less(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -less(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessast():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessvir():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lesspp():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lesstp():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessless():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessmore():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessaro():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lesscroc():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessbsl():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lesscirc():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lessesp():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lesscr():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lesshl():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lesstild():
    i = 0
    for x in map(''.join, itertools.product('<abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:>@[\^`{|~', repeat=8)):
        if x[:2] != '<~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -<~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_morea():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moreb():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_mored():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moref():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moreh():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_morej():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_morel():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moren():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_morep():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_morer():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moret():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_morev():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_morex():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_morez():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moreA():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moreB():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moreD():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moreF():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moreH():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moreJ():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moreL():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moreN():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moreP():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moreR():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moreT():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moreV():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moreX():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moreZ():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_more0():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_more2():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_more4():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_more6():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_more8():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moreexcl():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moredquote():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moredoll():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moreand():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_morequote():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_lesspar():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != 'more(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -more(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moreast():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_morevir():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_morepp():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moretp():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moreless():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '><':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -><')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moremore():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_morearo():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_morecroc():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_morebsl():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_morecirc():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moreesp():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_morecr():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_morehl():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_moretild():
    i = 0
    for x in map(''.join, itertools.product('>abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<@[\^`{|~', repeat=8)):
        if x[:2] != '>~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' ->~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasa():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasb():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasd():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasf():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobash():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasj():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasl():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasn():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasp():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasr():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobast():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasv():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasx():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasz():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasA():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasB():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasD():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasF():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasH():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasJ():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasL():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasN():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasP():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasR():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasT():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasV():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasX():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasZ():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobas0():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobas2():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobas4():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobas6():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobas8():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasexcl():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasdquote():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasdoll():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasand():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasquote():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_aropar():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != 'aro(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -aro(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasast():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasvir():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobaspp():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobastp():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasless():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasmore():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasaro():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobascroc():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasbsl():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobascirc():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobasesp():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobascr():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobashl():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_arobastild():
    i = 0
    for x in map(''.join, itertools.product('@abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>[\^`{|~', repeat=8)):
        if x[:2] != '@~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -@~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crocha():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochb():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochd():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochf():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochh():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochj():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochl():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochn():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochp():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochr():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crocht():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochv():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochx():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochz():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochA():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochB():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochD():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochF():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochH():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochJ():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochL():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochN():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochP():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochR():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochT():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochV():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochX():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochZ():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_croch0():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_croch2():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_croch4():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_croch6():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_croch8():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochexcl():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochdquote():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '["':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -["')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochdoll():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochand():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochquote():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crocpar():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != 'croc(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -croc(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochast():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochvir():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochpp():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochtp():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochless():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochmore():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crocharo():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochcroc():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochbsl():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochcirc():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochesp():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochcr():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochhl():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochtild():
    i = 0
    for x in map(''.join, itertools.product('[abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@\^`{|~', repeat=8)):
        if x[:2] != '[~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -[~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsa():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsb():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsd():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsf():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsh():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsj():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsl():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsn():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsp():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsr():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bst():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsv():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsx():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\\x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\\x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsz():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsA():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsB():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsD():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsF():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsH():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsJ():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsL():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsN():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\\N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\\N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsP():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsR():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsT():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsV():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsX():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsZ():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bs0():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bs2():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bs4():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bs6():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bs8():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsexcl():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsdquote():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsdoll():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsand():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsquote():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\\\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\\\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bslpar():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != 'bsl(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -bsl(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsast():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsvir():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bspp():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bstp():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsless():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsmore():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsaro():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bscroc():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsbsl():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bscirc():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bsesp():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bscr():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bshl():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_bstild():
    i = 0
    for x in map(''.join, itertools.product('\abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[^`{|~', repeat=8)):
        if x[:2] != '\~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -\~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cira():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirb():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cird():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirf():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirh():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirj():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirl():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirn():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirp():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirr():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirt():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirv():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirx():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirz():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirA():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirB():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirD():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirF():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirH():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirJ():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirL():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirN():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirP():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirR():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirT():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirV():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirX():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirZ():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cir0():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cir2():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cir4():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cir6():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cir8():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirexcl():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirdquote():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirdoll():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirand():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirquote():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_circpar():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != 'circ(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -circ(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirast():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirvir():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirpp():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirtp():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirless():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirmore():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ciraro():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_circroc():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirbsl():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_circirc():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_ciresp():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_circr():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirhl():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_cirtild():
    i = 0
    for x in map(''.join, itertools.product('^abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\`{|~', repeat=8)):
        if x[:2] != '^~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -^~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esua():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esub():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esud():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuf():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuh():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuj():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esul():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esun():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esup():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esur():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esut():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuv():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esux():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuz():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuA():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuB():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuD():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuF():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuH():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuJ():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuL():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuN():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuP():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuR():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuT():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuV():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuX():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuZ():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esu0():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esu2():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esu4():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esu6():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esu8():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuexcl():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esudquote():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esudoll():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuand():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuquote():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esppar():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != 'esp(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -esp(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuast():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuvir():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esupp():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esutp():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuless():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esumore():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuaro():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esucroc():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esubsl():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esucirc():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuesp():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '``':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -``')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esucr():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esuhl():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_esutild():
    i = 0
    for x in map(''.join, itertools.product('`abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^{|~', repeat=8)):
        if x[:2] != '`~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -`~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crocha():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochb():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochd():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochf():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochh():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochj():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochl():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochn():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochp():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochr():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crocht():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochv():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochx():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochz():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochA():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochB():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochD():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochF():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochH():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochJ():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochL():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochN():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochP():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochR():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochT():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochV():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochX():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochZ():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_croch0():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_croch2():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_croch4():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_croch6():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_croch8():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochexcl():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochdquote():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochdoll():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochand():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochquote():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crpar():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != 'cr(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -cr(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochast():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochvir():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochpp():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochtp():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochless():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochmore():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crocharo():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochcroc():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochbsl():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochcirc():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochesp():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochcr():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochhl():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_crochtild():
    i = 0
    for x in map(''.join, itertools.product('{abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`|~', repeat=8)):
        if x[:2] != '{~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -{~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vsla():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslb():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vsld():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslf():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslh():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslj():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vsll():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vsln():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslp():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslr():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslt():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslv():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslx():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslz():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslA():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslB():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslD():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslF():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslH():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslJ():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslL():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslN():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslP():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslR():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslT():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslV():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslX():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslZ():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vsl0():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vsl2():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vsl4():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vsl6():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vsl8():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslexcl():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vsldquote():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vsldoll():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vsland():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslquote():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_hlpar():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != 'hl(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -hl(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslast():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslvir():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslpp():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vsltp():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslless():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslmore():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslaro():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslcroc():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslbsl():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslcirc():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslesp():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslcr():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vslhl():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '||':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -||')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_vsltild():
    i = 0
    for x in map(''.join, itertools.product('|abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{~', repeat=8)):
        if x[:2] != '|~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -|~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tila():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~a':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~a')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilb():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~b':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~b')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tild():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~d':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~d')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilf():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~f':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~f')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilh():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~h':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~h')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilj():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~j':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~j')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_till():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~l':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~l')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tiln():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~n':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~n')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilp():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~p':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~p')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilr():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~r':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~r')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilt():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~t':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~t')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilv():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~v':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~v')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilx():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~x':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~x')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilz():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilA():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~A':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~A')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilB():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~B':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~B')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilD():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~D':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~D')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilF():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~F':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~F')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilH():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~H':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~H')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilJ():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~J':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~J')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilL():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~L':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~L')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilN():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~N':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~N')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilP():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~P':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~P')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilR():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~R':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~R')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilT():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~T':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~T')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilV():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~V':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~V')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilX():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~X':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~X')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilZ():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~Z':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~Z')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_til0():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~0':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~0')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_til2():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~2':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~2')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_til4():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~4':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~4')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_til6():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~6':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~6')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_til8():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~8':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~8')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilexcl():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~!':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~!')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tildquote():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~"':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~"')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tildoll():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~$':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~$')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tiland():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~&':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~&')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilquote():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~\'':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~\'')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilpar():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != 'tild(':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -tild(')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilast():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~*':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~*')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilvir():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~,':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~,')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilpp():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~.':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~.')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tiltp():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~:':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~:')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilless():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~<':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~<')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilmore():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~>':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~>')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilaro():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~@':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~@')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilcroc():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~[':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~[')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilbsl():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~\\':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~\\')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilcirc():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~^':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~^')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilesp():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~`':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~`')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilcr():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~{':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~{')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tilhl():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~|':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~|')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


def decrypt_tiltild():
    i = 0
    for x in map(''.join, itertools.product('~abdfhjlnprtvxzABDFHJLNPRTVXZ02468!"$&\'(*,.:<>@[\^`{|', repeat=8)):
        if x[:2] != '~~':
            break
        fkey = x.encode('utf-8')
        #print(fkey, ' -~~')
        dec = DES.new(fkey, DES.MODE_CFB, iv)
        ptx = dec.decrypt(ciphertext)
        if ptx == texte:
            print("Found Key: ", fkey)
        i += 1


thread1 = threading.Thread(target=decrypt_aa)
thread2 = threading.Thread(target=decrypt_ab)
thread3 = threading.Thread(target=decrypt_ad)
thread4 = threading.Thread(target=decrypt_af)
thread5 = threading.Thread(target=decrypt_ah)
thread6 = threading.Thread(target=decrypt_aj)
thread7 = threading.Thread(target=decrypt_al)
thread8 = threading.Thread(target=decrypt_an)
thread9 = threading.Thread(target=decrypt_ap)
thread10 = threading.Thread(target=decrypt_ar)
thread11 = threading.Thread(target=decrypt_at)
thread12 = threading.Thread(target=decrypt_av)
thread13 = threading.Thread(target=decrypt_ax)
thread14 = threading.Thread(target=decrypt_az)
thread15 = threading.Thread(target=decrypt_aA)
thread16 = threading.Thread(target=decrypt_aB)
thread17 = threading.Thread(target=decrypt_aD)
thread18 = threading.Thread(target=decrypt_aF)
thread19 = threading.Thread(target=decrypt_aH)
thread20 = threading.Thread(target=decrypt_aJ)
thread21 = threading.Thread(target=decrypt_aL)
thread22 = threading.Thread(target=decrypt_aN)
thread23 = threading.Thread(target=decrypt_aP)
thread24 = threading.Thread(target=decrypt_aR)
thread25 = threading.Thread(target=decrypt_aT)
thread26 = threading.Thread(target=decrypt_aV)
thread27 = threading.Thread(target=decrypt_aX)
thread28 = threading.Thread(target=decrypt_aZ)
thread29 = threading.Thread(target=decrypt_a0)
thread30 = threading.Thread(target=decrypt_a2)
thread31 = threading.Thread(target=decrypt_a4)
thread32 = threading.Thread(target=decrypt_a6)
thread33 = threading.Thread(target=decrypt_a8)
thread34 = threading.Thread(target=decrypt_aexcl)
thread35 = threading.Thread(target=decrypt_adquote)
thread36 = threading.Thread(target=decrypt_adoll)
thread37 = threading.Thread(target=decrypt_aand)
thread38 = threading.Thread(target=decrypt_aquote)
thread39 = threading.Thread(target=decrypt_apar)
thread40 = threading.Thread(target=decrypt_aast)
thread41 = threading.Thread(target=decrypt_avir)
thread42 = threading.Thread(target=decrypt_app)
thread43 = threading.Thread(target=decrypt_atp)
thread44 = threading.Thread(target=decrypt_aless)
thread45 = threading.Thread(target=decrypt_amore)
thread46 = threading.Thread(target=decrypt_aaro)
thread47 = threading.Thread(target=decrypt_acroc)
thread48 = threading.Thread(target=decrypt_absl)
thread49 = threading.Thread(target=decrypt_acirc)
thread50 = threading.Thread(target=decrypt_aesp)
thread51 = threading.Thread(target=decrypt_acr)
thread52 = threading.Thread(target=decrypt_ahl)
thread53 = threading.Thread(target=decrypt_atild)
thread54 = threading.Thread(target=decrypt_ba)
thread55 = threading.Thread(target=decrypt_bb)
thread56 = threading.Thread(target=decrypt_bd)
thread57 = threading.Thread(target=decrypt_bf)
thread58 = threading.Thread(target=decrypt_bh)
thread59 = threading.Thread(target=decrypt_bj)
thread60 = threading.Thread(target=decrypt_bl)
thread61 = threading.Thread(target=decrypt_bn)
thread62 = threading.Thread(target=decrypt_bp)
thread63 = threading.Thread(target=decrypt_br)
thread64 = threading.Thread(target=decrypt_bt)
thread65 = threading.Thread(target=decrypt_bv)
thread66 = threading.Thread(target=decrypt_bx)
thread67 = threading.Thread(target=decrypt_bz)
thread68 = threading.Thread(target=decrypt_bA)
thread69 = threading.Thread(target=decrypt_bB)
thread70 = threading.Thread(target=decrypt_bD)
thread71 = threading.Thread(target=decrypt_bF)
thread72 = threading.Thread(target=decrypt_bH)
thread73 = threading.Thread(target=decrypt_bJ)
thread74 = threading.Thread(target=decrypt_bL)
thread75 = threading.Thread(target=decrypt_bN)
thread76 = threading.Thread(target=decrypt_bP)
thread77 = threading.Thread(target=decrypt_bR)
thread78 = threading.Thread(target=decrypt_bT)
thread79 = threading.Thread(target=decrypt_bV)
thread80 = threading.Thread(target=decrypt_bX)
thread81 = threading.Thread(target=decrypt_bZ)
thread82 = threading.Thread(target=decrypt_b0)
thread83 = threading.Thread(target=decrypt_b2)
thread84 = threading.Thread(target=decrypt_b4)
thread85 = threading.Thread(target=decrypt_b6)
thread86 = threading.Thread(target=decrypt_b8)
thread87 = threading.Thread(target=decrypt_bexcl)
thread88 = threading.Thread(target=decrypt_bdquote)
thread89 = threading.Thread(target=decrypt_bdoll)
thread90 = threading.Thread(target=decrypt_band)
thread91 = threading.Thread(target=decrypt_bquote)
thread92 = threading.Thread(target=decrypt_bpar)
thread93 = threading.Thread(target=decrypt_bast)
thread94 = threading.Thread(target=decrypt_bvir)
thread95 = threading.Thread(target=decrypt_bpp)
thread96 = threading.Thread(target=decrypt_btp)
thread97 = threading.Thread(target=decrypt_bless)
thread98 = threading.Thread(target=decrypt_bmore)
thread99 = threading.Thread(target=decrypt_baro)
thread100 = threading.Thread(target=decrypt_bcroc)
thread101 = threading.Thread(target=decrypt_bbsl)
thread102 = threading.Thread(target=decrypt_bcirc)
thread103 = threading.Thread(target=decrypt_besp)
thread104 = threading.Thread(target=decrypt_bcr)
thread105 = threading.Thread(target=decrypt_bhl)
thread106 = threading.Thread(target=decrypt_btild)
thread107 = threading.Thread(target=decrypt_da)
thread108 = threading.Thread(target=decrypt_db)
thread109 = threading.Thread(target=decrypt_dd)
thread110 = threading.Thread(target=decrypt_df)
thread111 = threading.Thread(target=decrypt_dh)
thread112 = threading.Thread(target=decrypt_dj)
thread113 = threading.Thread(target=decrypt_dl)
thread114 = threading.Thread(target=decrypt_dn)
thread115 = threading.Thread(target=decrypt_dp)
thread116 = threading.Thread(target=decrypt_dr)
thread117 = threading.Thread(target=decrypt_dt)
thread118 = threading.Thread(target=decrypt_dv)
thread119 = threading.Thread(target=decrypt_dx)
thread120 = threading.Thread(target=decrypt_dz)
thread121 = threading.Thread(target=decrypt_dA)
thread122 = threading.Thread(target=decrypt_dB)
thread123 = threading.Thread(target=decrypt_dD)
thread124 = threading.Thread(target=decrypt_dF)
thread125 = threading.Thread(target=decrypt_dH)
thread126 = threading.Thread(target=decrypt_dJ)
thread127 = threading.Thread(target=decrypt_dL)
thread128 = threading.Thread(target=decrypt_dN)
thread129 = threading.Thread(target=decrypt_dP)
thread130 = threading.Thread(target=decrypt_dR)
thread131 = threading.Thread(target=decrypt_dT)
thread132 = threading.Thread(target=decrypt_dV)
thread133 = threading.Thread(target=decrypt_dX)
thread134 = threading.Thread(target=decrypt_dZ)
thread135 = threading.Thread(target=decrypt_d0)
thread136 = threading.Thread(target=decrypt_d2)
thread137 = threading.Thread(target=decrypt_d4)
thread138 = threading.Thread(target=decrypt_d6)
thread139 = threading.Thread(target=decrypt_d8)
thread140 = threading.Thread(target=decrypt_dexcl)
thread141 = threading.Thread(target=decrypt_ddquote)
thread142 = threading.Thread(target=decrypt_ddoll)
thread143 = threading.Thread(target=decrypt_dand)
thread144 = threading.Thread(target=decrypt_dquote)
thread145 = threading.Thread(target=decrypt_dpar)
thread146 = threading.Thread(target=decrypt_dast)
thread147 = threading.Thread(target=decrypt_dvir)
thread148 = threading.Thread(target=decrypt_dpp)
thread149 = threading.Thread(target=decrypt_dtp)
thread150 = threading.Thread(target=decrypt_dless)
thread151 = threading.Thread(target=decrypt_dmore)
thread152 = threading.Thread(target=decrypt_daro)
thread153 = threading.Thread(target=decrypt_dcroc)
thread154 = threading.Thread(target=decrypt_dbsl)
thread155 = threading.Thread(target=decrypt_dcirc)
thread156 = threading.Thread(target=decrypt_desp)
thread157 = threading.Thread(target=decrypt_dcr)
thread158 = threading.Thread(target=decrypt_dhl)
thread159 = threading.Thread(target=decrypt_dtild)
thread160 = threading.Thread(target=decrypt_fa)
thread161 = threading.Thread(target=decrypt_fb)
thread162 = threading.Thread(target=decrypt_fd)
thread163 = threading.Thread(target=decrypt_ff)
thread164 = threading.Thread(target=decrypt_fh)
thread165 = threading.Thread(target=decrypt_fj)
thread166 = threading.Thread(target=decrypt_fl)
thread167 = threading.Thread(target=decrypt_fn)
thread168 = threading.Thread(target=decrypt_fp)
thread169 = threading.Thread(target=decrypt_fr)
thread170 = threading.Thread(target=decrypt_ft)
thread171 = threading.Thread(target=decrypt_fv)
thread172 = threading.Thread(target=decrypt_fx)
thread173 = threading.Thread(target=decrypt_fz)
thread174 = threading.Thread(target=decrypt_fA)
thread175 = threading.Thread(target=decrypt_fB)
thread176 = threading.Thread(target=decrypt_fD)
thread177 = threading.Thread(target=decrypt_fF)
thread178 = threading.Thread(target=decrypt_fH)
thread179 = threading.Thread(target=decrypt_fJ)
thread180 = threading.Thread(target=decrypt_fL)
thread181 = threading.Thread(target=decrypt_fN)
thread182 = threading.Thread(target=decrypt_fP)
thread183 = threading.Thread(target=decrypt_fR)
thread184 = threading.Thread(target=decrypt_fT)
thread185 = threading.Thread(target=decrypt_fV)
thread186 = threading.Thread(target=decrypt_fX)
thread187 = threading.Thread(target=decrypt_fZ)
thread188 = threading.Thread(target=decrypt_f0)
thread189 = threading.Thread(target=decrypt_f2)
thread190 = threading.Thread(target=decrypt_f4)
thread191 = threading.Thread(target=decrypt_f6)
thread192 = threading.Thread(target=decrypt_f8)
thread193 = threading.Thread(target=decrypt_fexcl)
thread194 = threading.Thread(target=decrypt_fdquote)
thread195 = threading.Thread(target=decrypt_fdoll)
thread196 = threading.Thread(target=decrypt_fand)
thread197 = threading.Thread(target=decrypt_fquote)
thread198 = threading.Thread(target=decrypt_fpar)
thread199 = threading.Thread(target=decrypt_fast)
thread200 = threading.Thread(target=decrypt_fvir)
thread201 = threading.Thread(target=decrypt_fpp)
thread202 = threading.Thread(target=decrypt_ftp)
thread203 = threading.Thread(target=decrypt_fless)
thread204 = threading.Thread(target=decrypt_fmore)
thread205 = threading.Thread(target=decrypt_faro)
thread206 = threading.Thread(target=decrypt_fcroc)
thread207 = threading.Thread(target=decrypt_fbsl)
thread208 = threading.Thread(target=decrypt_fcirc)
thread209 = threading.Thread(target=decrypt_fesp)
thread210 = threading.Thread(target=decrypt_fcr)
thread211 = threading.Thread(target=decrypt_fhl)
thread212 = threading.Thread(target=decrypt_ftild)
thread213 = threading.Thread(target=decrypt_ha)
thread214 = threading.Thread(target=decrypt_hb)
thread215 = threading.Thread(target=decrypt_hd)
thread216 = threading.Thread(target=decrypt_hf)
thread217 = threading.Thread(target=decrypt_hh)
thread218 = threading.Thread(target=decrypt_hj)
thread219 = threading.Thread(target=decrypt_hl)
thread220 = threading.Thread(target=decrypt_hn)
thread221 = threading.Thread(target=decrypt_hp)
thread222 = threading.Thread(target=decrypt_hr)
thread223 = threading.Thread(target=decrypt_ht)
thread224 = threading.Thread(target=decrypt_hv)
thread225 = threading.Thread(target=decrypt_hx)
thread226 = threading.Thread(target=decrypt_hz)
thread227 = threading.Thread(target=decrypt_hA)
thread228 = threading.Thread(target=decrypt_hB)
thread229 = threading.Thread(target=decrypt_hD)
thread230 = threading.Thread(target=decrypt_hF)
thread231 = threading.Thread(target=decrypt_hH)
thread232 = threading.Thread(target=decrypt_hJ)
thread233 = threading.Thread(target=decrypt_hL)
thread234 = threading.Thread(target=decrypt_hN)
thread235 = threading.Thread(target=decrypt_hP)
thread236 = threading.Thread(target=decrypt_hR)
thread237 = threading.Thread(target=decrypt_hT)
thread238 = threading.Thread(target=decrypt_hV)
thread239 = threading.Thread(target=decrypt_hX)
thread240 = threading.Thread(target=decrypt_hZ)
thread241 = threading.Thread(target=decrypt_h0)
thread242 = threading.Thread(target=decrypt_h2)
thread243 = threading.Thread(target=decrypt_h4)
thread244 = threading.Thread(target=decrypt_h6)
thread245 = threading.Thread(target=decrypt_h8)
thread246 = threading.Thread(target=decrypt_hexcl)
thread247 = threading.Thread(target=decrypt_hdquote)
thread248 = threading.Thread(target=decrypt_hdoll)
thread249 = threading.Thread(target=decrypt_hand)
thread250 = threading.Thread(target=decrypt_hquote)
thread251 = threading.Thread(target=decrypt_hpar)
thread252 = threading.Thread(target=decrypt_hast)
thread253 = threading.Thread(target=decrypt_hvir)
thread254 = threading.Thread(target=decrypt_hpp)
thread255 = threading.Thread(target=decrypt_htp)
thread256 = threading.Thread(target=decrypt_hless)
thread257 = threading.Thread(target=decrypt_hmore)
thread258 = threading.Thread(target=decrypt_haro)
thread259 = threading.Thread(target=decrypt_hcroc)
thread260 = threading.Thread(target=decrypt_hbsl)
thread261 = threading.Thread(target=decrypt_hcirc)
thread262 = threading.Thread(target=decrypt_hesp)
thread263 = threading.Thread(target=decrypt_hcr)
thread264 = threading.Thread(target=decrypt_hhl)
thread265 = threading.Thread(target=decrypt_htild)
thread266 = threading.Thread(target=decrypt_ja)
thread267 = threading.Thread(target=decrypt_jb)
thread268 = threading.Thread(target=decrypt_jd)
thread269 = threading.Thread(target=decrypt_jf)
thread270 = threading.Thread(target=decrypt_jh)
thread271 = threading.Thread(target=decrypt_jj)
thread272 = threading.Thread(target=decrypt_jl)
thread273 = threading.Thread(target=decrypt_jn)
thread274 = threading.Thread(target=decrypt_jp)
thread275 = threading.Thread(target=decrypt_jr)
thread276 = threading.Thread(target=decrypt_jt)
thread277 = threading.Thread(target=decrypt_jv)
thread278 = threading.Thread(target=decrypt_jx)
thread279 = threading.Thread(target=decrypt_jz)
thread280 = threading.Thread(target=decrypt_jA)
thread281 = threading.Thread(target=decrypt_jB)
thread282 = threading.Thread(target=decrypt_jD)
thread283 = threading.Thread(target=decrypt_jF)
thread284 = threading.Thread(target=decrypt_jH)
thread285 = threading.Thread(target=decrypt_jJ)
thread286 = threading.Thread(target=decrypt_jL)
thread287 = threading.Thread(target=decrypt_jN)
thread288 = threading.Thread(target=decrypt_jP)
thread289 = threading.Thread(target=decrypt_jR)
thread290 = threading.Thread(target=decrypt_jT)
thread291 = threading.Thread(target=decrypt_jV)
thread292 = threading.Thread(target=decrypt_jX)
thread293 = threading.Thread(target=decrypt_jZ)
thread294 = threading.Thread(target=decrypt_j0)
thread295 = threading.Thread(target=decrypt_j2)
thread296 = threading.Thread(target=decrypt_j4)
thread297 = threading.Thread(target=decrypt_j6)
thread298 = threading.Thread(target=decrypt_j8)
thread299 = threading.Thread(target=decrypt_jexcl)
thread300 = threading.Thread(target=decrypt_jdquote)
thread301 = threading.Thread(target=decrypt_jdoll)
thread302 = threading.Thread(target=decrypt_jand)
thread303 = threading.Thread(target=decrypt_jquote)
thread304 = threading.Thread(target=decrypt_jpar)
thread305 = threading.Thread(target=decrypt_jast)
thread306 = threading.Thread(target=decrypt_jvir)
thread307 = threading.Thread(target=decrypt_jpp)
thread308 = threading.Thread(target=decrypt_jtp)
thread309 = threading.Thread(target=decrypt_jless)
thread310 = threading.Thread(target=decrypt_jmore)
thread311 = threading.Thread(target=decrypt_jaro)
thread312 = threading.Thread(target=decrypt_jcroc)
thread313 = threading.Thread(target=decrypt_jbsl)
thread314 = threading.Thread(target=decrypt_jcirc)
thread315 = threading.Thread(target=decrypt_jesp)
thread316 = threading.Thread(target=decrypt_jcr)
thread317 = threading.Thread(target=decrypt_jhl)
thread318 = threading.Thread(target=decrypt_jtild)
thread319 = threading.Thread(target=decrypt_la)
thread320 = threading.Thread(target=decrypt_lb)
thread321 = threading.Thread(target=decrypt_ld)
thread322 = threading.Thread(target=decrypt_lf)
thread323 = threading.Thread(target=decrypt_lh)
thread324 = threading.Thread(target=decrypt_lj)
thread325 = threading.Thread(target=decrypt_ll)
thread326 = threading.Thread(target=decrypt_ln)
thread327 = threading.Thread(target=decrypt_lp)
thread328 = threading.Thread(target=decrypt_lr)
thread329 = threading.Thread(target=decrypt_lt)
thread330 = threading.Thread(target=decrypt_lv)
thread331 = threading.Thread(target=decrypt_lx)
thread332 = threading.Thread(target=decrypt_lz)
thread333 = threading.Thread(target=decrypt_lA)
thread334 = threading.Thread(target=decrypt_lB)
thread335 = threading.Thread(target=decrypt_lD)
thread336 = threading.Thread(target=decrypt_lF)
thread337 = threading.Thread(target=decrypt_lH)
thread338 = threading.Thread(target=decrypt_lJ)
thread339 = threading.Thread(target=decrypt_lL)
thread340 = threading.Thread(target=decrypt_lN)
thread341 = threading.Thread(target=decrypt_lP)
thread342 = threading.Thread(target=decrypt_lR)
thread343 = threading.Thread(target=decrypt_lT)
thread344 = threading.Thread(target=decrypt_lV)
thread345 = threading.Thread(target=decrypt_lX)
thread346 = threading.Thread(target=decrypt_lZ)
thread347 = threading.Thread(target=decrypt_l0)
thread348 = threading.Thread(target=decrypt_l2)
thread349 = threading.Thread(target=decrypt_l4)
thread350 = threading.Thread(target=decrypt_l6)
thread351 = threading.Thread(target=decrypt_l8)
thread352 = threading.Thread(target=decrypt_lexcl)
thread353 = threading.Thread(target=decrypt_ldquote)
thread354 = threading.Thread(target=decrypt_ldoll)
thread355 = threading.Thread(target=decrypt_land)
thread356 = threading.Thread(target=decrypt_lquote)
thread357 = threading.Thread(target=decrypt_lpar)
thread358 = threading.Thread(target=decrypt_last)
thread359 = threading.Thread(target=decrypt_lvir)
thread360 = threading.Thread(target=decrypt_lpp)
thread361 = threading.Thread(target=decrypt_ltp)
thread362 = threading.Thread(target=decrypt_lless)
thread363 = threading.Thread(target=decrypt_lmore)
thread364 = threading.Thread(target=decrypt_laro)
thread365 = threading.Thread(target=decrypt_lcroc)
thread366 = threading.Thread(target=decrypt_lbsl)
thread367 = threading.Thread(target=decrypt_lcirc)
thread368 = threading.Thread(target=decrypt_lesp)
thread369 = threading.Thread(target=decrypt_lcr)
thread370 = threading.Thread(target=decrypt_lhl)
thread371 = threading.Thread(target=decrypt_ltild)
thread372 = threading.Thread(target=decrypt_na)
thread373 = threading.Thread(target=decrypt_nb)
thread374 = threading.Thread(target=decrypt_nd)
thread375 = threading.Thread(target=decrypt_nf)
thread376 = threading.Thread(target=decrypt_nh)
thread377 = threading.Thread(target=decrypt_nj)
thread378 = threading.Thread(target=decrypt_nl)
thread379 = threading.Thread(target=decrypt_nn)
thread380 = threading.Thread(target=decrypt_np)
thread381 = threading.Thread(target=decrypt_nr)
thread382 = threading.Thread(target=decrypt_nt)
thread383 = threading.Thread(target=decrypt_nv)
thread384 = threading.Thread(target=decrypt_nx)
thread385 = threading.Thread(target=decrypt_nz)
thread386 = threading.Thread(target=decrypt_nA)
thread387 = threading.Thread(target=decrypt_nB)
thread388 = threading.Thread(target=decrypt_nD)
thread389 = threading.Thread(target=decrypt_nF)
thread390 = threading.Thread(target=decrypt_nH)
thread391 = threading.Thread(target=decrypt_nJ)
thread392 = threading.Thread(target=decrypt_nL)
thread393 = threading.Thread(target=decrypt_nN)
thread394 = threading.Thread(target=decrypt_nP)
thread395 = threading.Thread(target=decrypt_nR)
thread396 = threading.Thread(target=decrypt_nT)
thread397 = threading.Thread(target=decrypt_nV)
thread398 = threading.Thread(target=decrypt_nX)
thread399 = threading.Thread(target=decrypt_nZ)
thread400 = threading.Thread(target=decrypt_n0)
thread401 = threading.Thread(target=decrypt_n2)
thread402 = threading.Thread(target=decrypt_n4)
thread403 = threading.Thread(target=decrypt_n6)
thread404 = threading.Thread(target=decrypt_n8)
thread405 = threading.Thread(target=decrypt_nexcl)
thread406 = threading.Thread(target=decrypt_ndquote)
thread407 = threading.Thread(target=decrypt_ndoll)
thread408 = threading.Thread(target=decrypt_nand)
thread409 = threading.Thread(target=decrypt_nquote)
thread410 = threading.Thread(target=decrypt_npar)
thread411 = threading.Thread(target=decrypt_nast)
thread412 = threading.Thread(target=decrypt_nvir)
thread413 = threading.Thread(target=decrypt_npp)
thread414 = threading.Thread(target=decrypt_ntp)
thread415 = threading.Thread(target=decrypt_nless)
thread416 = threading.Thread(target=decrypt_nmore)
thread417 = threading.Thread(target=decrypt_naro)
thread418 = threading.Thread(target=decrypt_ncroc)
thread419 = threading.Thread(target=decrypt_nbsl)
thread420 = threading.Thread(target=decrypt_ncirc)
thread421 = threading.Thread(target=decrypt_nesp)
thread422 = threading.Thread(target=decrypt_ncr)
thread423 = threading.Thread(target=decrypt_nhl)
thread424 = threading.Thread(target=decrypt_ntild)
thread425 = threading.Thread(target=decrypt_pa)
thread426 = threading.Thread(target=decrypt_pb)
thread427 = threading.Thread(target=decrypt_pd)
thread428 = threading.Thread(target=decrypt_pf)
thread429 = threading.Thread(target=decrypt_ph)
thread430 = threading.Thread(target=decrypt_pj)
thread431 = threading.Thread(target=decrypt_pl)
thread432 = threading.Thread(target=decrypt_pn)
thread433 = threading.Thread(target=decrypt_pp)
thread434 = threading.Thread(target=decrypt_pr)
thread435 = threading.Thread(target=decrypt_pt)
thread436 = threading.Thread(target=decrypt_pv)
thread437 = threading.Thread(target=decrypt_px)
thread438 = threading.Thread(target=decrypt_pz)
thread439 = threading.Thread(target=decrypt_pA)
thread440 = threading.Thread(target=decrypt_pB)
thread441 = threading.Thread(target=decrypt_pD)
thread442 = threading.Thread(target=decrypt_pF)
thread443 = threading.Thread(target=decrypt_pH)
thread444 = threading.Thread(target=decrypt_pJ)
thread445 = threading.Thread(target=decrypt_pL)
thread446 = threading.Thread(target=decrypt_pN)
thread447 = threading.Thread(target=decrypt_pP)
thread448 = threading.Thread(target=decrypt_pR)
thread449 = threading.Thread(target=decrypt_pT)
thread450 = threading.Thread(target=decrypt_pV)
thread451 = threading.Thread(target=decrypt_pX)
thread452 = threading.Thread(target=decrypt_pZ)
thread453 = threading.Thread(target=decrypt_p0)
thread454 = threading.Thread(target=decrypt_p2)
thread455 = threading.Thread(target=decrypt_p4)
thread456 = threading.Thread(target=decrypt_p6)
thread457 = threading.Thread(target=decrypt_p8)
thread458 = threading.Thread(target=decrypt_pexcl)
thread459 = threading.Thread(target=decrypt_pdquote)
thread460 = threading.Thread(target=decrypt_pdoll)
thread461 = threading.Thread(target=decrypt_pand)
thread462 = threading.Thread(target=decrypt_pquote)
thread463 = threading.Thread(target=decrypt_ppar)
thread464 = threading.Thread(target=decrypt_past)
thread465 = threading.Thread(target=decrypt_pvir)
thread466 = threading.Thread(target=decrypt_ppp)
thread467 = threading.Thread(target=decrypt_ptp)
thread468 = threading.Thread(target=decrypt_pless)
thread469 = threading.Thread(target=decrypt_pmore)
thread470 = threading.Thread(target=decrypt_paro)
thread471 = threading.Thread(target=decrypt_pcroc)
thread472 = threading.Thread(target=decrypt_pbsl)
thread473 = threading.Thread(target=decrypt_pcirc)
thread474 = threading.Thread(target=decrypt_pesp)
thread475 = threading.Thread(target=decrypt_pcr)
thread476 = threading.Thread(target=decrypt_phl)
thread477 = threading.Thread(target=decrypt_ptild)
thread478 = threading.Thread(target=decrypt_ra)
thread479 = threading.Thread(target=decrypt_rb)
thread480 = threading.Thread(target=decrypt_rd)
thread481 = threading.Thread(target=decrypt_rf)
thread482 = threading.Thread(target=decrypt_rh)
thread483 = threading.Thread(target=decrypt_rj)
thread484 = threading.Thread(target=decrypt_rl)
thread485 = threading.Thread(target=decrypt_rn)
thread486 = threading.Thread(target=decrypt_rp)
thread487 = threading.Thread(target=decrypt_rr)
thread488 = threading.Thread(target=decrypt_rt)
thread489 = threading.Thread(target=decrypt_rv)
thread490 = threading.Thread(target=decrypt_rx)
thread491 = threading.Thread(target=decrypt_rz)
thread492 = threading.Thread(target=decrypt_rA)
thread493 = threading.Thread(target=decrypt_rB)
thread494 = threading.Thread(target=decrypt_rD)
thread495 = threading.Thread(target=decrypt_rF)
thread496 = threading.Thread(target=decrypt_rH)
thread497 = threading.Thread(target=decrypt_rJ)
thread498 = threading.Thread(target=decrypt_rL)
thread499 = threading.Thread(target=decrypt_rN)
thread500 = threading.Thread(target=decrypt_rP)
thread501 = threading.Thread(target=decrypt_rR)
thread502 = threading.Thread(target=decrypt_rT)
thread503 = threading.Thread(target=decrypt_rV)
thread504 = threading.Thread(target=decrypt_rX)
thread505 = threading.Thread(target=decrypt_rZ)
thread506 = threading.Thread(target=decrypt_r0)
thread507 = threading.Thread(target=decrypt_r2)
thread508 = threading.Thread(target=decrypt_r4)
thread509 = threading.Thread(target=decrypt_r6)
thread510 = threading.Thread(target=decrypt_r8)
thread511 = threading.Thread(target=decrypt_rexcl)
thread512 = threading.Thread(target=decrypt_rdquote)
thread513 = threading.Thread(target=decrypt_rdoll)
thread514 = threading.Thread(target=decrypt_rand)
thread515 = threading.Thread(target=decrypt_rquote)
thread516 = threading.Thread(target=decrypt_rpar)
thread517 = threading.Thread(target=decrypt_rast)
thread518 = threading.Thread(target=decrypt_rvir)
thread519 = threading.Thread(target=decrypt_rpp)
thread520 = threading.Thread(target=decrypt_rtp)
thread521 = threading.Thread(target=decrypt_rless)
thread522 = threading.Thread(target=decrypt_rmore)
thread523 = threading.Thread(target=decrypt_raro)
thread524 = threading.Thread(target=decrypt_rcroc)
thread525 = threading.Thread(target=decrypt_rbsl)
thread526 = threading.Thread(target=decrypt_rcirc)
thread527 = threading.Thread(target=decrypt_resp)
thread528 = threading.Thread(target=decrypt_rcr)
thread529 = threading.Thread(target=decrypt_rhl)
thread530 = threading.Thread(target=decrypt_rtild)
thread531 = threading.Thread(target=decrypt_ta)
thread532 = threading.Thread(target=decrypt_tb)
thread533 = threading.Thread(target=decrypt_td)
thread534 = threading.Thread(target=decrypt_tf)
thread535 = threading.Thread(target=decrypt_th)
thread536 = threading.Thread(target=decrypt_tj)
thread537 = threading.Thread(target=decrypt_tl)
thread538 = threading.Thread(target=decrypt_tn)
thread539 = threading.Thread(target=decrypt_tp)
thread540 = threading.Thread(target=decrypt_tr)
thread541 = threading.Thread(target=decrypt_tt)
thread542 = threading.Thread(target=decrypt_tv)
thread543 = threading.Thread(target=decrypt_tx)
thread544 = threading.Thread(target=decrypt_tz)
thread545 = threading.Thread(target=decrypt_tA)
thread546 = threading.Thread(target=decrypt_tB)
thread547 = threading.Thread(target=decrypt_tD)
thread548 = threading.Thread(target=decrypt_tF)
thread549 = threading.Thread(target=decrypt_tH)
thread550 = threading.Thread(target=decrypt_tJ)
thread551 = threading.Thread(target=decrypt_tL)
thread552 = threading.Thread(target=decrypt_tN)
thread553 = threading.Thread(target=decrypt_tP)
thread554 = threading.Thread(target=decrypt_tR)
thread555 = threading.Thread(target=decrypt_tT)
thread556 = threading.Thread(target=decrypt_tV)
thread557 = threading.Thread(target=decrypt_tX)
thread558 = threading.Thread(target=decrypt_tZ)
thread559 = threading.Thread(target=decrypt_t0)
thread560 = threading.Thread(target=decrypt_t2)
thread561 = threading.Thread(target=decrypt_t4)
thread562 = threading.Thread(target=decrypt_t6)
thread563 = threading.Thread(target=decrypt_t8)
thread564 = threading.Thread(target=decrypt_texcl)
thread565 = threading.Thread(target=decrypt_tdquote)
thread566 = threading.Thread(target=decrypt_tdoll)
thread567 = threading.Thread(target=decrypt_tand)
thread568 = threading.Thread(target=decrypt_tquote)
thread569 = threading.Thread(target=decrypt_tpar)
thread570 = threading.Thread(target=decrypt_tast)
thread571 = threading.Thread(target=decrypt_tvir)
thread572 = threading.Thread(target=decrypt_tpp)
thread573 = threading.Thread(target=decrypt_ttp)
thread574 = threading.Thread(target=decrypt_tless)
thread575 = threading.Thread(target=decrypt_tmore)
thread576 = threading.Thread(target=decrypt_taro)
thread577 = threading.Thread(target=decrypt_tcroc)
thread578 = threading.Thread(target=decrypt_tbsl)
thread579 = threading.Thread(target=decrypt_tcirc)
thread580 = threading.Thread(target=decrypt_tesp)
thread581 = threading.Thread(target=decrypt_tcr)
thread582 = threading.Thread(target=decrypt_thl)
thread583 = threading.Thread(target=decrypt_ttild)
thread584 = threading.Thread(target=decrypt_va)
thread585 = threading.Thread(target=decrypt_vb)
thread586 = threading.Thread(target=decrypt_vd)
thread587 = threading.Thread(target=decrypt_vf)
thread588 = threading.Thread(target=decrypt_vh)
thread589 = threading.Thread(target=decrypt_vj)
thread590 = threading.Thread(target=decrypt_vl)
thread591 = threading.Thread(target=decrypt_vn)
thread592 = threading.Thread(target=decrypt_vp)
thread593 = threading.Thread(target=decrypt_vr)
thread594 = threading.Thread(target=decrypt_vt)
thread595 = threading.Thread(target=decrypt_vv)
thread596 = threading.Thread(target=decrypt_vx)
thread597 = threading.Thread(target=decrypt_vz)
thread598 = threading.Thread(target=decrypt_vA)
thread599 = threading.Thread(target=decrypt_vB)
thread600 = threading.Thread(target=decrypt_vD)
thread601 = threading.Thread(target=decrypt_vF)
thread602 = threading.Thread(target=decrypt_vH)
thread603 = threading.Thread(target=decrypt_vJ)
thread604 = threading.Thread(target=decrypt_vL)
thread605 = threading.Thread(target=decrypt_vN)
thread606 = threading.Thread(target=decrypt_vP)
thread607 = threading.Thread(target=decrypt_vR)
thread608 = threading.Thread(target=decrypt_vT)
thread609 = threading.Thread(target=decrypt_vV)
thread610 = threading.Thread(target=decrypt_vX)
thread611 = threading.Thread(target=decrypt_vZ)
thread612 = threading.Thread(target=decrypt_v0)
thread613 = threading.Thread(target=decrypt_v2)
thread614 = threading.Thread(target=decrypt_v4)
thread615 = threading.Thread(target=decrypt_v6)
thread616 = threading.Thread(target=decrypt_v8)
thread617 = threading.Thread(target=decrypt_vexcl)
thread618 = threading.Thread(target=decrypt_vdquote)
thread619 = threading.Thread(target=decrypt_vdoll)
thread620 = threading.Thread(target=decrypt_vand)
thread621 = threading.Thread(target=decrypt_vquote)
thread622 = threading.Thread(target=decrypt_vpar)
thread623 = threading.Thread(target=decrypt_vast)
thread624 = threading.Thread(target=decrypt_vvir)
thread625 = threading.Thread(target=decrypt_vpp)
thread626 = threading.Thread(target=decrypt_vtp)
thread627 = threading.Thread(target=decrypt_vless)
thread628 = threading.Thread(target=decrypt_vmore)
thread629 = threading.Thread(target=decrypt_varo)
thread630 = threading.Thread(target=decrypt_vcroc)
thread631 = threading.Thread(target=decrypt_vbsl)
thread632 = threading.Thread(target=decrypt_vcirc)
thread633 = threading.Thread(target=decrypt_vesp)
thread634 = threading.Thread(target=decrypt_vcr)
thread635 = threading.Thread(target=decrypt_vhl)
thread636 = threading.Thread(target=decrypt_vtild)
thread637 = threading.Thread(target=decrypt_xa)
thread638 = threading.Thread(target=decrypt_xb)
thread639 = threading.Thread(target=decrypt_xd)
thread640 = threading.Thread(target=decrypt_xf)
thread641 = threading.Thread(target=decrypt_xh)
thread642 = threading.Thread(target=decrypt_xj)
thread643 = threading.Thread(target=decrypt_xl)
thread644 = threading.Thread(target=decrypt_xn)
thread645 = threading.Thread(target=decrypt_xp)
thread646 = threading.Thread(target=decrypt_xr)
thread647 = threading.Thread(target=decrypt_xt)
thread648 = threading.Thread(target=decrypt_xv)
thread649 = threading.Thread(target=decrypt_xx)
thread650 = threading.Thread(target=decrypt_xz)
thread651 = threading.Thread(target=decrypt_xA)
thread652 = threading.Thread(target=decrypt_xB)
thread653 = threading.Thread(target=decrypt_xD)
thread654 = threading.Thread(target=decrypt_xF)
thread655 = threading.Thread(target=decrypt_xH)
thread656 = threading.Thread(target=decrypt_xJ)
thread657 = threading.Thread(target=decrypt_xL)
thread658 = threading.Thread(target=decrypt_xN)
thread659 = threading.Thread(target=decrypt_xP)
thread660 = threading.Thread(target=decrypt_xR)
thread661 = threading.Thread(target=decrypt_xT)
thread662 = threading.Thread(target=decrypt_xV)
thread663 = threading.Thread(target=decrypt_xX)
thread664 = threading.Thread(target=decrypt_xZ)
thread665 = threading.Thread(target=decrypt_x0)
thread666 = threading.Thread(target=decrypt_x2)
thread667 = threading.Thread(target=decrypt_x4)
thread668 = threading.Thread(target=decrypt_x6)
thread669 = threading.Thread(target=decrypt_x8)
thread670 = threading.Thread(target=decrypt_xexcl)
thread671 = threading.Thread(target=decrypt_xdquote)
thread672 = threading.Thread(target=decrypt_xdoll)
thread673 = threading.Thread(target=decrypt_xand)
thread674 = threading.Thread(target=decrypt_xquote)
thread675 = threading.Thread(target=decrypt_xpar)
thread676 = threading.Thread(target=decrypt_xast)
thread677 = threading.Thread(target=decrypt_xvir)
thread678 = threading.Thread(target=decrypt_xpp)
thread679 = threading.Thread(target=decrypt_xtp)
thread680 = threading.Thread(target=decrypt_xless)
thread681 = threading.Thread(target=decrypt_xmore)
thread682 = threading.Thread(target=decrypt_xaro)
thread683 = threading.Thread(target=decrypt_xcroc)
thread684 = threading.Thread(target=decrypt_xbsl)
thread685 = threading.Thread(target=decrypt_xcirc)
thread686 = threading.Thread(target=decrypt_xesp)
thread687 = threading.Thread(target=decrypt_xcr)
thread688 = threading.Thread(target=decrypt_xhl)
thread689 = threading.Thread(target=decrypt_xtild)
thread690 = threading.Thread(target=decrypt_za)
thread691 = threading.Thread(target=decrypt_zb)
thread692 = threading.Thread(target=decrypt_zd)
thread693 = threading.Thread(target=decrypt_zf)
thread694 = threading.Thread(target=decrypt_zh)
thread695 = threading.Thread(target=decrypt_zj)
thread696 = threading.Thread(target=decrypt_zl)
thread697 = threading.Thread(target=decrypt_zn)
thread698 = threading.Thread(target=decrypt_zp)
thread699 = threading.Thread(target=decrypt_zr)
thread700 = threading.Thread(target=decrypt_zt)
thread701 = threading.Thread(target=decrypt_zv)
thread702 = threading.Thread(target=decrypt_zx)
thread703 = threading.Thread(target=decrypt_zz)
thread704 = threading.Thread(target=decrypt_zA)
thread705 = threading.Thread(target=decrypt_zB)
thread706 = threading.Thread(target=decrypt_zD)
thread707 = threading.Thread(target=decrypt_zF)
thread708 = threading.Thread(target=decrypt_zH)
thread709 = threading.Thread(target=decrypt_zJ)
thread710 = threading.Thread(target=decrypt_zL)
thread711 = threading.Thread(target=decrypt_zN)
thread712 = threading.Thread(target=decrypt_zP)
thread713 = threading.Thread(target=decrypt_zR)
thread714 = threading.Thread(target=decrypt_zT)
thread715 = threading.Thread(target=decrypt_zV)
thread716 = threading.Thread(target=decrypt_zX)
thread717 = threading.Thread(target=decrypt_zZ)
thread718 = threading.Thread(target=decrypt_z0)
thread719 = threading.Thread(target=decrypt_z2)
thread720 = threading.Thread(target=decrypt_z4)
thread721 = threading.Thread(target=decrypt_z6)
thread722 = threading.Thread(target=decrypt_z8)
thread723 = threading.Thread(target=decrypt_zexcl)
thread724 = threading.Thread(target=decrypt_zdquote)
thread725 = threading.Thread(target=decrypt_zdoll)
thread726 = threading.Thread(target=decrypt_zand)
thread727 = threading.Thread(target=decrypt_zquote)
thread728 = threading.Thread(target=decrypt_zpar)
thread729 = threading.Thread(target=decrypt_zast)
thread730 = threading.Thread(target=decrypt_zvir)
thread731 = threading.Thread(target=decrypt_zpp)
thread732 = threading.Thread(target=decrypt_ztp)
thread733 = threading.Thread(target=decrypt_zless)
thread734 = threading.Thread(target=decrypt_zmore)
thread735 = threading.Thread(target=decrypt_zaro)
thread736 = threading.Thread(target=decrypt_zcroc)
thread737 = threading.Thread(target=decrypt_zbsl)
thread738 = threading.Thread(target=decrypt_zcirc)
thread739 = threading.Thread(target=decrypt_zesp)
thread740 = threading.Thread(target=decrypt_zcr)
thread741 = threading.Thread(target=decrypt_zhl)
thread742 = threading.Thread(target=decrypt_ztild)
thread743 = threading.Thread(target=decrypt_Aa)
thread744 = threading.Thread(target=decrypt_Ab)
thread745 = threading.Thread(target=decrypt_Ad)
thread746 = threading.Thread(target=decrypt_Af)
thread747 = threading.Thread(target=decrypt_Ah)
thread748 = threading.Thread(target=decrypt_Aj)
thread749 = threading.Thread(target=decrypt_Al)
thread750 = threading.Thread(target=decrypt_An)
thread751 = threading.Thread(target=decrypt_Ap)
thread752 = threading.Thread(target=decrypt_Ar)
thread753 = threading.Thread(target=decrypt_At)
thread754 = threading.Thread(target=decrypt_Av)
thread755 = threading.Thread(target=decrypt_Ax)
thread756 = threading.Thread(target=decrypt_Az)
thread757 = threading.Thread(target=decrypt_AA)
thread758 = threading.Thread(target=decrypt_AB)
thread759 = threading.Thread(target=decrypt_AD)
thread760 = threading.Thread(target=decrypt_AF)
thread761 = threading.Thread(target=decrypt_AH)
thread762 = threading.Thread(target=decrypt_AJ)
thread763 = threading.Thread(target=decrypt_AL)
thread764 = threading.Thread(target=decrypt_AN)
thread765 = threading.Thread(target=decrypt_AP)
thread766 = threading.Thread(target=decrypt_AR)
thread767 = threading.Thread(target=decrypt_AT)
thread768 = threading.Thread(target=decrypt_AV)
thread769 = threading.Thread(target=decrypt_AX)
thread770 = threading.Thread(target=decrypt_AZ)
thread771 = threading.Thread(target=decrypt_A0)
thread772 = threading.Thread(target=decrypt_A2)
thread773 = threading.Thread(target=decrypt_A4)
thread774 = threading.Thread(target=decrypt_A6)
thread775 = threading.Thread(target=decrypt_A8)
thread776 = threading.Thread(target=decrypt_Aexcl)
thread777 = threading.Thread(target=decrypt_Adquote)
thread778 = threading.Thread(target=decrypt_Adoll)
thread779 = threading.Thread(target=decrypt_Aand)
thread780 = threading.Thread(target=decrypt_Aquote)
thread781 = threading.Thread(target=decrypt_Apar)
thread782 = threading.Thread(target=decrypt_Aast)
thread783 = threading.Thread(target=decrypt_Avir)
thread784 = threading.Thread(target=decrypt_App)
thread785 = threading.Thread(target=decrypt_Atp)
thread786 = threading.Thread(target=decrypt_Aless)
thread787 = threading.Thread(target=decrypt_Amore)
thread788 = threading.Thread(target=decrypt_Aaro)
thread789 = threading.Thread(target=decrypt_Acroc)
thread790 = threading.Thread(target=decrypt_Absl)
thread791 = threading.Thread(target=decrypt_Acirc)
thread792 = threading.Thread(target=decrypt_Aesp)
thread793 = threading.Thread(target=decrypt_Acr)
thread794 = threading.Thread(target=decrypt_Ahl)
thread795 = threading.Thread(target=decrypt_Atild)
thread796 = threading.Thread(target=decrypt_Ba)
thread797 = threading.Thread(target=decrypt_Bb)
thread798 = threading.Thread(target=decrypt_Bd)
thread799 = threading.Thread(target=decrypt_Bf)
thread800 = threading.Thread(target=decrypt_Bh)
thread801 = threading.Thread(target=decrypt_Bj)
thread802 = threading.Thread(target=decrypt_Bl)
thread803 = threading.Thread(target=decrypt_Bn)
thread804 = threading.Thread(target=decrypt_Bp)
thread805 = threading.Thread(target=decrypt_Br)
thread806 = threading.Thread(target=decrypt_Bt)
thread807 = threading.Thread(target=decrypt_Bv)
thread808 = threading.Thread(target=decrypt_Bx)
thread809 = threading.Thread(target=decrypt_Bz)
thread810 = threading.Thread(target=decrypt_BA)
thread811 = threading.Thread(target=decrypt_BB)
thread812 = threading.Thread(target=decrypt_BD)
thread813 = threading.Thread(target=decrypt_BF)
thread814 = threading.Thread(target=decrypt_BH)
thread815 = threading.Thread(target=decrypt_BJ)
thread816 = threading.Thread(target=decrypt_BL)
thread817 = threading.Thread(target=decrypt_BN)
thread818 = threading.Thread(target=decrypt_BP)
thread819 = threading.Thread(target=decrypt_BR)
thread820 = threading.Thread(target=decrypt_BT)
thread821 = threading.Thread(target=decrypt_BV)
thread822 = threading.Thread(target=decrypt_BX)
thread823 = threading.Thread(target=decrypt_BZ)
thread824 = threading.Thread(target=decrypt_B0)
thread825 = threading.Thread(target=decrypt_B2)
thread826 = threading.Thread(target=decrypt_B4)
thread827 = threading.Thread(target=decrypt_B6)
thread828 = threading.Thread(target=decrypt_B8)
thread829 = threading.Thread(target=decrypt_Bexcl)
thread830 = threading.Thread(target=decrypt_Bdquote)
thread831 = threading.Thread(target=decrypt_Bdoll)
thread832 = threading.Thread(target=decrypt_Band)
thread833 = threading.Thread(target=decrypt_Bquote)
thread834 = threading.Thread(target=decrypt_Bpar)
thread835 = threading.Thread(target=decrypt_Bast)
thread836 = threading.Thread(target=decrypt_Bvir)
thread837 = threading.Thread(target=decrypt_Bpp)
thread838 = threading.Thread(target=decrypt_Btp)
thread839 = threading.Thread(target=decrypt_Bless)
thread840 = threading.Thread(target=decrypt_Bmore)
thread841 = threading.Thread(target=decrypt_Baro)
thread842 = threading.Thread(target=decrypt_Bcroc)
thread843 = threading.Thread(target=decrypt_Bbsl)
thread844 = threading.Thread(target=decrypt_Bcirc)
thread845 = threading.Thread(target=decrypt_Besp)
thread846 = threading.Thread(target=decrypt_Bcr)
thread847 = threading.Thread(target=decrypt_Bhl)
thread848 = threading.Thread(target=decrypt_Btild)
thread849 = threading.Thread(target=decrypt_Da)
thread850 = threading.Thread(target=decrypt_Db)
thread851 = threading.Thread(target=decrypt_Dd)
thread852 = threading.Thread(target=decrypt_Df)
thread853 = threading.Thread(target=decrypt_Dh)
thread854 = threading.Thread(target=decrypt_Dj)
thread855 = threading.Thread(target=decrypt_Dl)
thread856 = threading.Thread(target=decrypt_Dn)
thread857 = threading.Thread(target=decrypt_Dp)
thread858 = threading.Thread(target=decrypt_Dr)
thread859 = threading.Thread(target=decrypt_Dt)
thread860 = threading.Thread(target=decrypt_Dv)
thread861 = threading.Thread(target=decrypt_Dx)
thread862 = threading.Thread(target=decrypt_Dz)
thread863 = threading.Thread(target=decrypt_DA)
thread864 = threading.Thread(target=decrypt_DB)
thread865 = threading.Thread(target=decrypt_DD)
thread866 = threading.Thread(target=decrypt_DF)
thread867 = threading.Thread(target=decrypt_DH)
thread868 = threading.Thread(target=decrypt_DJ)
thread869 = threading.Thread(target=decrypt_DL)
thread870 = threading.Thread(target=decrypt_DN)
thread871 = threading.Thread(target=decrypt_DP)
thread872 = threading.Thread(target=decrypt_DR)
thread873 = threading.Thread(target=decrypt_DT)
thread874 = threading.Thread(target=decrypt_DV)
thread875 = threading.Thread(target=decrypt_DX)
thread876 = threading.Thread(target=decrypt_DZ)
thread877 = threading.Thread(target=decrypt_D0)
thread878 = threading.Thread(target=decrypt_D2)
thread879 = threading.Thread(target=decrypt_D4)
thread880 = threading.Thread(target=decrypt_D6)
thread881 = threading.Thread(target=decrypt_D8)
thread882 = threading.Thread(target=decrypt_Dexcl)
thread883 = threading.Thread(target=decrypt_Ddquote)
thread884 = threading.Thread(target=decrypt_Ddoll)
thread885 = threading.Thread(target=decrypt_Dand)
thread886 = threading.Thread(target=decrypt_Dquote)
thread887 = threading.Thread(target=decrypt_Dpar)
thread888 = threading.Thread(target=decrypt_Dast)
thread889 = threading.Thread(target=decrypt_Dvir)
thread890 = threading.Thread(target=decrypt_Dpp)
thread891 = threading.Thread(target=decrypt_Dtp)
thread892 = threading.Thread(target=decrypt_Dless)
thread893 = threading.Thread(target=decrypt_Dmore)
thread894 = threading.Thread(target=decrypt_Daro)
thread895 = threading.Thread(target=decrypt_Dcroc)
thread896 = threading.Thread(target=decrypt_Dbsl)
thread897 = threading.Thread(target=decrypt_Dcirc)
thread898 = threading.Thread(target=decrypt_Desp)
thread899 = threading.Thread(target=decrypt_Dcr)
thread900 = threading.Thread(target=decrypt_Dhl)
thread901 = threading.Thread(target=decrypt_Dtild)
thread902 = threading.Thread(target=decrypt_Fa)
thread903 = threading.Thread(target=decrypt_Fb)
thread904 = threading.Thread(target=decrypt_Fd)
thread905 = threading.Thread(target=decrypt_Ff)
thread906 = threading.Thread(target=decrypt_Fh)
thread907 = threading.Thread(target=decrypt_Fj)
thread908 = threading.Thread(target=decrypt_Fl)
thread909 = threading.Thread(target=decrypt_Fn)
thread910 = threading.Thread(target=decrypt_Fp)
thread911 = threading.Thread(target=decrypt_Fr)
thread912 = threading.Thread(target=decrypt_Ft)
thread913 = threading.Thread(target=decrypt_Fv)
thread914 = threading.Thread(target=decrypt_Fx)
thread915 = threading.Thread(target=decrypt_Fz)
thread916 = threading.Thread(target=decrypt_FA)
thread917 = threading.Thread(target=decrypt_FB)
thread918 = threading.Thread(target=decrypt_FD)
thread919 = threading.Thread(target=decrypt_FF)
thread920 = threading.Thread(target=decrypt_FH)
thread921 = threading.Thread(target=decrypt_FJ)
thread922 = threading.Thread(target=decrypt_FL)
thread923 = threading.Thread(target=decrypt_FN)
thread924 = threading.Thread(target=decrypt_FP)
thread925 = threading.Thread(target=decrypt_FR)
thread926 = threading.Thread(target=decrypt_FT)
thread927 = threading.Thread(target=decrypt_FV)
thread928 = threading.Thread(target=decrypt_FX)
thread929 = threading.Thread(target=decrypt_FZ)
thread930 = threading.Thread(target=decrypt_F0)
thread931 = threading.Thread(target=decrypt_F2)
thread932 = threading.Thread(target=decrypt_F4)
thread933 = threading.Thread(target=decrypt_F6)
thread934 = threading.Thread(target=decrypt_F8)
thread935 = threading.Thread(target=decrypt_Fexcl)
thread936 = threading.Thread(target=decrypt_Fdquote)
thread937 = threading.Thread(target=decrypt_Fdoll)
thread938 = threading.Thread(target=decrypt_Fand)
thread939 = threading.Thread(target=decrypt_Fquote)
thread940 = threading.Thread(target=decrypt_Fpar)
thread941 = threading.Thread(target=decrypt_Fast)
thread942 = threading.Thread(target=decrypt_Fvir)
thread943 = threading.Thread(target=decrypt_Fpp)
thread944 = threading.Thread(target=decrypt_Ftp)
thread945 = threading.Thread(target=decrypt_Fless)
thread946 = threading.Thread(target=decrypt_Fmore)
thread947 = threading.Thread(target=decrypt_Faro)
thread948 = threading.Thread(target=decrypt_Fcroc)
thread949 = threading.Thread(target=decrypt_Fbsl)
thread950 = threading.Thread(target=decrypt_Fcirc)
thread951 = threading.Thread(target=decrypt_Fesp)
thread952 = threading.Thread(target=decrypt_Fcr)
thread953 = threading.Thread(target=decrypt_Fhl)
thread954 = threading.Thread(target=decrypt_Ftild)
thread955 = threading.Thread(target=decrypt_Ha)
thread956 = threading.Thread(target=decrypt_Hb)
thread957 = threading.Thread(target=decrypt_Hd)
thread958 = threading.Thread(target=decrypt_Hf)
thread959 = threading.Thread(target=decrypt_Hh)
thread960 = threading.Thread(target=decrypt_Hj)
thread961 = threading.Thread(target=decrypt_Hl)
thread962 = threading.Thread(target=decrypt_Hn)
thread963 = threading.Thread(target=decrypt_Hp)
thread964 = threading.Thread(target=decrypt_Hr)
thread965 = threading.Thread(target=decrypt_Ht)
thread966 = threading.Thread(target=decrypt_Hv)
thread967 = threading.Thread(target=decrypt_Hx)
thread968 = threading.Thread(target=decrypt_Hz)
thread969 = threading.Thread(target=decrypt_HA)
thread970 = threading.Thread(target=decrypt_HB)
thread971 = threading.Thread(target=decrypt_HD)
thread972 = threading.Thread(target=decrypt_HF)
thread973 = threading.Thread(target=decrypt_HH)
thread974 = threading.Thread(target=decrypt_HJ)
thread975 = threading.Thread(target=decrypt_HL)
thread976 = threading.Thread(target=decrypt_HN)
thread977 = threading.Thread(target=decrypt_HP)
thread978 = threading.Thread(target=decrypt_HR)
thread979 = threading.Thread(target=decrypt_HT)
thread980 = threading.Thread(target=decrypt_HV)
thread981 = threading.Thread(target=decrypt_HX)
thread982 = threading.Thread(target=decrypt_HZ)
thread983 = threading.Thread(target=decrypt_H0)
thread984 = threading.Thread(target=decrypt_H2)
thread985 = threading.Thread(target=decrypt_H4)
thread986 = threading.Thread(target=decrypt_H6)
thread987 = threading.Thread(target=decrypt_H8)
thread988 = threading.Thread(target=decrypt_Hexcl)
thread989 = threading.Thread(target=decrypt_Hdquote)
thread990 = threading.Thread(target=decrypt_Hdoll)
thread991 = threading.Thread(target=decrypt_Hand)
thread992 = threading.Thread(target=decrypt_Hquote)
thread993 = threading.Thread(target=decrypt_Hpar)
thread994 = threading.Thread(target=decrypt_Hast)
thread995 = threading.Thread(target=decrypt_Hvir)
thread996 = threading.Thread(target=decrypt_Hpp)
thread997 = threading.Thread(target=decrypt_Htp)
thread998 = threading.Thread(target=decrypt_Hless)
thread999 = threading.Thread(target=decrypt_Hmore)
thread1000 = threading.Thread(target=decrypt_Haro)
thread1001 = threading.Thread(target=decrypt_Hcroc)
thread1002 = threading.Thread(target=decrypt_Hbsl)
thread1003 = threading.Thread(target=decrypt_Hcirc)
thread1004 = threading.Thread(target=decrypt_Hesp)
thread1005 = threading.Thread(target=decrypt_Hcr)
thread1006 = threading.Thread(target=decrypt_Hhl)
thread1007 = threading.Thread(target=decrypt_Htild)
thread1008 = threading.Thread(target=decrypt_Ja)
thread1009 = threading.Thread(target=decrypt_Jb)
thread1010 = threading.Thread(target=decrypt_Jd)
thread1011 = threading.Thread(target=decrypt_Jf)
thread1012 = threading.Thread(target=decrypt_Jh)
thread1013 = threading.Thread(target=decrypt_Jj)
thread1014 = threading.Thread(target=decrypt_Jl)
thread1015 = threading.Thread(target=decrypt_Jn)
thread1016 = threading.Thread(target=decrypt_Jp)
thread1017 = threading.Thread(target=decrypt_Jr)
thread1018 = threading.Thread(target=decrypt_Jt)
thread1019 = threading.Thread(target=decrypt_Jv)
thread1020 = threading.Thread(target=decrypt_Jx)
thread1021 = threading.Thread(target=decrypt_Jz)
thread1022 = threading.Thread(target=decrypt_JA)
thread1023 = threading.Thread(target=decrypt_JB)
thread1024 = threading.Thread(target=decrypt_JD)
thread1025 = threading.Thread(target=decrypt_JF)
thread1026 = threading.Thread(target=decrypt_JH)
thread1027 = threading.Thread(target=decrypt_JJ)
thread1028 = threading.Thread(target=decrypt_JL)
thread1029 = threading.Thread(target=decrypt_JN)
thread1030 = threading.Thread(target=decrypt_JP)
thread1031 = threading.Thread(target=decrypt_JR)
thread1032 = threading.Thread(target=decrypt_JT)
thread1033 = threading.Thread(target=decrypt_JV)
thread1034 = threading.Thread(target=decrypt_JX)
thread1035 = threading.Thread(target=decrypt_JZ)
thread1036 = threading.Thread(target=decrypt_J0)
thread1037 = threading.Thread(target=decrypt_J2)
thread1038 = threading.Thread(target=decrypt_J4)
thread1039 = threading.Thread(target=decrypt_J6)
thread1040 = threading.Thread(target=decrypt_J8)
thread1041 = threading.Thread(target=decrypt_Jexcl)
thread1042 = threading.Thread(target=decrypt_Jdquote)
thread1043 = threading.Thread(target=decrypt_Jdoll)
thread1044 = threading.Thread(target=decrypt_Jand)
thread1045 = threading.Thread(target=decrypt_Jquote)
thread1046 = threading.Thread(target=decrypt_Jpar)
thread1047 = threading.Thread(target=decrypt_Jast)
thread1048 = threading.Thread(target=decrypt_Jvir)
thread1049 = threading.Thread(target=decrypt_Jpp)
thread1050 = threading.Thread(target=decrypt_Jtp)
thread1051 = threading.Thread(target=decrypt_Jless)
thread1052 = threading.Thread(target=decrypt_Jmore)
thread1053 = threading.Thread(target=decrypt_Jaro)
thread1054 = threading.Thread(target=decrypt_Jcroc)
thread1055 = threading.Thread(target=decrypt_Jbsl)
thread1056 = threading.Thread(target=decrypt_Jcirc)
thread1057 = threading.Thread(target=decrypt_Jesp)
thread1058 = threading.Thread(target=decrypt_Jcr)
thread1059 = threading.Thread(target=decrypt_Jhl)
thread1060 = threading.Thread(target=decrypt_Jtild)
thread1061 = threading.Thread(target=decrypt_La)
thread1062 = threading.Thread(target=decrypt_Lb)
thread1063 = threading.Thread(target=decrypt_Ld)
thread1064 = threading.Thread(target=decrypt_Lf)
thread1065 = threading.Thread(target=decrypt_Lh)
thread1066 = threading.Thread(target=decrypt_Lj)
thread1067 = threading.Thread(target=decrypt_Ll)
thread1068 = threading.Thread(target=decrypt_Ln)
thread1069 = threading.Thread(target=decrypt_Lp)
thread1070 = threading.Thread(target=decrypt_Lr)
thread1071 = threading.Thread(target=decrypt_Lt)
thread1072 = threading.Thread(target=decrypt_Lv)
thread1073 = threading.Thread(target=decrypt_Lx)
thread1074 = threading.Thread(target=decrypt_Lz)
thread1075 = threading.Thread(target=decrypt_LA)
thread1076 = threading.Thread(target=decrypt_LB)
thread1077 = threading.Thread(target=decrypt_LD)
thread1078 = threading.Thread(target=decrypt_LF)
thread1079 = threading.Thread(target=decrypt_LH)
thread1080 = threading.Thread(target=decrypt_LJ)
thread1081 = threading.Thread(target=decrypt_LL)
thread1082 = threading.Thread(target=decrypt_LN)
thread1083 = threading.Thread(target=decrypt_LP)
thread1084 = threading.Thread(target=decrypt_LR)
thread1085 = threading.Thread(target=decrypt_LT)
thread1086 = threading.Thread(target=decrypt_LV)
thread1087 = threading.Thread(target=decrypt_LX)
thread1088 = threading.Thread(target=decrypt_LZ)
thread1089 = threading.Thread(target=decrypt_L0)
thread1090 = threading.Thread(target=decrypt_L2)
thread1091 = threading.Thread(target=decrypt_L4)
thread1092 = threading.Thread(target=decrypt_L6)
thread1093 = threading.Thread(target=decrypt_L8)
thread1094 = threading.Thread(target=decrypt_Lexcl)
thread1095 = threading.Thread(target=decrypt_Ldquote)
thread1096 = threading.Thread(target=decrypt_Ldoll)
thread1097 = threading.Thread(target=decrypt_Land)
thread1098 = threading.Thread(target=decrypt_Lquote)
thread1099 = threading.Thread(target=decrypt_Lpar)
thread1100 = threading.Thread(target=decrypt_Last)
thread1101 = threading.Thread(target=decrypt_Lvir)
thread1102 = threading.Thread(target=decrypt_Lpp)
thread1103 = threading.Thread(target=decrypt_Ltp)
thread1104 = threading.Thread(target=decrypt_Lless)
thread1105 = threading.Thread(target=decrypt_Lmore)
thread1106 = threading.Thread(target=decrypt_Laro)
thread1107 = threading.Thread(target=decrypt_Lcroc)
thread1108 = threading.Thread(target=decrypt_Lbsl)
thread1109 = threading.Thread(target=decrypt_Lcirc)
thread1110 = threading.Thread(target=decrypt_Lesp)
thread1111 = threading.Thread(target=decrypt_Lcr)
thread1112 = threading.Thread(target=decrypt_Lhl)
thread1113 = threading.Thread(target=decrypt_Ltild)
thread1114 = threading.Thread(target=decrypt_Na)
thread1115 = threading.Thread(target=decrypt_Nb)
thread1116 = threading.Thread(target=decrypt_Nd)
thread1117 = threading.Thread(target=decrypt_Nf)
thread1118 = threading.Thread(target=decrypt_Nh)
thread1119 = threading.Thread(target=decrypt_Nj)
thread1120 = threading.Thread(target=decrypt_Nl)
thread1121 = threading.Thread(target=decrypt_Nn)
thread1122 = threading.Thread(target=decrypt_Np)
thread1123 = threading.Thread(target=decrypt_Nr)
thread1124 = threading.Thread(target=decrypt_Nt)
thread1125 = threading.Thread(target=decrypt_Nv)
thread1126 = threading.Thread(target=decrypt_Nx)
thread1127 = threading.Thread(target=decrypt_Nz)
thread1128 = threading.Thread(target=decrypt_NA)
thread1129 = threading.Thread(target=decrypt_NB)
thread1130 = threading.Thread(target=decrypt_ND)
thread1131 = threading.Thread(target=decrypt_NF)
thread1132 = threading.Thread(target=decrypt_NH)
thread1133 = threading.Thread(target=decrypt_NJ)
thread1134 = threading.Thread(target=decrypt_NL)
thread1135 = threading.Thread(target=decrypt_NN)
thread1136 = threading.Thread(target=decrypt_NP)
thread1137 = threading.Thread(target=decrypt_NR)
thread1138 = threading.Thread(target=decrypt_NT)
thread1139 = threading.Thread(target=decrypt_NV)
thread1140 = threading.Thread(target=decrypt_NX)
thread1141 = threading.Thread(target=decrypt_NZ)
thread1142 = threading.Thread(target=decrypt_N0)
thread1143 = threading.Thread(target=decrypt_N2)
thread1144 = threading.Thread(target=decrypt_N4)
thread1145 = threading.Thread(target=decrypt_N6)
thread1146 = threading.Thread(target=decrypt_N8)
thread1147 = threading.Thread(target=decrypt_Nexcl)
thread1148 = threading.Thread(target=decrypt_Ndquote)
thread1149 = threading.Thread(target=decrypt_Ndoll)
thread1150 = threading.Thread(target=decrypt_Nand)
thread1151 = threading.Thread(target=decrypt_Nquote)
thread1152 = threading.Thread(target=decrypt_Npar)
thread1153 = threading.Thread(target=decrypt_Nast)
thread1154 = threading.Thread(target=decrypt_Nvir)
thread1155 = threading.Thread(target=decrypt_Npp)
thread1156 = threading.Thread(target=decrypt_Ntp)
thread1157 = threading.Thread(target=decrypt_Nless)
thread1158 = threading.Thread(target=decrypt_Nmore)
thread1159 = threading.Thread(target=decrypt_Naro)
thread1160 = threading.Thread(target=decrypt_Ncroc)
thread1161 = threading.Thread(target=decrypt_Nbsl)
thread1162 = threading.Thread(target=decrypt_Ncirc)
thread1163 = threading.Thread(target=decrypt_Nesp)
thread1164 = threading.Thread(target=decrypt_Ncr)
thread1165 = threading.Thread(target=decrypt_Nhl)
thread1166 = threading.Thread(target=decrypt_Ntild)
thread1167 = threading.Thread(target=decrypt_Pa)
thread1168 = threading.Thread(target=decrypt_Pb)
thread1169 = threading.Thread(target=decrypt_Pd)
thread1170 = threading.Thread(target=decrypt_Pf)
thread1171 = threading.Thread(target=decrypt_Ph)
thread1172 = threading.Thread(target=decrypt_Pj)
thread1173 = threading.Thread(target=decrypt_Pl)
thread1174 = threading.Thread(target=decrypt_Pn)
thread1175 = threading.Thread(target=decrypt_Pp)
thread1176 = threading.Thread(target=decrypt_Pr)
thread1177 = threading.Thread(target=decrypt_Pt)
thread1178 = threading.Thread(target=decrypt_Pv)
thread1179 = threading.Thread(target=decrypt_Px)
thread1180 = threading.Thread(target=decrypt_Pz)
thread1181 = threading.Thread(target=decrypt_PA)
thread1182 = threading.Thread(target=decrypt_PB)
thread1183 = threading.Thread(target=decrypt_PD)
thread1184 = threading.Thread(target=decrypt_PF)
thread1185 = threading.Thread(target=decrypt_PH)
thread1186 = threading.Thread(target=decrypt_PJ)
thread1187 = threading.Thread(target=decrypt_PL)
thread1188 = threading.Thread(target=decrypt_PN)
thread1189 = threading.Thread(target=decrypt_PP)
thread1190 = threading.Thread(target=decrypt_PR)
thread1191 = threading.Thread(target=decrypt_PT)
thread1192 = threading.Thread(target=decrypt_PV)
thread1193 = threading.Thread(target=decrypt_PX)
thread1194 = threading.Thread(target=decrypt_PZ)
thread1195 = threading.Thread(target=decrypt_P0)
thread1196 = threading.Thread(target=decrypt_P2)
thread1197 = threading.Thread(target=decrypt_P4)
thread1198 = threading.Thread(target=decrypt_P6)
thread1199 = threading.Thread(target=decrypt_P8)
thread1200 = threading.Thread(target=decrypt_Pexcl)
thread1201 = threading.Thread(target=decrypt_Pdquote)
thread1202 = threading.Thread(target=decrypt_Pdoll)
thread1203 = threading.Thread(target=decrypt_Pand)
thread1204 = threading.Thread(target=decrypt_Pquote)
thread1205 = threading.Thread(target=decrypt_Ppar)
thread1206 = threading.Thread(target=decrypt_Past)
thread1207 = threading.Thread(target=decrypt_Pvir)
thread1208 = threading.Thread(target=decrypt_Ppp)
thread1209 = threading.Thread(target=decrypt_Ptp)
thread1210 = threading.Thread(target=decrypt_Pless)
thread1211 = threading.Thread(target=decrypt_Pmore)
thread1212 = threading.Thread(target=decrypt_Paro)
thread1213 = threading.Thread(target=decrypt_Pcroc)
thread1214 = threading.Thread(target=decrypt_Pbsl)
thread1215 = threading.Thread(target=decrypt_Pcirc)
thread1216 = threading.Thread(target=decrypt_Pesp)
thread1217 = threading.Thread(target=decrypt_Pcr)
thread1218 = threading.Thread(target=decrypt_Phl)
thread1219 = threading.Thread(target=decrypt_Ptild)
thread1220 = threading.Thread(target=decrypt_Ra)
thread1221 = threading.Thread(target=decrypt_Rb)
thread1222 = threading.Thread(target=decrypt_Rd)
thread1223 = threading.Thread(target=decrypt_Rf)
thread1224 = threading.Thread(target=decrypt_Rh)
thread1225 = threading.Thread(target=decrypt_Rj)
thread1226 = threading.Thread(target=decrypt_Rl)
thread1227 = threading.Thread(target=decrypt_Rn)
thread1228 = threading.Thread(target=decrypt_Rp)
thread1229 = threading.Thread(target=decrypt_Rr)
thread1230 = threading.Thread(target=decrypt_Rt)
thread1231 = threading.Thread(target=decrypt_Rv)
thread1232 = threading.Thread(target=decrypt_Rx)
thread1233 = threading.Thread(target=decrypt_Rz)
thread1234 = threading.Thread(target=decrypt_RA)
thread1235 = threading.Thread(target=decrypt_RB)
thread1236 = threading.Thread(target=decrypt_RD)
thread1237 = threading.Thread(target=decrypt_RF)
thread1238 = threading.Thread(target=decrypt_RH)
thread1239 = threading.Thread(target=decrypt_RJ)
thread1240 = threading.Thread(target=decrypt_RL)
thread1241 = threading.Thread(target=decrypt_RN)
thread1242 = threading.Thread(target=decrypt_RP)
thread1243 = threading.Thread(target=decrypt_RR)
thread1244 = threading.Thread(target=decrypt_RT)
thread1245 = threading.Thread(target=decrypt_RV)
thread1246 = threading.Thread(target=decrypt_RX)
thread1247 = threading.Thread(target=decrypt_RZ)
thread1248 = threading.Thread(target=decrypt_R0)
thread1249 = threading.Thread(target=decrypt_R2)
thread1250 = threading.Thread(target=decrypt_R4)
thread1251 = threading.Thread(target=decrypt_R6)
thread1252 = threading.Thread(target=decrypt_R8)
thread1253 = threading.Thread(target=decrypt_Rexcl)
thread1254 = threading.Thread(target=decrypt_Rdquote)
thread1255 = threading.Thread(target=decrypt_Rdoll)
thread1256 = threading.Thread(target=decrypt_Rand)
thread1257 = threading.Thread(target=decrypt_Rquote)
thread1258 = threading.Thread(target=decrypt_Rpar)
thread1259 = threading.Thread(target=decrypt_Rast)
thread1260 = threading.Thread(target=decrypt_Rvir)
thread1261 = threading.Thread(target=decrypt_Rpp)
thread1262 = threading.Thread(target=decrypt_Rtp)
thread1263 = threading.Thread(target=decrypt_Rless)
thread1264 = threading.Thread(target=decrypt_Rmore)
thread1265 = threading.Thread(target=decrypt_Raro)
thread1266 = threading.Thread(target=decrypt_Rcroc)
thread1267 = threading.Thread(target=decrypt_Rbsl)
thread1268 = threading.Thread(target=decrypt_Rcirc)
thread1269 = threading.Thread(target=decrypt_Resp)
thread1270 = threading.Thread(target=decrypt_Rcr)
thread1271 = threading.Thread(target=decrypt_Rhl)
thread1272 = threading.Thread(target=decrypt_Rtild)
thread1273 = threading.Thread(target=decrypt_Ta)
thread1274 = threading.Thread(target=decrypt_Tb)
thread1275 = threading.Thread(target=decrypt_Td)
thread1276 = threading.Thread(target=decrypt_Tf)
thread1277 = threading.Thread(target=decrypt_Th)
thread1278 = threading.Thread(target=decrypt_Tj)
thread1279 = threading.Thread(target=decrypt_Tl)
thread1280 = threading.Thread(target=decrypt_Tn)
thread1281 = threading.Thread(target=decrypt_Tp)
thread1282 = threading.Thread(target=decrypt_Tr)
thread1283 = threading.Thread(target=decrypt_Tt)
thread1284 = threading.Thread(target=decrypt_Tv)
thread1285 = threading.Thread(target=decrypt_Tx)
thread1286 = threading.Thread(target=decrypt_Tz)
thread1287 = threading.Thread(target=decrypt_TA)
thread1288 = threading.Thread(target=decrypt_TB)
thread1289 = threading.Thread(target=decrypt_TD)
thread1290 = threading.Thread(target=decrypt_TF)
thread1291 = threading.Thread(target=decrypt_TH)
thread1292 = threading.Thread(target=decrypt_TJ)
thread1293 = threading.Thread(target=decrypt_TL)
thread1294 = threading.Thread(target=decrypt_TN)
thread1295 = threading.Thread(target=decrypt_TP)
thread1296 = threading.Thread(target=decrypt_TR)
thread1297 = threading.Thread(target=decrypt_TT)
thread1298 = threading.Thread(target=decrypt_TV)
thread1299 = threading.Thread(target=decrypt_TX)
thread1300 = threading.Thread(target=decrypt_TZ)
thread1301 = threading.Thread(target=decrypt_T0)
thread1302 = threading.Thread(target=decrypt_T2)
thread1303 = threading.Thread(target=decrypt_T4)
thread1304 = threading.Thread(target=decrypt_T6)
thread1305 = threading.Thread(target=decrypt_T8)
thread1306 = threading.Thread(target=decrypt_Texcl)
thread1307 = threading.Thread(target=decrypt_Tdquote)
thread1308 = threading.Thread(target=decrypt_Tdoll)
thread1309 = threading.Thread(target=decrypt_Tand)
thread1310 = threading.Thread(target=decrypt_Tquote)
thread1311 = threading.Thread(target=decrypt_Tpar)
thread1312 = threading.Thread(target=decrypt_Tast)
thread1313 = threading.Thread(target=decrypt_Tvir)
thread1314 = threading.Thread(target=decrypt_Tpp)
thread1315 = threading.Thread(target=decrypt_Ttp)
thread1316 = threading.Thread(target=decrypt_Tless)
thread1317 = threading.Thread(target=decrypt_Tmore)
thread1318 = threading.Thread(target=decrypt_Taro)
thread1319 = threading.Thread(target=decrypt_Tcroc)
thread1320 = threading.Thread(target=decrypt_Tbsl)
thread1321 = threading.Thread(target=decrypt_Tcirc)
thread1322 = threading.Thread(target=decrypt_Tesp)
thread1323 = threading.Thread(target=decrypt_Tcr)
thread1324 = threading.Thread(target=decrypt_Thl)
thread1325 = threading.Thread(target=decrypt_Ttild)
thread1326 = threading.Thread(target=decrypt_Va)
thread1327 = threading.Thread(target=decrypt_Vb)
thread1328 = threading.Thread(target=decrypt_Vd)
thread1329 = threading.Thread(target=decrypt_Vf)
thread1330 = threading.Thread(target=decrypt_Vh)
thread1331 = threading.Thread(target=decrypt_Vj)
thread1332 = threading.Thread(target=decrypt_Vl)
thread1333 = threading.Thread(target=decrypt_Vn)
thread1334 = threading.Thread(target=decrypt_Vp)
thread1335 = threading.Thread(target=decrypt_Vr)
thread1336 = threading.Thread(target=decrypt_Vt)
thread1337 = threading.Thread(target=decrypt_Vv)
thread1338 = threading.Thread(target=decrypt_Vx)
thread1339 = threading.Thread(target=decrypt_Vz)
thread1340 = threading.Thread(target=decrypt_VA)
thread1341 = threading.Thread(target=decrypt_VB)
thread1342 = threading.Thread(target=decrypt_VD)
thread1343 = threading.Thread(target=decrypt_VF)
thread1344 = threading.Thread(target=decrypt_VH)
thread1345 = threading.Thread(target=decrypt_VJ)
thread1346 = threading.Thread(target=decrypt_VL)
thread1347 = threading.Thread(target=decrypt_VN)
thread1348 = threading.Thread(target=decrypt_VP)
thread1349 = threading.Thread(target=decrypt_VR)
thread1350 = threading.Thread(target=decrypt_VT)
thread1351 = threading.Thread(target=decrypt_VV)
thread1352 = threading.Thread(target=decrypt_VX)
thread1353 = threading.Thread(target=decrypt_VZ)
thread1354 = threading.Thread(target=decrypt_V0)
thread1355 = threading.Thread(target=decrypt_V2)
thread1356 = threading.Thread(target=decrypt_V4)
thread1357 = threading.Thread(target=decrypt_V6)
thread1358 = threading.Thread(target=decrypt_V8)
thread1359 = threading.Thread(target=decrypt_Vexcl)
thread1360 = threading.Thread(target=decrypt_Vdquote)
thread1361 = threading.Thread(target=decrypt_Vdoll)
thread1362 = threading.Thread(target=decrypt_Vand)
thread1363 = threading.Thread(target=decrypt_Vquote)
thread1364 = threading.Thread(target=decrypt_Vpar)
thread1365 = threading.Thread(target=decrypt_Vast)
thread1366 = threading.Thread(target=decrypt_Vvir)
thread1367 = threading.Thread(target=decrypt_Vpp)
thread1368 = threading.Thread(target=decrypt_Vtp)
thread1369 = threading.Thread(target=decrypt_Vless)
thread1370 = threading.Thread(target=decrypt_Vmore)
thread1371 = threading.Thread(target=decrypt_Varo)
thread1372 = threading.Thread(target=decrypt_Vcroc)
thread1373 = threading.Thread(target=decrypt_Vbsl)
thread1374 = threading.Thread(target=decrypt_Vcirc)
thread1375 = threading.Thread(target=decrypt_Vesp)
thread1376 = threading.Thread(target=decrypt_Vcr)
thread1377 = threading.Thread(target=decrypt_Vhl)
thread1378 = threading.Thread(target=decrypt_Vtild)
thread1379 = threading.Thread(target=decrypt_Xa)
thread1380 = threading.Thread(target=decrypt_Xb)
thread1381 = threading.Thread(target=decrypt_Xd)
thread1382 = threading.Thread(target=decrypt_Xf)
thread1383 = threading.Thread(target=decrypt_Xh)
thread1384 = threading.Thread(target=decrypt_Xj)
thread1385 = threading.Thread(target=decrypt_Xl)
thread1386 = threading.Thread(target=decrypt_Xn)
thread1387 = threading.Thread(target=decrypt_Xp)
thread1388 = threading.Thread(target=decrypt_Xr)
thread1389 = threading.Thread(target=decrypt_Xt)
thread1390 = threading.Thread(target=decrypt_Xv)
thread1391 = threading.Thread(target=decrypt_Xx)
thread1392 = threading.Thread(target=decrypt_Xz)
thread1393 = threading.Thread(target=decrypt_XA)
thread1394 = threading.Thread(target=decrypt_XB)
thread1395 = threading.Thread(target=decrypt_XD)
thread1396 = threading.Thread(target=decrypt_XF)
thread1397 = threading.Thread(target=decrypt_XH)
thread1398 = threading.Thread(target=decrypt_XJ)
thread1399 = threading.Thread(target=decrypt_XL)
thread1400 = threading.Thread(target=decrypt_XN)
thread1401 = threading.Thread(target=decrypt_XP)
thread1402 = threading.Thread(target=decrypt_XR)
thread1403 = threading.Thread(target=decrypt_XT)
thread1404 = threading.Thread(target=decrypt_XV)
thread1405 = threading.Thread(target=decrypt_XX)
thread1406 = threading.Thread(target=decrypt_XZ)
thread1407 = threading.Thread(target=decrypt_X0)
thread1408 = threading.Thread(target=decrypt_X2)
thread1409 = threading.Thread(target=decrypt_X4)
thread1410 = threading.Thread(target=decrypt_X6)
thread1411 = threading.Thread(target=decrypt_X8)
thread1412 = threading.Thread(target=decrypt_Xexcl)
thread1413 = threading.Thread(target=decrypt_Xdquote)
thread1414 = threading.Thread(target=decrypt_Xdoll)
thread1415 = threading.Thread(target=decrypt_Xand)
thread1416 = threading.Thread(target=decrypt_Xquote)
thread1417 = threading.Thread(target=decrypt_Xpar)
thread1418 = threading.Thread(target=decrypt_Xast)
thread1419 = threading.Thread(target=decrypt_Xvir)
thread1420 = threading.Thread(target=decrypt_Xpp)
thread1421 = threading.Thread(target=decrypt_Xtp)
thread1422 = threading.Thread(target=decrypt_Xless)
thread1423 = threading.Thread(target=decrypt_Xmore)
thread1424 = threading.Thread(target=decrypt_Xaro)
thread1425 = threading.Thread(target=decrypt_Xcroc)
thread1426 = threading.Thread(target=decrypt_Xbsl)
thread1427 = threading.Thread(target=decrypt_Xcirc)
thread1428 = threading.Thread(target=decrypt_Xesp)
thread1429 = threading.Thread(target=decrypt_Xcr)
thread1430 = threading.Thread(target=decrypt_Xhl)
thread1431 = threading.Thread(target=decrypt_Xtild)
thread1432 = threading.Thread(target=decrypt_Za)
thread1433 = threading.Thread(target=decrypt_Zb)
thread1434 = threading.Thread(target=decrypt_Zd)
thread1435 = threading.Thread(target=decrypt_Zf)
thread1436 = threading.Thread(target=decrypt_Zh)
thread1437 = threading.Thread(target=decrypt_Zj)
thread1438 = threading.Thread(target=decrypt_Zl)
thread1439 = threading.Thread(target=decrypt_Zn)
thread1440 = threading.Thread(target=decrypt_Zp)
thread1441 = threading.Thread(target=decrypt_Zr)
thread1442 = threading.Thread(target=decrypt_Zt)
thread1443 = threading.Thread(target=decrypt_Zv)
thread1444 = threading.Thread(target=decrypt_Zx)
thread1445 = threading.Thread(target=decrypt_Zz)
thread1446 = threading.Thread(target=decrypt_ZA)
thread1447 = threading.Thread(target=decrypt_ZB)
thread1448 = threading.Thread(target=decrypt_ZD)
thread1449 = threading.Thread(target=decrypt_ZF)
thread1450 = threading.Thread(target=decrypt_ZH)
thread1451 = threading.Thread(target=decrypt_ZJ)
thread1452 = threading.Thread(target=decrypt_ZL)
thread1453 = threading.Thread(target=decrypt_ZN)
thread1454 = threading.Thread(target=decrypt_ZP)
thread1455 = threading.Thread(target=decrypt_ZR)
thread1456 = threading.Thread(target=decrypt_ZT)
thread1457 = threading.Thread(target=decrypt_ZV)
thread1458 = threading.Thread(target=decrypt_ZX)
thread1459 = threading.Thread(target=decrypt_ZZ)
thread1460 = threading.Thread(target=decrypt_Z0)
thread1461 = threading.Thread(target=decrypt_Z2)
thread1462 = threading.Thread(target=decrypt_Z4)
thread1463 = threading.Thread(target=decrypt_Z6)
thread1464 = threading.Thread(target=decrypt_Z8)
thread1465 = threading.Thread(target=decrypt_Zexcl)
thread1466 = threading.Thread(target=decrypt_Zdquote)
thread1467 = threading.Thread(target=decrypt_Zdoll)
thread1468 = threading.Thread(target=decrypt_Zand)
thread1469 = threading.Thread(target=decrypt_Zquote)
thread1470 = threading.Thread(target=decrypt_Zpar)
thread1471 = threading.Thread(target=decrypt_Zast)
thread1472 = threading.Thread(target=decrypt_Zvir)
thread1473 = threading.Thread(target=decrypt_Zpp)
thread1474 = threading.Thread(target=decrypt_Ztp)
thread1475 = threading.Thread(target=decrypt_Zless)
thread1476 = threading.Thread(target=decrypt_Zmore)
thread1477 = threading.Thread(target=decrypt_Zaro)
thread1478 = threading.Thread(target=decrypt_Zcroc)
thread1479 = threading.Thread(target=decrypt_Zbsl)
thread1480 = threading.Thread(target=decrypt_Zcirc)
thread1481 = threading.Thread(target=decrypt_Zesp)
thread1482 = threading.Thread(target=decrypt_Zcr)
thread1483 = threading.Thread(target=decrypt_Zhl)
thread1484 = threading.Thread(target=decrypt_Ztild)
thread1485 = threading.Thread(target=decrypt_0a)
thread1486 = threading.Thread(target=decrypt_0b)
thread1487 = threading.Thread(target=decrypt_0d)
thread1488 = threading.Thread(target=decrypt_0f)
thread1489 = threading.Thread(target=decrypt_0h)
thread1490 = threading.Thread(target=decrypt_0j)
thread1491 = threading.Thread(target=decrypt_0l)
thread1492 = threading.Thread(target=decrypt_0n)
thread1493 = threading.Thread(target=decrypt_0p)
thread1494 = threading.Thread(target=decrypt_0r)
thread1495 = threading.Thread(target=decrypt_0t)
thread1496 = threading.Thread(target=decrypt_0v)
thread1497 = threading.Thread(target=decrypt_0x)
thread1498 = threading.Thread(target=decrypt_0z)
thread1499 = threading.Thread(target=decrypt_0A)
thread1500 = threading.Thread(target=decrypt_0B)
thread1501 = threading.Thread(target=decrypt_0D)
thread1502 = threading.Thread(target=decrypt_0F)
thread1503 = threading.Thread(target=decrypt_0H)
thread1504 = threading.Thread(target=decrypt_0J)
thread1505 = threading.Thread(target=decrypt_0L)
thread1506 = threading.Thread(target=decrypt_0N)
thread1507 = threading.Thread(target=decrypt_0P)
thread1508 = threading.Thread(target=decrypt_0R)
thread1509 = threading.Thread(target=decrypt_0T)
thread1510 = threading.Thread(target=decrypt_0V)
thread1511 = threading.Thread(target=decrypt_0X)
thread1512 = threading.Thread(target=decrypt_0Z)
thread1513 = threading.Thread(target=decrypt_00)
thread1514 = threading.Thread(target=decrypt_02)
thread1515 = threading.Thread(target=decrypt_04)
thread1516 = threading.Thread(target=decrypt_06)
thread1517 = threading.Thread(target=decrypt_08)
thread1518 = threading.Thread(target=decrypt_0excl)
thread1519 = threading.Thread(target=decrypt_0dquote)
thread1520 = threading.Thread(target=decrypt_0doll)
thread1521 = threading.Thread(target=decrypt_0and)
thread1522 = threading.Thread(target=decrypt_0quote)
thread1523 = threading.Thread(target=decrypt_0par)
thread1524 = threading.Thread(target=decrypt_0ast)
thread1525 = threading.Thread(target=decrypt_0vir)
thread1526 = threading.Thread(target=decrypt_0pp)
thread1527 = threading.Thread(target=decrypt_0tp)
thread1528 = threading.Thread(target=decrypt_0less)
thread1529 = threading.Thread(target=decrypt_0more)
thread1530 = threading.Thread(target=decrypt_0aro)
thread1531 = threading.Thread(target=decrypt_0croc)
thread1532 = threading.Thread(target=decrypt_0bsl)
thread1533 = threading.Thread(target=decrypt_0circ)
thread1534 = threading.Thread(target=decrypt_0esp)
thread1535 = threading.Thread(target=decrypt_0cr)
thread1536 = threading.Thread(target=decrypt_0hl)
thread1537 = threading.Thread(target=decrypt_0tild)
thread1538 = threading.Thread(target=decrypt_2a)
thread1539 = threading.Thread(target=decrypt_2b)
thread1540 = threading.Thread(target=decrypt_2d)
thread1541 = threading.Thread(target=decrypt_2f)
thread1542 = threading.Thread(target=decrypt_2h)
thread1543 = threading.Thread(target=decrypt_2j)
thread1544 = threading.Thread(target=decrypt_2l)
thread1545 = threading.Thread(target=decrypt_2n)
thread1546 = threading.Thread(target=decrypt_2p)
thread1547 = threading.Thread(target=decrypt_2r)
thread1548 = threading.Thread(target=decrypt_2t)
thread1549 = threading.Thread(target=decrypt_2v)
thread1550 = threading.Thread(target=decrypt_2x)
thread1551 = threading.Thread(target=decrypt_2z)
thread1552 = threading.Thread(target=decrypt_2A)
thread1553 = threading.Thread(target=decrypt_2B)
thread1554 = threading.Thread(target=decrypt_2D)
thread1555 = threading.Thread(target=decrypt_2F)
thread1556 = threading.Thread(target=decrypt_2H)
thread1557 = threading.Thread(target=decrypt_2J)
thread1558 = threading.Thread(target=decrypt_2L)
thread1559 = threading.Thread(target=decrypt_2N)
thread1560 = threading.Thread(target=decrypt_2P)
thread1561 = threading.Thread(target=decrypt_2R)
thread1562 = threading.Thread(target=decrypt_2T)
thread1563 = threading.Thread(target=decrypt_2V)
thread1564 = threading.Thread(target=decrypt_2X)
thread1565 = threading.Thread(target=decrypt_2Z)
thread1566 = threading.Thread(target=decrypt_20)
thread1567 = threading.Thread(target=decrypt_22)
thread1568 = threading.Thread(target=decrypt_24)
thread1569 = threading.Thread(target=decrypt_26)
thread1570 = threading.Thread(target=decrypt_28)
thread1571 = threading.Thread(target=decrypt_2excl)
thread1572 = threading.Thread(target=decrypt_2dquote)
thread1573 = threading.Thread(target=decrypt_2doll)
thread1574 = threading.Thread(target=decrypt_2and)
thread1575 = threading.Thread(target=decrypt_2quote)
thread1576 = threading.Thread(target=decrypt_2par)
thread1577 = threading.Thread(target=decrypt_2ast)
thread1578 = threading.Thread(target=decrypt_2vir)
thread1579 = threading.Thread(target=decrypt_2pp)
thread1580 = threading.Thread(target=decrypt_2tp)
thread1581 = threading.Thread(target=decrypt_2less)
thread1582 = threading.Thread(target=decrypt_2more)
thread1583 = threading.Thread(target=decrypt_2aro)
thread1584 = threading.Thread(target=decrypt_2croc)
thread1585 = threading.Thread(target=decrypt_2bsl)
thread1586 = threading.Thread(target=decrypt_2circ)
thread1587 = threading.Thread(target=decrypt_2esp)
thread1588 = threading.Thread(target=decrypt_2cr)
thread1589 = threading.Thread(target=decrypt_2hl)
thread1590 = threading.Thread(target=decrypt_2tild)
thread1591 = threading.Thread(target=decrypt_4a)
thread1592 = threading.Thread(target=decrypt_4b)
thread1593 = threading.Thread(target=decrypt_4d)
thread1594 = threading.Thread(target=decrypt_4f)
thread1595 = threading.Thread(target=decrypt_4h)
thread1596 = threading.Thread(target=decrypt_4j)
thread1597 = threading.Thread(target=decrypt_4l)
thread1598 = threading.Thread(target=decrypt_4n)
thread1599 = threading.Thread(target=decrypt_4p)
thread1600 = threading.Thread(target=decrypt_4r)
thread1601 = threading.Thread(target=decrypt_4t)
thread1602 = threading.Thread(target=decrypt_4v)
thread1603 = threading.Thread(target=decrypt_4x)
thread1604 = threading.Thread(target=decrypt_4z)
thread1605 = threading.Thread(target=decrypt_4A)
thread1606 = threading.Thread(target=decrypt_4B)
thread1607 = threading.Thread(target=decrypt_4D)
thread1608 = threading.Thread(target=decrypt_4F)
thread1609 = threading.Thread(target=decrypt_4H)
thread1610 = threading.Thread(target=decrypt_4J)
thread1611 = threading.Thread(target=decrypt_4L)
thread1612 = threading.Thread(target=decrypt_4N)
thread1613 = threading.Thread(target=decrypt_4P)
thread1614 = threading.Thread(target=decrypt_4R)
thread1615 = threading.Thread(target=decrypt_4T)
thread1616 = threading.Thread(target=decrypt_4V)
thread1617 = threading.Thread(target=decrypt_4X)
thread1618 = threading.Thread(target=decrypt_4Z)
thread1619 = threading.Thread(target=decrypt_40)
thread1620 = threading.Thread(target=decrypt_42)
thread1621 = threading.Thread(target=decrypt_44)
thread1622 = threading.Thread(target=decrypt_46)
thread1623 = threading.Thread(target=decrypt_48)
thread1624 = threading.Thread(target=decrypt_4excl)
thread1625 = threading.Thread(target=decrypt_4dquote)
thread1626 = threading.Thread(target=decrypt_4doll)
thread1627 = threading.Thread(target=decrypt_4and)
thread1628 = threading.Thread(target=decrypt_4quote)
thread1629 = threading.Thread(target=decrypt_4par)
thread1630 = threading.Thread(target=decrypt_4ast)
thread1631 = threading.Thread(target=decrypt_4vir)
thread1632 = threading.Thread(target=decrypt_4pp)
thread1633 = threading.Thread(target=decrypt_4tp)
thread1634 = threading.Thread(target=decrypt_4less)
thread1635 = threading.Thread(target=decrypt_4more)
thread1636 = threading.Thread(target=decrypt_4aro)
thread1637 = threading.Thread(target=decrypt_4croc)
thread1638 = threading.Thread(target=decrypt_4bsl)
thread1639 = threading.Thread(target=decrypt_4circ)
thread1640 = threading.Thread(target=decrypt_4esp)
thread1641 = threading.Thread(target=decrypt_4cr)
thread1642 = threading.Thread(target=decrypt_4hl)
thread1643 = threading.Thread(target=decrypt_4tild)
thread1644 = threading.Thread(target=decrypt_6a)
thread1645 = threading.Thread(target=decrypt_6b)
thread1646 = threading.Thread(target=decrypt_6d)
thread1647 = threading.Thread(target=decrypt_6f)
thread1648 = threading.Thread(target=decrypt_6h)
thread1649 = threading.Thread(target=decrypt_6j)
thread1650 = threading.Thread(target=decrypt_6l)
thread1651 = threading.Thread(target=decrypt_6n)
thread1652 = threading.Thread(target=decrypt_6p)
thread1653 = threading.Thread(target=decrypt_6r)
thread1654 = threading.Thread(target=decrypt_6t)
thread1655 = threading.Thread(target=decrypt_6v)
thread1656 = threading.Thread(target=decrypt_6x)
thread1657 = threading.Thread(target=decrypt_6z)
thread1658 = threading.Thread(target=decrypt_6A)
thread1659 = threading.Thread(target=decrypt_6B)
thread1660 = threading.Thread(target=decrypt_6D)
thread1661 = threading.Thread(target=decrypt_6F)
thread1662 = threading.Thread(target=decrypt_6H)
thread1663 = threading.Thread(target=decrypt_6J)
thread1664 = threading.Thread(target=decrypt_6L)
thread1665 = threading.Thread(target=decrypt_6N)
thread1666 = threading.Thread(target=decrypt_6P)
thread1667 = threading.Thread(target=decrypt_6R)
thread1668 = threading.Thread(target=decrypt_6T)
thread1669 = threading.Thread(target=decrypt_6V)
thread1670 = threading.Thread(target=decrypt_6X)
thread1671 = threading.Thread(target=decrypt_6Z)
thread1672 = threading.Thread(target=decrypt_60)
thread1673 = threading.Thread(target=decrypt_62)
thread1674 = threading.Thread(target=decrypt_64)
thread1675 = threading.Thread(target=decrypt_66)
thread1676 = threading.Thread(target=decrypt_68)
thread1677 = threading.Thread(target=decrypt_6excl)
thread1678 = threading.Thread(target=decrypt_6dquote)
thread1679 = threading.Thread(target=decrypt_6doll)
thread1680 = threading.Thread(target=decrypt_6and)
thread1681 = threading.Thread(target=decrypt_6quote)
thread1682 = threading.Thread(target=decrypt_6par)
thread1683 = threading.Thread(target=decrypt_6ast)
thread1684 = threading.Thread(target=decrypt_6vir)
thread1685 = threading.Thread(target=decrypt_6pp)
thread1686 = threading.Thread(target=decrypt_6tp)
thread1687 = threading.Thread(target=decrypt_6less)
thread1688 = threading.Thread(target=decrypt_6more)
thread1689 = threading.Thread(target=decrypt_6aro)
thread1690 = threading.Thread(target=decrypt_6croc)
thread1691 = threading.Thread(target=decrypt_6bsl)
thread1692 = threading.Thread(target=decrypt_6circ)
thread1693 = threading.Thread(target=decrypt_6esp)
thread1694 = threading.Thread(target=decrypt_6cr)
thread1695 = threading.Thread(target=decrypt_6hl)
thread1696 = threading.Thread(target=decrypt_6tild)
thread1697 = threading.Thread(target=decrypt_8a)
thread1698 = threading.Thread(target=decrypt_8b)
thread1699 = threading.Thread(target=decrypt_8d)
thread1700 = threading.Thread(target=decrypt_8f)
thread1701 = threading.Thread(target=decrypt_8h)
thread1702 = threading.Thread(target=decrypt_8j)
thread1703 = threading.Thread(target=decrypt_8l)
thread1704 = threading.Thread(target=decrypt_8n)
thread1705 = threading.Thread(target=decrypt_8p)
thread1706 = threading.Thread(target=decrypt_8r)
thread1707 = threading.Thread(target=decrypt_8t)
thread1708 = threading.Thread(target=decrypt_8v)
thread1709 = threading.Thread(target=decrypt_8x)
thread1710 = threading.Thread(target=decrypt_8z)
thread1711 = threading.Thread(target=decrypt_8A)
thread1712 = threading.Thread(target=decrypt_8B)
thread1713 = threading.Thread(target=decrypt_8D)
thread1714 = threading.Thread(target=decrypt_8F)
thread1715 = threading.Thread(target=decrypt_8H)
thread1716 = threading.Thread(target=decrypt_8J)
thread1717 = threading.Thread(target=decrypt_8L)
thread1718 = threading.Thread(target=decrypt_8N)
thread1719 = threading.Thread(target=decrypt_8P)
thread1720 = threading.Thread(target=decrypt_8R)
thread1721 = threading.Thread(target=decrypt_8T)
thread1722 = threading.Thread(target=decrypt_8V)
thread1723 = threading.Thread(target=decrypt_8X)
thread1724 = threading.Thread(target=decrypt_8Z)
thread1725 = threading.Thread(target=decrypt_80)
thread1726 = threading.Thread(target=decrypt_82)
thread1727 = threading.Thread(target=decrypt_84)
thread1728 = threading.Thread(target=decrypt_86)
thread1729 = threading.Thread(target=decrypt_88)
thread1730 = threading.Thread(target=decrypt_8excl)
thread1731 = threading.Thread(target=decrypt_8dquote)
thread1732 = threading.Thread(target=decrypt_8doll)
thread1733 = threading.Thread(target=decrypt_8and)
thread1734 = threading.Thread(target=decrypt_8quote)
thread1735 = threading.Thread(target=decrypt_8par)
thread1736 = threading.Thread(target=decrypt_8ast)
thread1737 = threading.Thread(target=decrypt_8vir)
thread1738 = threading.Thread(target=decrypt_8pp)
thread1739 = threading.Thread(target=decrypt_8tp)
thread1740 = threading.Thread(target=decrypt_8less)
thread1741 = threading.Thread(target=decrypt_8more)
thread1742 = threading.Thread(target=decrypt_8aro)
thread1743 = threading.Thread(target=decrypt_8croc)
thread1744 = threading.Thread(target=decrypt_8bsl)
thread1745 = threading.Thread(target=decrypt_8circ)
thread1746 = threading.Thread(target=decrypt_8esp)
thread1747 = threading.Thread(target=decrypt_8cr)
thread1748 = threading.Thread(target=decrypt_8hl)
thread1749 = threading.Thread(target=decrypt_8tild)
thread1750 = threading.Thread(target=decrypt_excla)
thread1751 = threading.Thread(target=decrypt_exclb)
thread1752 = threading.Thread(target=decrypt_excld)
thread1753 = threading.Thread(target=decrypt_exclf)
thread1754 = threading.Thread(target=decrypt_exclh)
thread1755 = threading.Thread(target=decrypt_exclj)
thread1756 = threading.Thread(target=decrypt_excll)
thread1757 = threading.Thread(target=decrypt_excln)
thread1758 = threading.Thread(target=decrypt_exclp)
thread1759 = threading.Thread(target=decrypt_exclr)
thread1760 = threading.Thread(target=decrypt_exclt)
thread1761 = threading.Thread(target=decrypt_exclv)
thread1762 = threading.Thread(target=decrypt_exclx)
thread1763 = threading.Thread(target=decrypt_exclz)
thread1764 = threading.Thread(target=decrypt_exclA)
thread1765 = threading.Thread(target=decrypt_exclB)
thread1766 = threading.Thread(target=decrypt_exclD)
thread1767 = threading.Thread(target=decrypt_exclF)
thread1768 = threading.Thread(target=decrypt_exclH)
thread1769 = threading.Thread(target=decrypt_exclJ)
thread1770 = threading.Thread(target=decrypt_exclL)
thread1771 = threading.Thread(target=decrypt_exclN)
thread1772 = threading.Thread(target=decrypt_exclP)
thread1773 = threading.Thread(target=decrypt_exclR)
thread1774 = threading.Thread(target=decrypt_exclT)
thread1775 = threading.Thread(target=decrypt_exclV)
thread1776 = threading.Thread(target=decrypt_exclX)
thread1777 = threading.Thread(target=decrypt_exclZ)
thread1778 = threading.Thread(target=decrypt_excl0)
thread1779 = threading.Thread(target=decrypt_excl2)
thread1780 = threading.Thread(target=decrypt_excl4)
thread1781 = threading.Thread(target=decrypt_excl6)
thread1782 = threading.Thread(target=decrypt_excl8)
thread1783 = threading.Thread(target=decrypt_exclexcl)
thread1784 = threading.Thread(target=decrypt_excldquote)
thread1785 = threading.Thread(target=decrypt_excldoll)
thread1786 = threading.Thread(target=decrypt_excland)
thread1787 = threading.Thread(target=decrypt_exclquote)
thread1788 = threading.Thread(target=decrypt_exclpar)
thread1789 = threading.Thread(target=decrypt_exclast)
thread1790 = threading.Thread(target=decrypt_exclvir)
thread1791 = threading.Thread(target=decrypt_exclpp)
thread1792 = threading.Thread(target=decrypt_excltp)
thread1793 = threading.Thread(target=decrypt_exclless)
thread1794 = threading.Thread(target=decrypt_exclmore)
thread1795 = threading.Thread(target=decrypt_exclaro)
thread1796 = threading.Thread(target=decrypt_exclcroc)
thread1797 = threading.Thread(target=decrypt_exclbsl)
thread1798 = threading.Thread(target=decrypt_exclcirc)
thread1799 = threading.Thread(target=decrypt_exclesp)
thread1800 = threading.Thread(target=decrypt_exclcr)
thread1801 = threading.Thread(target=decrypt_exclhl)
thread1802 = threading.Thread(target=decrypt_excltild)
thread1803 = threading.Thread(target=decrypt_doubquota)
thread1804 = threading.Thread(target=decrypt_doubquotb)
thread1805 = threading.Thread(target=decrypt_doubquotd)
thread1806 = threading.Thread(target=decrypt_doubquotf)
thread1807 = threading.Thread(target=decrypt_doubquoth)
thread1808 = threading.Thread(target=decrypt_doubquotj)
thread1809 = threading.Thread(target=decrypt_doubquotl)
thread1810 = threading.Thread(target=decrypt_doubquotn)
thread1811 = threading.Thread(target=decrypt_doubquotp)
thread1812 = threading.Thread(target=decrypt_doubquotr)
thread1813 = threading.Thread(target=decrypt_doubquott)
thread1814 = threading.Thread(target=decrypt_doubquotv)
thread1815 = threading.Thread(target=decrypt_doubquotx)
thread1816 = threading.Thread(target=decrypt_doubquotz)
thread1817 = threading.Thread(target=decrypt_doubquotA)
thread1818 = threading.Thread(target=decrypt_doubquotB)
thread1819 = threading.Thread(target=decrypt_doubquotD)
thread1820 = threading.Thread(target=decrypt_doubquotF)
thread1821 = threading.Thread(target=decrypt_doubquotH)
thread1822 = threading.Thread(target=decrypt_doubquotJ)
thread1823 = threading.Thread(target=decrypt_doubquotL)
thread1824 = threading.Thread(target=decrypt_doubquotN)
thread1825 = threading.Thread(target=decrypt_doubquotP)
thread1826 = threading.Thread(target=decrypt_doubquotR)
thread1827 = threading.Thread(target=decrypt_doubquotT)
thread1828 = threading.Thread(target=decrypt_doubquotV)
thread1829 = threading.Thread(target=decrypt_doubquotX)
thread1830 = threading.Thread(target=decrypt_doubquotZ)
thread1831 = threading.Thread(target=decrypt_doubquot0)
thread1832 = threading.Thread(target=decrypt_doubquot2)
thread1833 = threading.Thread(target=decrypt_doubquot4)
thread1834 = threading.Thread(target=decrypt_doubquot6)
thread1835 = threading.Thread(target=decrypt_doubquot8)
thread1836 = threading.Thread(target=decrypt_doubquotexcl)
thread1837 = threading.Thread(target=decrypt_doubquotdquote)
thread1838 = threading.Thread(target=decrypt_doubquotdoll)
thread1839 = threading.Thread(target=decrypt_doubquotand)
thread1840 = threading.Thread(target=decrypt_doubquotquote)
thread1841 = threading.Thread(target=decrypt_doubquotpar)
thread1842 = threading.Thread(target=decrypt_doubquotast)
thread1843 = threading.Thread(target=decrypt_doubquotvir)
thread1844 = threading.Thread(target=decrypt_doubquotpp)
thread1845 = threading.Thread(target=decrypt_doubquottp)
thread1846 = threading.Thread(target=decrypt_doubquotless)
thread1847 = threading.Thread(target=decrypt_doubquotmore)
thread1848 = threading.Thread(target=decrypt_doubquotaro)
thread1849 = threading.Thread(target=decrypt_doubquotcroc)
thread1850 = threading.Thread(target=decrypt_doubquotbsl)
thread1851 = threading.Thread(target=decrypt_doubquotcirc)
thread1852 = threading.Thread(target=decrypt_doubquotesp)
thread1853 = threading.Thread(target=decrypt_doubquotcr)
thread1854 = threading.Thread(target=decrypt_doubquothl)
thread1855 = threading.Thread(target=decrypt_doubquottild)
thread1856 = threading.Thread(target=decrypt_dolla)
thread1857 = threading.Thread(target=decrypt_dollb)
thread1858 = threading.Thread(target=decrypt_dolld)
thread1859 = threading.Thread(target=decrypt_dollf)
thread1860 = threading.Thread(target=decrypt_dollh)
thread1861 = threading.Thread(target=decrypt_dollj)
thread1862 = threading.Thread(target=decrypt_dolll)
thread1863 = threading.Thread(target=decrypt_dolln)
thread1864 = threading.Thread(target=decrypt_dollp)
thread1865 = threading.Thread(target=decrypt_dollr)
thread1866 = threading.Thread(target=decrypt_dollt)
thread1867 = threading.Thread(target=decrypt_dollv)
thread1868 = threading.Thread(target=decrypt_dollx)
thread1869 = threading.Thread(target=decrypt_dollz)
thread1870 = threading.Thread(target=decrypt_dollA)
thread1871 = threading.Thread(target=decrypt_dollB)
thread1872 = threading.Thread(target=decrypt_dollD)
thread1873 = threading.Thread(target=decrypt_dollF)
thread1874 = threading.Thread(target=decrypt_dollH)
thread1875 = threading.Thread(target=decrypt_dollJ)
thread1876 = threading.Thread(target=decrypt_dollL)
thread1877 = threading.Thread(target=decrypt_dollN)
thread1878 = threading.Thread(target=decrypt_dollP)
thread1879 = threading.Thread(target=decrypt_dollR)
thread1880 = threading.Thread(target=decrypt_dollT)
thread1881 = threading.Thread(target=decrypt_dollV)
thread1882 = threading.Thread(target=decrypt_dollX)
thread1883 = threading.Thread(target=decrypt_dollZ)
thread1884 = threading.Thread(target=decrypt_doll0)
thread1885 = threading.Thread(target=decrypt_doll2)
thread1886 = threading.Thread(target=decrypt_doll4)
thread1887 = threading.Thread(target=decrypt_doll6)
thread1888 = threading.Thread(target=decrypt_doll8)
thread1889 = threading.Thread(target=decrypt_dollexcl)
thread1890 = threading.Thread(target=decrypt_dolldquote)
thread1891 = threading.Thread(target=decrypt_dolldoll)
thread1892 = threading.Thread(target=decrypt_dolland)
thread1893 = threading.Thread(target=decrypt_dollquote)
thread1894 = threading.Thread(target=decrypt_dollpar)
thread1895 = threading.Thread(target=decrypt_dollast)
thread1896 = threading.Thread(target=decrypt_dollvir)
thread1897 = threading.Thread(target=decrypt_dollpp)
thread1898 = threading.Thread(target=decrypt_dolltp)
thread1899 = threading.Thread(target=decrypt_dollless)
thread1900 = threading.Thread(target=decrypt_dollmore)
thread1901 = threading.Thread(target=decrypt_dollaro)
thread1902 = threading.Thread(target=decrypt_dollcroc)
thread1903 = threading.Thread(target=decrypt_dollbsl)
thread1904 = threading.Thread(target=decrypt_dollcirc)
thread1905 = threading.Thread(target=decrypt_dollesp)
thread1906 = threading.Thread(target=decrypt_dollcr)
thread1907 = threading.Thread(target=decrypt_dollhl)
thread1908 = threading.Thread(target=decrypt_dolltild)
thread1909 = threading.Thread(target=decrypt_quota)
thread1910 = threading.Thread(target=decrypt_quotb)
thread1911 = threading.Thread(target=decrypt_quotd)
thread1912 = threading.Thread(target=decrypt_quotf)
thread1913 = threading.Thread(target=decrypt_quoth)
thread1914 = threading.Thread(target=decrypt_quotj)
thread1915 = threading.Thread(target=decrypt_quotl)
thread1916 = threading.Thread(target=decrypt_quotn)
thread1917 = threading.Thread(target=decrypt_quotp)
thread1918 = threading.Thread(target=decrypt_quotr)
thread1919 = threading.Thread(target=decrypt_quott)
thread1920 = threading.Thread(target=decrypt_quotv)
thread1921 = threading.Thread(target=decrypt_quotx)
thread1922 = threading.Thread(target=decrypt_quotz)
thread1923 = threading.Thread(target=decrypt_quotA)
thread1924 = threading.Thread(target=decrypt_quotB)
thread1925 = threading.Thread(target=decrypt_quotD)
thread1926 = threading.Thread(target=decrypt_quotF)
thread1927 = threading.Thread(target=decrypt_quotH)
thread1928 = threading.Thread(target=decrypt_quotJ)
thread1929 = threading.Thread(target=decrypt_quotL)
thread1930 = threading.Thread(target=decrypt_quotN)
thread1931 = threading.Thread(target=decrypt_quotP)
thread1932 = threading.Thread(target=decrypt_quotR)
thread1933 = threading.Thread(target=decrypt_quotT)
thread1934 = threading.Thread(target=decrypt_quotV)
thread1935 = threading.Thread(target=decrypt_quotX)
thread1936 = threading.Thread(target=decrypt_quotZ)
thread1937 = threading.Thread(target=decrypt_quot0)
thread1938 = threading.Thread(target=decrypt_quot2)
thread1939 = threading.Thread(target=decrypt_quot4)
thread1940 = threading.Thread(target=decrypt_quot6)
thread1941 = threading.Thread(target=decrypt_quot8)
thread1942 = threading.Thread(target=decrypt_quotexcl)
thread1943 = threading.Thread(target=decrypt_quotdquote)
thread1944 = threading.Thread(target=decrypt_quotdoll)
thread1945 = threading.Thread(target=decrypt_quotand)
thread1946 = threading.Thread(target=decrypt_quotquote)
thread1947 = threading.Thread(target=decrypt_quotpar)
thread1948 = threading.Thread(target=decrypt_quotast)
thread1949 = threading.Thread(target=decrypt_quotvir)
thread1950 = threading.Thread(target=decrypt_quotpp)
thread1951 = threading.Thread(target=decrypt_quottp)
thread1952 = threading.Thread(target=decrypt_quotless)
thread1953 = threading.Thread(target=decrypt_quotmore)
thread1954 = threading.Thread(target=decrypt_quotaro)
thread1955 = threading.Thread(target=decrypt_quotcroc)
thread1956 = threading.Thread(target=decrypt_quotbsl)
thread1957 = threading.Thread(target=decrypt_quotcirc)
thread1958 = threading.Thread(target=decrypt_quotesp)
thread1959 = threading.Thread(target=decrypt_quotcr)
thread1960 = threading.Thread(target=decrypt_quothl)
thread1961 = threading.Thread(target=decrypt_quottild)
thread1962 = threading.Thread(target=decrypt_parena)
thread1963 = threading.Thread(target=decrypt_parenb)
thread1964 = threading.Thread(target=decrypt_parend)
thread1965 = threading.Thread(target=decrypt_parenf)
thread1966 = threading.Thread(target=decrypt_parenh)
thread1967 = threading.Thread(target=decrypt_parenj)
thread1968 = threading.Thread(target=decrypt_parenl)
thread1969 = threading.Thread(target=decrypt_parenn)
thread1970 = threading.Thread(target=decrypt_parenp)
thread1971 = threading.Thread(target=decrypt_parenr)
thread1972 = threading.Thread(target=decrypt_parent)
thread1973 = threading.Thread(target=decrypt_parenv)
thread1974 = threading.Thread(target=decrypt_parenx)
thread1975 = threading.Thread(target=decrypt_parenz)
thread1976 = threading.Thread(target=decrypt_parenA)
thread1977 = threading.Thread(target=decrypt_parenB)
thread1978 = threading.Thread(target=decrypt_parenD)
thread1979 = threading.Thread(target=decrypt_parenF)
thread1980 = threading.Thread(target=decrypt_parenH)
thread1981 = threading.Thread(target=decrypt_parenJ)
thread1982 = threading.Thread(target=decrypt_parenL)
thread1983 = threading.Thread(target=decrypt_parenN)
thread1984 = threading.Thread(target=decrypt_parenP)
thread1985 = threading.Thread(target=decrypt_parenR)
thread1986 = threading.Thread(target=decrypt_parenT)
thread1987 = threading.Thread(target=decrypt_parenV)
thread1988 = threading.Thread(target=decrypt_parenX)
thread1989 = threading.Thread(target=decrypt_parenZ)
thread1990 = threading.Thread(target=decrypt_paren0)
thread1991 = threading.Thread(target=decrypt_paren2)
thread1992 = threading.Thread(target=decrypt_paren4)
thread1993 = threading.Thread(target=decrypt_paren6)
thread1994 = threading.Thread(target=decrypt_paren8)
thread1995 = threading.Thread(target=decrypt_parenexcl)
thread1996 = threading.Thread(target=decrypt_parendquote)
thread1997 = threading.Thread(target=decrypt_parendoll)
thread1998 = threading.Thread(target=decrypt_parenand)
thread1999 = threading.Thread(target=decrypt_parenquote)
thread2000 = threading.Thread(target=decrypt_parpara)
thread2001 = threading.Thread(target=decrypt_parenast)
thread2002 = threading.Thread(target=decrypt_parenvir)
thread2003 = threading.Thread(target=decrypt_parenpp)
thread2004 = threading.Thread(target=decrypt_parentp)
thread2005 = threading.Thread(target=decrypt_parenless)
thread2006 = threading.Thread(target=decrypt_parenmore)
thread2007 = threading.Thread(target=decrypt_parenaro)
thread2008 = threading.Thread(target=decrypt_parencroc)
thread2009 = threading.Thread(target=decrypt_parenbsl)
thread2010 = threading.Thread(target=decrypt_parencirc)
thread2011 = threading.Thread(target=decrypt_parenesp)
thread2012 = threading.Thread(target=decrypt_parencr)
thread2013 = threading.Thread(target=decrypt_parenhl)
thread2014 = threading.Thread(target=decrypt_parentild)
thread2015 = threading.Thread(target=decrypt_espea)
thread2016 = threading.Thread(target=decrypt_espeb)
thread2017 = threading.Thread(target=decrypt_esped)
thread2018 = threading.Thread(target=decrypt_espef)
thread2019 = threading.Thread(target=decrypt_espeh)
thread2020 = threading.Thread(target=decrypt_espej)
thread2021 = threading.Thread(target=decrypt_espel)
thread2022 = threading.Thread(target=decrypt_espen)
thread2023 = threading.Thread(target=decrypt_espep)
thread2024 = threading.Thread(target=decrypt_esper)
thread2025 = threading.Thread(target=decrypt_espet)
thread2026 = threading.Thread(target=decrypt_espev)
thread2027 = threading.Thread(target=decrypt_espex)
thread2028 = threading.Thread(target=decrypt_espez)
thread2029 = threading.Thread(target=decrypt_espeA)
thread2030 = threading.Thread(target=decrypt_espeB)
thread2031 = threading.Thread(target=decrypt_espeD)
thread2032 = threading.Thread(target=decrypt_espeF)
thread2033 = threading.Thread(target=decrypt_espeH)
thread2034 = threading.Thread(target=decrypt_espeJ)
thread2035 = threading.Thread(target=decrypt_espeL)
thread2036 = threading.Thread(target=decrypt_espeN)
thread2037 = threading.Thread(target=decrypt_espeP)
thread2038 = threading.Thread(target=decrypt_espeR)
thread2039 = threading.Thread(target=decrypt_espeT)
thread2040 = threading.Thread(target=decrypt_espeV)
thread2041 = threading.Thread(target=decrypt_espeX)
thread2042 = threading.Thread(target=decrypt_espeZ)
thread2043 = threading.Thread(target=decrypt_espe0)
thread2044 = threading.Thread(target=decrypt_espe2)
thread2045 = threading.Thread(target=decrypt_espe4)
thread2046 = threading.Thread(target=decrypt_espe6)
thread2047 = threading.Thread(target=decrypt_espe8)
thread2048 = threading.Thread(target=decrypt_espeexcl)
thread2049 = threading.Thread(target=decrypt_espedquote)
thread2050 = threading.Thread(target=decrypt_espedoll)
thread2051 = threading.Thread(target=decrypt_espeand)
thread2052 = threading.Thread(target=decrypt_espequote)
thread2053 = threading.Thread(target=decrypt_astpar)
thread2054 = threading.Thread(target=decrypt_espeast)
thread2055 = threading.Thread(target=decrypt_espevir)
thread2056 = threading.Thread(target=decrypt_espepp)
thread2057 = threading.Thread(target=decrypt_espetp)
thread2058 = threading.Thread(target=decrypt_espeless)
thread2059 = threading.Thread(target=decrypt_espemore)
thread2060 = threading.Thread(target=decrypt_espearo)
thread2061 = threading.Thread(target=decrypt_especroc)
thread2062 = threading.Thread(target=decrypt_espebsl)
thread2063 = threading.Thread(target=decrypt_especirc)
thread2064 = threading.Thread(target=decrypt_espeesp)
thread2065 = threading.Thread(target=decrypt_especr)
thread2066 = threading.Thread(target=decrypt_espehl)
thread2067 = threading.Thread(target=decrypt_espetild)
thread2068 = threading.Thread(target=decrypt_vira)
thread2069 = threading.Thread(target=decrypt_virb)
thread2070 = threading.Thread(target=decrypt_vird)
thread2071 = threading.Thread(target=decrypt_virf)
thread2072 = threading.Thread(target=decrypt_virh)
thread2073 = threading.Thread(target=decrypt_virj)
thread2074 = threading.Thread(target=decrypt_virl)
thread2075 = threading.Thread(target=decrypt_virn)
thread2076 = threading.Thread(target=decrypt_virp)
thread2077 = threading.Thread(target=decrypt_virr)
thread2078 = threading.Thread(target=decrypt_virt)
thread2079 = threading.Thread(target=decrypt_virv)
thread2080 = threading.Thread(target=decrypt_virx)
thread2081 = threading.Thread(target=decrypt_virz)
thread2082 = threading.Thread(target=decrypt_virA)
thread2083 = threading.Thread(target=decrypt_virB)
thread2084 = threading.Thread(target=decrypt_virD)
thread2085 = threading.Thread(target=decrypt_virF)
thread2086 = threading.Thread(target=decrypt_virH)
thread2087 = threading.Thread(target=decrypt_virJ)
thread2088 = threading.Thread(target=decrypt_virL)
thread2089 = threading.Thread(target=decrypt_virN)
thread2090 = threading.Thread(target=decrypt_virP)
thread2091 = threading.Thread(target=decrypt_virR)
thread2092 = threading.Thread(target=decrypt_virT)
thread2093 = threading.Thread(target=decrypt_virV)
thread2094 = threading.Thread(target=decrypt_virX)
thread2095 = threading.Thread(target=decrypt_virZ)
thread2096 = threading.Thread(target=decrypt_vir0)
thread2097 = threading.Thread(target=decrypt_vir2)
thread2098 = threading.Thread(target=decrypt_vir4)
thread2099 = threading.Thread(target=decrypt_vir6)
thread2100 = threading.Thread(target=decrypt_vir8)
thread2101 = threading.Thread(target=decrypt_virexcl)
thread2102 = threading.Thread(target=decrypt_virdquote)
thread2103 = threading.Thread(target=decrypt_virdoll)
thread2104 = threading.Thread(target=decrypt_virand)
thread2105 = threading.Thread(target=decrypt_virquote)
thread2106 = threading.Thread(target=decrypt_virpar)
thread2107 = threading.Thread(target=decrypt_virast)
thread2108 = threading.Thread(target=decrypt_virvir)
thread2109 = threading.Thread(target=decrypt_virpp)
thread2110 = threading.Thread(target=decrypt_virtp)
thread2111 = threading.Thread(target=decrypt_virless)
thread2112 = threading.Thread(target=decrypt_virmore)
thread2113 = threading.Thread(target=decrypt_viraro)
thread2114 = threading.Thread(target=decrypt_vircroc)
thread2115 = threading.Thread(target=decrypt_virbsl)
thread2116 = threading.Thread(target=decrypt_vircirc)
thread2117 = threading.Thread(target=decrypt_viresp)
thread2118 = threading.Thread(target=decrypt_vircr)
thread2119 = threading.Thread(target=decrypt_virhl)
thread2120 = threading.Thread(target=decrypt_virtild)
thread2121 = threading.Thread(target=decrypt_poina)
thread2122 = threading.Thread(target=decrypt_poinb)
thread2123 = threading.Thread(target=decrypt_poind)
thread2124 = threading.Thread(target=decrypt_poinf)
thread2125 = threading.Thread(target=decrypt_poinh)
thread2126 = threading.Thread(target=decrypt_poinj)
thread2127 = threading.Thread(target=decrypt_poinl)
thread2128 = threading.Thread(target=decrypt_poinn)
thread2129 = threading.Thread(target=decrypt_poinp)
thread2130 = threading.Thread(target=decrypt_poinr)
thread2131 = threading.Thread(target=decrypt_point)
thread2132 = threading.Thread(target=decrypt_poinv)
thread2133 = threading.Thread(target=decrypt_poinx)
thread2134 = threading.Thread(target=decrypt_poinz)
thread2135 = threading.Thread(target=decrypt_poinA)
thread2136 = threading.Thread(target=decrypt_poinB)
thread2137 = threading.Thread(target=decrypt_poinD)
thread2138 = threading.Thread(target=decrypt_poinF)
thread2139 = threading.Thread(target=decrypt_poinH)
thread2140 = threading.Thread(target=decrypt_poinJ)
thread2141 = threading.Thread(target=decrypt_poinL)
thread2142 = threading.Thread(target=decrypt_poinN)
thread2143 = threading.Thread(target=decrypt_poinP)
thread2144 = threading.Thread(target=decrypt_poinR)
thread2145 = threading.Thread(target=decrypt_poinT)
thread2146 = threading.Thread(target=decrypt_poinV)
thread2147 = threading.Thread(target=decrypt_poinX)
thread2148 = threading.Thread(target=decrypt_poinZ)
thread2149 = threading.Thread(target=decrypt_poin0)
thread2150 = threading.Thread(target=decrypt_poin2)
thread2151 = threading.Thread(target=decrypt_poin4)
thread2152 = threading.Thread(target=decrypt_poin6)
thread2153 = threading.Thread(target=decrypt_poin8)
thread2154 = threading.Thread(target=decrypt_poinexcl)
thread2155 = threading.Thread(target=decrypt_poindquote)
thread2156 = threading.Thread(target=decrypt_poindoll)
thread2157 = threading.Thread(target=decrypt_poinand)
thread2158 = threading.Thread(target=decrypt_poinquote)
thread2159 = threading.Thread(target=decrypt_pppar)
thread2160 = threading.Thread(target=decrypt_poinast)
thread2161 = threading.Thread(target=decrypt_poinvir)
thread2162 = threading.Thread(target=decrypt_poinpp)
thread2163 = threading.Thread(target=decrypt_pointp)
thread2164 = threading.Thread(target=decrypt_poinless)
thread2165 = threading.Thread(target=decrypt_poinmore)
thread2166 = threading.Thread(target=decrypt_poinaro)
thread2167 = threading.Thread(target=decrypt_poincroc)
thread2168 = threading.Thread(target=decrypt_poinbsl)
thread2169 = threading.Thread(target=decrypt_poincirc)
thread2170 = threading.Thread(target=decrypt_poinesp)
thread2171 = threading.Thread(target=decrypt_poincr)
thread2172 = threading.Thread(target=decrypt_poinhl)
thread2173 = threading.Thread(target=decrypt_pointild)
thread2174 = threading.Thread(target=decrypt_doubpoina)
thread2175 = threading.Thread(target=decrypt_doubpoinb)
thread2176 = threading.Thread(target=decrypt_doubpoind)
thread2177 = threading.Thread(target=decrypt_doubpoinf)
thread2178 = threading.Thread(target=decrypt_doubpoinh)
thread2179 = threading.Thread(target=decrypt_doubpoinj)
thread2180 = threading.Thread(target=decrypt_doubpoinl)
thread2181 = threading.Thread(target=decrypt_doubpoinn)
thread2182 = threading.Thread(target=decrypt_doubpoinp)
thread2183 = threading.Thread(target=decrypt_doubpoinr)
thread2184 = threading.Thread(target=decrypt_doubpoint)
thread2185 = threading.Thread(target=decrypt_doubpoinv)
thread2186 = threading.Thread(target=decrypt_doubpoinx)
thread2187 = threading.Thread(target=decrypt_doubpoinz)
thread2188 = threading.Thread(target=decrypt_doubpoinA)
thread2189 = threading.Thread(target=decrypt_doubpoinB)
thread2190 = threading.Thread(target=decrypt_doubpoinD)
thread2191 = threading.Thread(target=decrypt_doubpoinF)
thread2192 = threading.Thread(target=decrypt_doubpoinH)
thread2193 = threading.Thread(target=decrypt_doubpoinJ)
thread2194 = threading.Thread(target=decrypt_doubpoinL)
thread2195 = threading.Thread(target=decrypt_doubpoinN)
thread2196 = threading.Thread(target=decrypt_doubpoinP)
thread2197 = threading.Thread(target=decrypt_doubpoinR)
thread2198 = threading.Thread(target=decrypt_doubpoinT)
thread2199 = threading.Thread(target=decrypt_doubpoinV)
thread2200 = threading.Thread(target=decrypt_doubpoinX)
thread2201 = threading.Thread(target=decrypt_doubpoinZ)
thread2202 = threading.Thread(target=decrypt_doubpoin0)
thread2203 = threading.Thread(target=decrypt_doubpoin2)
thread2204 = threading.Thread(target=decrypt_doubpoin4)
thread2205 = threading.Thread(target=decrypt_doubpoin6)
thread2206 = threading.Thread(target=decrypt_doubpoin8)
thread2207 = threading.Thread(target=decrypt_doubpoinexcl)
thread2208 = threading.Thread(target=decrypt_doubpoindquote)
thread2209 = threading.Thread(target=decrypt_doubpoindoll)
thread2210 = threading.Thread(target=decrypt_doubpoinand)
thread2211 = threading.Thread(target=decrypt_doubpoinquote)
thread2212 = threading.Thread(target=decrypt_tppar)
thread2213 = threading.Thread(target=decrypt_doubpoinast)
thread2214 = threading.Thread(target=decrypt_doubpoinvir)
thread2215 = threading.Thread(target=decrypt_doubpoinpp)
thread2216 = threading.Thread(target=decrypt_doubpointp)
thread2217 = threading.Thread(target=decrypt_doubpoinless)
thread2218 = threading.Thread(target=decrypt_doubpoinmore)
thread2219 = threading.Thread(target=decrypt_doubpoinaro)
thread2220 = threading.Thread(target=decrypt_doubpoincroc)
thread2221 = threading.Thread(target=decrypt_doubpoinbsl)
thread2222 = threading.Thread(target=decrypt_doubpoincirc)
thread2223 = threading.Thread(target=decrypt_doubpoinesp)
thread2224 = threading.Thread(target=decrypt_doubpoincr)
thread2225 = threading.Thread(target=decrypt_doubpoinhl)
thread2226 = threading.Thread(target=decrypt_doubpointild)
thread2227 = threading.Thread(target=decrypt_lessa)
thread2228 = threading.Thread(target=decrypt_lessb)
thread2229 = threading.Thread(target=decrypt_lessd)
thread2230 = threading.Thread(target=decrypt_lessf)
thread2231 = threading.Thread(target=decrypt_lessh)
thread2232 = threading.Thread(target=decrypt_lessj)
thread2233 = threading.Thread(target=decrypt_lessl)
thread2234 = threading.Thread(target=decrypt_lessn)
thread2235 = threading.Thread(target=decrypt_lessp)
thread2236 = threading.Thread(target=decrypt_lessr)
thread2237 = threading.Thread(target=decrypt_lesst)
thread2238 = threading.Thread(target=decrypt_lessv)
thread2239 = threading.Thread(target=decrypt_lessx)
thread2240 = threading.Thread(target=decrypt_lessz)
thread2241 = threading.Thread(target=decrypt_lessA)
thread2242 = threading.Thread(target=decrypt_lessB)
thread2243 = threading.Thread(target=decrypt_lessD)
thread2244 = threading.Thread(target=decrypt_lessF)
thread2245 = threading.Thread(target=decrypt_lessH)
thread2246 = threading.Thread(target=decrypt_lessJ)
thread2247 = threading.Thread(target=decrypt_lessL)
thread2248 = threading.Thread(target=decrypt_lessN)
thread2249 = threading.Thread(target=decrypt_lessP)
thread2250 = threading.Thread(target=decrypt_lessR)
thread2251 = threading.Thread(target=decrypt_lessT)
thread2252 = threading.Thread(target=decrypt_lessV)
thread2253 = threading.Thread(target=decrypt_lessX)
thread2254 = threading.Thread(target=decrypt_lessZ)
thread2255 = threading.Thread(target=decrypt_less0)
thread2256 = threading.Thread(target=decrypt_less2)
thread2257 = threading.Thread(target=decrypt_less4)
thread2258 = threading.Thread(target=decrypt_less6)
thread2259 = threading.Thread(target=decrypt_less8)
thread2260 = threading.Thread(target=decrypt_lessexcl)
thread2261 = threading.Thread(target=decrypt_lessdquote)
thread2262 = threading.Thread(target=decrypt_lessdoll)
thread2263 = threading.Thread(target=decrypt_lessand)
thread2264 = threading.Thread(target=decrypt_lessquote)
thread2265 = threading.Thread(target=decrypt_morepar)
thread2266 = threading.Thread(target=decrypt_lessast)
thread2267 = threading.Thread(target=decrypt_lessvir)
thread2268 = threading.Thread(target=decrypt_lesspp)
thread2269 = threading.Thread(target=decrypt_lesstp)
thread2270 = threading.Thread(target=decrypt_lessless)
thread2271 = threading.Thread(target=decrypt_lessmore)
thread2272 = threading.Thread(target=decrypt_lessaro)
thread2273 = threading.Thread(target=decrypt_lesscroc)
thread2274 = threading.Thread(target=decrypt_lessbsl)
thread2275 = threading.Thread(target=decrypt_lesscirc)
thread2276 = threading.Thread(target=decrypt_lessesp)
thread2277 = threading.Thread(target=decrypt_lesscr)
thread2278 = threading.Thread(target=decrypt_lesshl)
thread2279 = threading.Thread(target=decrypt_lesstild)
thread2280 = threading.Thread(target=decrypt_morea)
thread2281 = threading.Thread(target=decrypt_moreb)
thread2282 = threading.Thread(target=decrypt_mored)
thread2283 = threading.Thread(target=decrypt_moref)
thread2284 = threading.Thread(target=decrypt_moreh)
thread2285 = threading.Thread(target=decrypt_morej)
thread2286 = threading.Thread(target=decrypt_morel)
thread2287 = threading.Thread(target=decrypt_moren)
thread2288 = threading.Thread(target=decrypt_morep)
thread2289 = threading.Thread(target=decrypt_morer)
thread2290 = threading.Thread(target=decrypt_moret)
thread2291 = threading.Thread(target=decrypt_morev)
thread2292 = threading.Thread(target=decrypt_morex)
thread2293 = threading.Thread(target=decrypt_morez)
thread2294 = threading.Thread(target=decrypt_moreA)
thread2295 = threading.Thread(target=decrypt_moreB)
thread2296 = threading.Thread(target=decrypt_moreD)
thread2297 = threading.Thread(target=decrypt_moreF)
thread2298 = threading.Thread(target=decrypt_moreH)
thread2299 = threading.Thread(target=decrypt_moreJ)
thread2300 = threading.Thread(target=decrypt_moreL)
thread2301 = threading.Thread(target=decrypt_moreN)
thread2302 = threading.Thread(target=decrypt_moreP)
thread2303 = threading.Thread(target=decrypt_moreR)
thread2304 = threading.Thread(target=decrypt_moreT)
thread2305 = threading.Thread(target=decrypt_moreV)
thread2306 = threading.Thread(target=decrypt_moreX)
thread2307 = threading.Thread(target=decrypt_moreZ)
thread2308 = threading.Thread(target=decrypt_more0)
thread2309 = threading.Thread(target=decrypt_more2)
thread2310 = threading.Thread(target=decrypt_more4)
thread2311 = threading.Thread(target=decrypt_more6)
thread2312 = threading.Thread(target=decrypt_more8)
thread2313 = threading.Thread(target=decrypt_moreexcl)
thread2314 = threading.Thread(target=decrypt_moredquote)
thread2315 = threading.Thread(target=decrypt_moredoll)
thread2316 = threading.Thread(target=decrypt_moreand)
thread2317 = threading.Thread(target=decrypt_morequote)
thread2318 = threading.Thread(target=decrypt_lesspar)
thread2319 = threading.Thread(target=decrypt_moreast)
thread2320 = threading.Thread(target=decrypt_morevir)
thread2321 = threading.Thread(target=decrypt_morepp)
thread2322 = threading.Thread(target=decrypt_moretp)
thread2323 = threading.Thread(target=decrypt_moreless)
thread2324 = threading.Thread(target=decrypt_moremore)
thread2325 = threading.Thread(target=decrypt_morearo)
thread2326 = threading.Thread(target=decrypt_morecroc)
thread2327 = threading.Thread(target=decrypt_morebsl)
thread2328 = threading.Thread(target=decrypt_morecirc)
thread2329 = threading.Thread(target=decrypt_moreesp)
thread2330 = threading.Thread(target=decrypt_morecr)
thread2331 = threading.Thread(target=decrypt_morehl)
thread2332 = threading.Thread(target=decrypt_moretild)
thread2333 = threading.Thread(target=decrypt_arobasa)
thread2334 = threading.Thread(target=decrypt_arobasb)
thread2335 = threading.Thread(target=decrypt_arobasd)
thread2336 = threading.Thread(target=decrypt_arobasf)
thread2337 = threading.Thread(target=decrypt_arobash)
thread2338 = threading.Thread(target=decrypt_arobasj)
thread2339 = threading.Thread(target=decrypt_arobasl)
thread2340 = threading.Thread(target=decrypt_arobasn)
thread2341 = threading.Thread(target=decrypt_arobasp)
thread2342 = threading.Thread(target=decrypt_arobasr)
thread2343 = threading.Thread(target=decrypt_arobast)
thread2344 = threading.Thread(target=decrypt_arobasv)
thread2345 = threading.Thread(target=decrypt_arobasx)
thread2346 = threading.Thread(target=decrypt_arobasz)
thread2347 = threading.Thread(target=decrypt_arobasA)
thread2348 = threading.Thread(target=decrypt_arobasB)
thread2349 = threading.Thread(target=decrypt_arobasD)
thread2350 = threading.Thread(target=decrypt_arobasF)
thread2351 = threading.Thread(target=decrypt_arobasH)
thread2352 = threading.Thread(target=decrypt_arobasJ)
thread2353 = threading.Thread(target=decrypt_arobasL)
thread2354 = threading.Thread(target=decrypt_arobasN)
thread2355 = threading.Thread(target=decrypt_arobasP)
thread2356 = threading.Thread(target=decrypt_arobasR)
thread2357 = threading.Thread(target=decrypt_arobasT)
thread2358 = threading.Thread(target=decrypt_arobasV)
thread2359 = threading.Thread(target=decrypt_arobasX)
thread2360 = threading.Thread(target=decrypt_arobasZ)
thread2361 = threading.Thread(target=decrypt_arobas0)
thread2362 = threading.Thread(target=decrypt_arobas2)
thread2363 = threading.Thread(target=decrypt_arobas4)
thread2364 = threading.Thread(target=decrypt_arobas6)
thread2365 = threading.Thread(target=decrypt_arobas8)
thread2366 = threading.Thread(target=decrypt_arobasexcl)
thread2367 = threading.Thread(target=decrypt_arobasdquote)
thread2368 = threading.Thread(target=decrypt_arobasdoll)
thread2369 = threading.Thread(target=decrypt_arobasand)
thread2370 = threading.Thread(target=decrypt_arobasquote)
thread2371 = threading.Thread(target=decrypt_aropar)
thread2372 = threading.Thread(target=decrypt_arobasast)
thread2373 = threading.Thread(target=decrypt_arobasvir)
thread2374 = threading.Thread(target=decrypt_arobaspp)
thread2375 = threading.Thread(target=decrypt_arobastp)
thread2376 = threading.Thread(target=decrypt_arobasless)
thread2377 = threading.Thread(target=decrypt_arobasmore)
thread2378 = threading.Thread(target=decrypt_arobasaro)
thread2379 = threading.Thread(target=decrypt_arobascroc)
thread2380 = threading.Thread(target=decrypt_arobasbsl)
thread2381 = threading.Thread(target=decrypt_arobascirc)
thread2382 = threading.Thread(target=decrypt_arobasesp)
thread2383 = threading.Thread(target=decrypt_arobascr)
thread2384 = threading.Thread(target=decrypt_arobashl)
thread2385 = threading.Thread(target=decrypt_arobastild)
thread2386 = threading.Thread(target=decrypt_crocha)
thread2387 = threading.Thread(target=decrypt_crochb)
thread2388 = threading.Thread(target=decrypt_crochd)
thread2389 = threading.Thread(target=decrypt_crochf)
thread2390 = threading.Thread(target=decrypt_crochh)
thread2391 = threading.Thread(target=decrypt_crochj)
thread2392 = threading.Thread(target=decrypt_crochl)
thread2393 = threading.Thread(target=decrypt_crochn)
thread2394 = threading.Thread(target=decrypt_crochp)
thread2395 = threading.Thread(target=decrypt_crochr)
thread2396 = threading.Thread(target=decrypt_crocht)
thread2397 = threading.Thread(target=decrypt_crochv)
thread2398 = threading.Thread(target=decrypt_crochx)
thread2399 = threading.Thread(target=decrypt_crochz)
thread2400 = threading.Thread(target=decrypt_crochA)
thread2401 = threading.Thread(target=decrypt_crochB)
thread2402 = threading.Thread(target=decrypt_crochD)
thread2403 = threading.Thread(target=decrypt_crochF)
thread2404 = threading.Thread(target=decrypt_crochH)
thread2405 = threading.Thread(target=decrypt_crochJ)
thread2406 = threading.Thread(target=decrypt_crochL)
thread2407 = threading.Thread(target=decrypt_crochN)
thread2408 = threading.Thread(target=decrypt_crochP)
thread2409 = threading.Thread(target=decrypt_crochR)
thread2410 = threading.Thread(target=decrypt_crochT)
thread2411 = threading.Thread(target=decrypt_crochV)
thread2412 = threading.Thread(target=decrypt_crochX)
thread2413 = threading.Thread(target=decrypt_crochZ)
thread2414 = threading.Thread(target=decrypt_croch0)
thread2415 = threading.Thread(target=decrypt_croch2)
thread2416 = threading.Thread(target=decrypt_croch4)
thread2417 = threading.Thread(target=decrypt_croch6)
thread2418 = threading.Thread(target=decrypt_croch8)
thread2419 = threading.Thread(target=decrypt_crochexcl)
thread2420 = threading.Thread(target=decrypt_crochdquote)
thread2421 = threading.Thread(target=decrypt_crochdoll)
thread2422 = threading.Thread(target=decrypt_crochand)
thread2423 = threading.Thread(target=decrypt_crochquote)
thread2424 = threading.Thread(target=decrypt_crocpar)
thread2425 = threading.Thread(target=decrypt_crochast)
thread2426 = threading.Thread(target=decrypt_crochvir)
thread2427 = threading.Thread(target=decrypt_crochpp)
thread2428 = threading.Thread(target=decrypt_crochtp)
thread2429 = threading.Thread(target=decrypt_crochless)
thread2430 = threading.Thread(target=decrypt_crochmore)
thread2431 = threading.Thread(target=decrypt_crocharo)
thread2432 = threading.Thread(target=decrypt_crochcroc)
thread2433 = threading.Thread(target=decrypt_crochbsl)
thread2434 = threading.Thread(target=decrypt_crochcirc)
thread2435 = threading.Thread(target=decrypt_crochesp)
thread2436 = threading.Thread(target=decrypt_crochcr)
thread2437 = threading.Thread(target=decrypt_crochhl)
thread2438 = threading.Thread(target=decrypt_crochtild)
thread2439 = threading.Thread(target=decrypt_bsa)
thread2440 = threading.Thread(target=decrypt_bsb)
thread2441 = threading.Thread(target=decrypt_bsd)
thread2442 = threading.Thread(target=decrypt_bsf)
thread2443 = threading.Thread(target=decrypt_bsh)
thread2444 = threading.Thread(target=decrypt_bsj)
thread2445 = threading.Thread(target=decrypt_bsl)
thread2446 = threading.Thread(target=decrypt_bsn)
thread2447 = threading.Thread(target=decrypt_bsp)
thread2448 = threading.Thread(target=decrypt_bsr)
thread2449 = threading.Thread(target=decrypt_bst)
thread2450 = threading.Thread(target=decrypt_bsv)
thread2451 = threading.Thread(target=decrypt_bsx)
thread2452 = threading.Thread(target=decrypt_bsz)
thread2453 = threading.Thread(target=decrypt_bsA)
thread2454 = threading.Thread(target=decrypt_bsB)
thread2455 = threading.Thread(target=decrypt_bsD)
thread2456 = threading.Thread(target=decrypt_bsF)
thread2457 = threading.Thread(target=decrypt_bsH)
thread2458 = threading.Thread(target=decrypt_bsJ)
thread2459 = threading.Thread(target=decrypt_bsL)
thread2460 = threading.Thread(target=decrypt_bsN)
thread2461 = threading.Thread(target=decrypt_bsP)
thread2462 = threading.Thread(target=decrypt_bsR)
thread2463 = threading.Thread(target=decrypt_bsT)
thread2464 = threading.Thread(target=decrypt_bsV)
thread2465 = threading.Thread(target=decrypt_bsX)
thread2466 = threading.Thread(target=decrypt_bsZ)
thread2467 = threading.Thread(target=decrypt_bs0)
thread2468 = threading.Thread(target=decrypt_bs2)
thread2469 = threading.Thread(target=decrypt_bs4)
thread2470 = threading.Thread(target=decrypt_bs6)
thread2471 = threading.Thread(target=decrypt_bs8)
thread2472 = threading.Thread(target=decrypt_bsexcl)
thread2473 = threading.Thread(target=decrypt_bsdquote)
thread2474 = threading.Thread(target=decrypt_bsdoll)
thread2475 = threading.Thread(target=decrypt_bsand)
thread2476 = threading.Thread(target=decrypt_bsquote)
thread2477 = threading.Thread(target=decrypt_bslpar)
thread2478 = threading.Thread(target=decrypt_bsast)
thread2479 = threading.Thread(target=decrypt_bsvir)
thread2480 = threading.Thread(target=decrypt_bspp)
thread2481 = threading.Thread(target=decrypt_bstp)
thread2482 = threading.Thread(target=decrypt_bsless)
thread2483 = threading.Thread(target=decrypt_bsmore)
thread2484 = threading.Thread(target=decrypt_bsaro)
thread2485 = threading.Thread(target=decrypt_bscroc)
thread2486 = threading.Thread(target=decrypt_bsbsl)
thread2487 = threading.Thread(target=decrypt_bscirc)
thread2488 = threading.Thread(target=decrypt_bsesp)
thread2489 = threading.Thread(target=decrypt_bscr)
thread2490 = threading.Thread(target=decrypt_bshl)
thread2491 = threading.Thread(target=decrypt_bstild)
thread2492 = threading.Thread(target=decrypt_cira)
thread2493 = threading.Thread(target=decrypt_cirb)
thread2494 = threading.Thread(target=decrypt_cird)
thread2495 = threading.Thread(target=decrypt_cirf)
thread2496 = threading.Thread(target=decrypt_cirh)
thread2497 = threading.Thread(target=decrypt_cirj)
thread2498 = threading.Thread(target=decrypt_cirl)
thread2499 = threading.Thread(target=decrypt_cirn)
thread2500 = threading.Thread(target=decrypt_cirp)
thread2501 = threading.Thread(target=decrypt_cirr)
thread2502 = threading.Thread(target=decrypt_cirt)
thread2503 = threading.Thread(target=decrypt_cirv)
thread2504 = threading.Thread(target=decrypt_cirx)
thread2505 = threading.Thread(target=decrypt_cirz)
thread2506 = threading.Thread(target=decrypt_cirA)
thread2507 = threading.Thread(target=decrypt_cirB)
thread2508 = threading.Thread(target=decrypt_cirD)
thread2509 = threading.Thread(target=decrypt_cirF)
thread2510 = threading.Thread(target=decrypt_cirH)
thread2511 = threading.Thread(target=decrypt_cirJ)
thread2512 = threading.Thread(target=decrypt_cirL)
thread2513 = threading.Thread(target=decrypt_cirN)
thread2514 = threading.Thread(target=decrypt_cirP)
thread2515 = threading.Thread(target=decrypt_cirR)
thread2516 = threading.Thread(target=decrypt_cirT)
thread2517 = threading.Thread(target=decrypt_cirV)
thread2518 = threading.Thread(target=decrypt_cirX)
thread2519 = threading.Thread(target=decrypt_cirZ)
thread2520 = threading.Thread(target=decrypt_cir0)
thread2521 = threading.Thread(target=decrypt_cir2)
thread2522 = threading.Thread(target=decrypt_cir4)
thread2523 = threading.Thread(target=decrypt_cir6)
thread2524 = threading.Thread(target=decrypt_cir8)
thread2525 = threading.Thread(target=decrypt_cirexcl)
thread2526 = threading.Thread(target=decrypt_cirdquote)
thread2527 = threading.Thread(target=decrypt_cirdoll)
thread2528 = threading.Thread(target=decrypt_cirand)
thread2529 = threading.Thread(target=decrypt_cirquote)
thread2530 = threading.Thread(target=decrypt_circpar)
thread2531 = threading.Thread(target=decrypt_cirast)
thread2532 = threading.Thread(target=decrypt_cirvir)
thread2533 = threading.Thread(target=decrypt_cirpp)
thread2534 = threading.Thread(target=decrypt_cirtp)
thread2535 = threading.Thread(target=decrypt_cirless)
thread2536 = threading.Thread(target=decrypt_cirmore)
thread2537 = threading.Thread(target=decrypt_ciraro)
thread2538 = threading.Thread(target=decrypt_circroc)
thread2539 = threading.Thread(target=decrypt_cirbsl)
thread2540 = threading.Thread(target=decrypt_circirc)
thread2541 = threading.Thread(target=decrypt_ciresp)
thread2542 = threading.Thread(target=decrypt_circr)
thread2543 = threading.Thread(target=decrypt_cirhl)
thread2544 = threading.Thread(target=decrypt_cirtild)
thread2545 = threading.Thread(target=decrypt_esua)
thread2546 = threading.Thread(target=decrypt_esub)
thread2547 = threading.Thread(target=decrypt_esud)
thread2548 = threading.Thread(target=decrypt_esuf)
thread2549 = threading.Thread(target=decrypt_esuh)
thread2550 = threading.Thread(target=decrypt_esuj)
thread2551 = threading.Thread(target=decrypt_esul)
thread2552 = threading.Thread(target=decrypt_esun)
thread2553 = threading.Thread(target=decrypt_esup)
thread2554 = threading.Thread(target=decrypt_esur)
thread2555 = threading.Thread(target=decrypt_esut)
thread2556 = threading.Thread(target=decrypt_esuv)
thread2557 = threading.Thread(target=decrypt_esux)
thread2558 = threading.Thread(target=decrypt_esuz)
thread2559 = threading.Thread(target=decrypt_esuA)
thread2560 = threading.Thread(target=decrypt_esuB)
thread2561 = threading.Thread(target=decrypt_esuD)
thread2562 = threading.Thread(target=decrypt_esuF)
thread2563 = threading.Thread(target=decrypt_esuH)
thread2564 = threading.Thread(target=decrypt_esuJ)
thread2565 = threading.Thread(target=decrypt_esuL)
thread2566 = threading.Thread(target=decrypt_esuN)
thread2567 = threading.Thread(target=decrypt_esuP)
thread2568 = threading.Thread(target=decrypt_esuR)
thread2569 = threading.Thread(target=decrypt_esuT)
thread2570 = threading.Thread(target=decrypt_esuV)
thread2571 = threading.Thread(target=decrypt_esuX)
thread2572 = threading.Thread(target=decrypt_esuZ)
thread2573 = threading.Thread(target=decrypt_esu0)
thread2574 = threading.Thread(target=decrypt_esu2)
thread2575 = threading.Thread(target=decrypt_esu4)
thread2576 = threading.Thread(target=decrypt_esu6)
thread2577 = threading.Thread(target=decrypt_esu8)
thread2578 = threading.Thread(target=decrypt_esuexcl)
thread2579 = threading.Thread(target=decrypt_esudquote)
thread2580 = threading.Thread(target=decrypt_esudoll)
thread2581 = threading.Thread(target=decrypt_esuand)
thread2582 = threading.Thread(target=decrypt_esuquote)
thread2583 = threading.Thread(target=decrypt_esppar)
thread2584 = threading.Thread(target=decrypt_esuast)
thread2585 = threading.Thread(target=decrypt_esuvir)
thread2586 = threading.Thread(target=decrypt_esupp)
thread2587 = threading.Thread(target=decrypt_esutp)
thread2588 = threading.Thread(target=decrypt_esuless)
thread2589 = threading.Thread(target=decrypt_esumore)
thread2590 = threading.Thread(target=decrypt_esuaro)
thread2591 = threading.Thread(target=decrypt_esucroc)
thread2592 = threading.Thread(target=decrypt_esubsl)
thread2593 = threading.Thread(target=decrypt_esucirc)
thread2594 = threading.Thread(target=decrypt_esuesp)
thread2595 = threading.Thread(target=decrypt_esucr)
thread2596 = threading.Thread(target=decrypt_esuhl)
thread2597 = threading.Thread(target=decrypt_esutild)
thread2598 = threading.Thread(target=decrypt_crocha)
thread2599 = threading.Thread(target=decrypt_crochb)
thread2600 = threading.Thread(target=decrypt_crochd)
thread2601 = threading.Thread(target=decrypt_crochf)
thread2602 = threading.Thread(target=decrypt_crochh)
thread2603 = threading.Thread(target=decrypt_crochj)
thread2604 = threading.Thread(target=decrypt_crochl)
thread2605 = threading.Thread(target=decrypt_crochn)
thread2606 = threading.Thread(target=decrypt_crochp)
thread2607 = threading.Thread(target=decrypt_crochr)
thread2608 = threading.Thread(target=decrypt_crocht)
thread2609 = threading.Thread(target=decrypt_crochv)
thread2610 = threading.Thread(target=decrypt_crochx)
thread2611 = threading.Thread(target=decrypt_crochz)
thread2612 = threading.Thread(target=decrypt_crochA)
thread2613 = threading.Thread(target=decrypt_crochB)
thread2614 = threading.Thread(target=decrypt_crochD)
thread2615 = threading.Thread(target=decrypt_crochF)
thread2616 = threading.Thread(target=decrypt_crochH)
thread2617 = threading.Thread(target=decrypt_crochJ)
thread2618 = threading.Thread(target=decrypt_crochL)
thread2619 = threading.Thread(target=decrypt_crochN)
thread2620 = threading.Thread(target=decrypt_crochP)
thread2621 = threading.Thread(target=decrypt_crochR)
thread2622 = threading.Thread(target=decrypt_crochT)
thread2623 = threading.Thread(target=decrypt_crochV)
thread2624 = threading.Thread(target=decrypt_crochX)
thread2625 = threading.Thread(target=decrypt_crochZ)
thread2626 = threading.Thread(target=decrypt_croch0)
thread2627 = threading.Thread(target=decrypt_croch2)
thread2628 = threading.Thread(target=decrypt_croch4)
thread2629 = threading.Thread(target=decrypt_croch6)
thread2630 = threading.Thread(target=decrypt_croch8)
thread2631 = threading.Thread(target=decrypt_crochexcl)
thread2632 = threading.Thread(target=decrypt_crochdquote)
thread2633 = threading.Thread(target=decrypt_crochdoll)
thread2634 = threading.Thread(target=decrypt_crochand)
thread2635 = threading.Thread(target=decrypt_crochquote)
thread2636 = threading.Thread(target=decrypt_crpar)
thread2637 = threading.Thread(target=decrypt_crochast)
thread2638 = threading.Thread(target=decrypt_crochvir)
thread2639 = threading.Thread(target=decrypt_crochpp)
thread2640 = threading.Thread(target=decrypt_crochtp)
thread2641 = threading.Thread(target=decrypt_crochless)
thread2642 = threading.Thread(target=decrypt_crochmore)
thread2643 = threading.Thread(target=decrypt_crocharo)
thread2644 = threading.Thread(target=decrypt_crochcroc)
thread2645 = threading.Thread(target=decrypt_crochbsl)
thread2646 = threading.Thread(target=decrypt_crochcirc)
thread2647 = threading.Thread(target=decrypt_crochesp)
thread2648 = threading.Thread(target=decrypt_crochcr)
thread2649 = threading.Thread(target=decrypt_crochhl)
thread2650 = threading.Thread(target=decrypt_crochtild)
thread2651 = threading.Thread(target=decrypt_vsla)
thread2652 = threading.Thread(target=decrypt_vslb)
thread2653 = threading.Thread(target=decrypt_vsld)
thread2654 = threading.Thread(target=decrypt_vslf)
thread2655 = threading.Thread(target=decrypt_vslh)
thread2656 = threading.Thread(target=decrypt_vslj)
thread2657 = threading.Thread(target=decrypt_vsll)
thread2658 = threading.Thread(target=decrypt_vsln)
thread2659 = threading.Thread(target=decrypt_vslp)
thread2660 = threading.Thread(target=decrypt_vslr)
thread2661 = threading.Thread(target=decrypt_vslt)
thread2662 = threading.Thread(target=decrypt_vslv)
thread2663 = threading.Thread(target=decrypt_vslx)
thread2664 = threading.Thread(target=decrypt_vslz)
thread2665 = threading.Thread(target=decrypt_vslA)
thread2666 = threading.Thread(target=decrypt_vslB)
thread2667 = threading.Thread(target=decrypt_vslD)
thread2668 = threading.Thread(target=decrypt_vslF)
thread2669 = threading.Thread(target=decrypt_vslH)
thread2670 = threading.Thread(target=decrypt_vslJ)
thread2671 = threading.Thread(target=decrypt_vslL)
thread2672 = threading.Thread(target=decrypt_vslN)
thread2673 = threading.Thread(target=decrypt_vslP)
thread2674 = threading.Thread(target=decrypt_vslR)
thread2675 = threading.Thread(target=decrypt_vslT)
thread2676 = threading.Thread(target=decrypt_vslV)
thread2677 = threading.Thread(target=decrypt_vslX)
thread2678 = threading.Thread(target=decrypt_vslZ)
thread2679 = threading.Thread(target=decrypt_vsl0)
thread2680 = threading.Thread(target=decrypt_vsl2)
thread2681 = threading.Thread(target=decrypt_vsl4)
thread2682 = threading.Thread(target=decrypt_vsl6)
thread2683 = threading.Thread(target=decrypt_vsl8)
thread2684 = threading.Thread(target=decrypt_vslexcl)
thread2685 = threading.Thread(target=decrypt_vsldquote)
thread2686 = threading.Thread(target=decrypt_vsldoll)
thread2687 = threading.Thread(target=decrypt_vsland)
thread2688 = threading.Thread(target=decrypt_vslquote)
thread2689 = threading.Thread(target=decrypt_hlpar)
thread2690 = threading.Thread(target=decrypt_vslast)
thread2691 = threading.Thread(target=decrypt_vslvir)
thread2692 = threading.Thread(target=decrypt_vslpp)
thread2693 = threading.Thread(target=decrypt_vsltp)
thread2694 = threading.Thread(target=decrypt_vslless)
thread2695 = threading.Thread(target=decrypt_vslmore)
thread2696 = threading.Thread(target=decrypt_vslaro)
thread2697 = threading.Thread(target=decrypt_vslcroc)
thread2698 = threading.Thread(target=decrypt_vslbsl)
thread2699 = threading.Thread(target=decrypt_vslcirc)
thread2700 = threading.Thread(target=decrypt_vslesp)
thread2701 = threading.Thread(target=decrypt_vslcr)
thread2702 = threading.Thread(target=decrypt_vslhl)
thread2703 = threading.Thread(target=decrypt_vsltild)
thread2704 = threading.Thread(target=decrypt_tila)
thread2705 = threading.Thread(target=decrypt_tilb)
thread2706 = threading.Thread(target=decrypt_tild)
thread2707 = threading.Thread(target=decrypt_tilf)
thread2708 = threading.Thread(target=decrypt_tilh)
thread2709 = threading.Thread(target=decrypt_tilj)
thread2710 = threading.Thread(target=decrypt_till)
thread2711 = threading.Thread(target=decrypt_tiln)
thread2712 = threading.Thread(target=decrypt_tilp)
thread2713 = threading.Thread(target=decrypt_tilr)
thread2714 = threading.Thread(target=decrypt_tilt)
thread2715 = threading.Thread(target=decrypt_tilv)
thread2716 = threading.Thread(target=decrypt_tilx)
thread2717 = threading.Thread(target=decrypt_tilz)
thread2718 = threading.Thread(target=decrypt_tilA)
thread2719 = threading.Thread(target=decrypt_tilB)
thread2720 = threading.Thread(target=decrypt_tilD)
thread2721 = threading.Thread(target=decrypt_tilF)
thread2722 = threading.Thread(target=decrypt_tilH)
thread2723 = threading.Thread(target=decrypt_tilJ)
thread2724 = threading.Thread(target=decrypt_tilL)
thread2725 = threading.Thread(target=decrypt_tilN)
thread2726 = threading.Thread(target=decrypt_tilP)
thread2727 = threading.Thread(target=decrypt_tilR)
thread2728 = threading.Thread(target=decrypt_tilT)
thread2729 = threading.Thread(target=decrypt_tilV)
thread2730 = threading.Thread(target=decrypt_tilX)
thread2731 = threading.Thread(target=decrypt_tilZ)
thread2732 = threading.Thread(target=decrypt_til0)
thread2733 = threading.Thread(target=decrypt_til2)
thread2734 = threading.Thread(target=decrypt_til4)
thread2735 = threading.Thread(target=decrypt_til6)
thread2736 = threading.Thread(target=decrypt_til8)
thread2737 = threading.Thread(target=decrypt_tilexcl)
thread2738 = threading.Thread(target=decrypt_tildquote)
thread2739 = threading.Thread(target=decrypt_tildoll)
thread2740 = threading.Thread(target=decrypt_tiland)
thread2741 = threading.Thread(target=decrypt_tilquote)
thread2742 = threading.Thread(target=decrypt_tilpar)
thread2743 = threading.Thread(target=decrypt_tilast)
thread2744 = threading.Thread(target=decrypt_tilvir)
thread2745 = threading.Thread(target=decrypt_tilpp)
thread2746 = threading.Thread(target=decrypt_tiltp)
thread2747 = threading.Thread(target=decrypt_tilless)
thread2748 = threading.Thread(target=decrypt_tilmore)
thread2749 = threading.Thread(target=decrypt_tilaro)
thread2750 = threading.Thread(target=decrypt_tilcroc)
thread2751 = threading.Thread(target=decrypt_tilbsl)
thread2752 = threading.Thread(target=decrypt_tilcirc)
thread2753 = threading.Thread(target=decrypt_tilesp)
thread2754 = threading.Thread(target=decrypt_tilcr)
thread2755 = threading.Thread(target=decrypt_tilhl)
thread2756 = threading.Thread(target=decrypt_tiltild)

thread1.start()
thread2.start()
thread3.start()
thread4.start()
thread5.start()
thread6.start()
thread7.start()
thread8.start()
thread9.start()
thread10.start()
thread11.start()
thread12.start()
thread13.start()
thread14.start()
thread15.start()
thread16.start()
thread17.start()
thread18.start()
thread19.start()
thread20.start()
thread21.start()
thread22.start()
thread23.start()
thread24.start()
thread25.start()
thread26.start()
thread27.start()
thread28.start()
thread29.start()
thread30.start()
thread31.start()
thread32.start()
thread33.start()
thread34.start()
thread35.start()
thread36.start()
thread37.start()
thread38.start()
thread39.start()
thread40.start()
thread41.start()
thread42.start()
thread43.start()
thread44.start()
thread45.start()
thread46.start()
thread47.start()
thread48.start()
thread49.start()
thread50.start()
thread51.start()
thread52.start()
thread53.start()
thread54.start()
thread55.start()
thread56.start()
thread57.start()
thread58.start()
thread59.start()
thread60.start()
thread61.start()
thread62.start()
thread63.start()
thread64.start()
thread65.start()
thread66.start()
thread67.start()
thread68.start()
thread69.start()
thread70.start()
thread71.start()
thread72.start()
thread73.start()
thread74.start()
thread75.start()
thread76.start()
thread77.start()
thread78.start()
thread79.start()
thread80.start()
thread81.start()
thread82.start()
thread83.start()
thread84.start()
thread85.start()
thread86.start()
thread87.start()
thread88.start()
thread89.start()
thread90.start()
thread91.start()
thread92.start()
thread93.start()
thread94.start()
thread95.start()
thread96.start()
thread97.start()
thread98.start()
thread99.start()
thread100.start()
thread101.start()
thread102.start()
thread103.start()
thread104.start()
thread105.start()
thread106.start()
thread107.start()
thread108.start()
thread109.start()
thread110.start()
thread111.start()
thread112.start()
thread113.start()
thread114.start()
thread115.start()
thread116.start()
thread117.start()
thread118.start()
thread119.start()
thread120.start()
thread121.start()
thread122.start()
thread123.start()
thread124.start()
thread125.start()
thread126.start()
thread127.start()
thread128.start()
thread129.start()
thread130.start()
thread131.start()
thread132.start()
thread133.start()
thread134.start()
thread135.start()
thread136.start()
thread137.start()
thread138.start()
thread139.start()
thread140.start()
thread141.start()
thread142.start()
thread143.start()
thread144.start()
thread145.start()
thread146.start()
thread147.start()
thread148.start()
thread149.start()
thread150.start()
thread151.start()
thread152.start()
thread153.start()
thread154.start()
thread155.start()
thread156.start()
thread157.start()
thread158.start()
thread159.start()
thread160.start()
thread161.start()
thread162.start()
thread163.start()
thread164.start()
thread165.start()
thread166.start()
thread167.start()
thread168.start()
thread169.start()
thread170.start()
thread171.start()
thread172.start()
thread173.start()
thread174.start()
thread175.start()
thread176.start()
thread177.start()
thread178.start()
thread179.start()
thread180.start()
thread181.start()
thread182.start()
thread183.start()
thread184.start()
thread185.start()
thread186.start()
thread187.start()
thread188.start()
thread189.start()
thread190.start()
thread191.start()
thread192.start()
thread193.start()
thread194.start()
thread195.start()
thread196.start()
thread197.start()
thread198.start()
thread199.start()
thread200.start()
thread201.start()
thread202.start()
thread203.start()
thread204.start()
thread205.start()
thread206.start()
thread207.start()
thread208.start()
thread209.start()
thread210.start()
thread211.start()
thread212.start()
thread213.start()
thread214.start()
thread215.start()
thread216.start()
thread217.start()
thread218.start()
thread219.start()
thread220.start()
thread221.start()
thread222.start()
thread223.start()
thread224.start()
thread225.start()
thread226.start()
thread227.start()
thread228.start()
thread229.start()
thread230.start()
thread231.start()
thread232.start()
thread233.start()
thread234.start()
thread235.start()
thread236.start()
thread237.start()
thread238.start()
thread239.start()
thread240.start()
thread241.start()
thread242.start()
thread243.start()
thread244.start()
thread245.start()
thread246.start()
thread247.start()
thread248.start()
thread249.start()
thread250.start()
thread251.start()
thread252.start()
thread253.start()
thread254.start()
thread255.start()
thread256.start()
thread257.start()
thread258.start()
thread259.start()
thread260.start()
thread261.start()
thread262.start()
thread263.start()
thread264.start()
thread265.start()
thread266.start()
thread267.start()
thread268.start()
thread269.start()
thread270.start()
thread271.start()
thread272.start()
thread273.start()
thread274.start()
thread275.start()
thread276.start()
thread277.start()
thread278.start()
thread279.start()
thread280.start()
thread281.start()
thread282.start()
thread283.start()
thread284.start()
thread285.start()
thread286.start()
thread287.start()
thread288.start()
thread289.start()
thread290.start()
thread291.start()
thread292.start()
thread293.start()
thread294.start()
thread295.start()
thread296.start()
thread297.start()
thread298.start()
thread299.start()
thread300.start()
thread301.start()
thread302.start()
thread303.start()
thread304.start()
thread305.start()
thread306.start()
thread307.start()
thread308.start()
thread309.start()
thread310.start()
thread311.start()
thread312.start()
thread313.start()
thread314.start()
thread315.start()
thread316.start()
thread317.start()
thread318.start()
thread319.start()
thread320.start()
thread321.start()
thread322.start()
thread323.start()
thread324.start()
thread325.start()
thread326.start()
thread327.start()
thread328.start()
thread329.start()
thread330.start()
thread331.start()
thread332.start()
thread333.start()
thread334.start()
thread335.start()
thread336.start()
thread337.start()
thread338.start()
thread339.start()
thread340.start()
thread341.start()
thread342.start()
thread343.start()
thread344.start()
thread345.start()
thread346.start()
thread347.start()
thread348.start()
thread349.start()
thread350.start()
thread351.start()
thread352.start()
thread353.start()
thread354.start()
thread355.start()
thread356.start()
thread357.start()
thread358.start()
thread359.start()
thread360.start()
thread361.start()
thread362.start()
thread363.start()
thread364.start()
thread365.start()
thread366.start()
thread367.start()
thread368.start()
thread369.start()
thread370.start()
thread371.start()
thread372.start()
thread373.start()
thread374.start()
thread375.start()
thread376.start()
thread377.start()
thread378.start()
thread379.start()
thread380.start()
thread381.start()
thread382.start()
thread383.start()
thread384.start()
thread385.start()
thread386.start()
thread387.start()
thread388.start()
thread389.start()
thread390.start()
thread391.start()
thread392.start()
thread393.start()
thread394.start()
thread395.start()
thread396.start()
thread397.start()
thread398.start()
thread399.start()
thread400.start()
thread401.start()
thread402.start()
thread403.start()
thread404.start()
thread405.start()
thread406.start()
thread407.start()
thread408.start()
thread409.start()
thread410.start()
thread411.start()
thread412.start()
thread413.start()
thread414.start()
thread415.start()
thread416.start()
thread417.start()
thread418.start()
thread419.start()
thread420.start()
thread421.start()
thread422.start()
thread423.start()
thread424.start()
thread425.start()
thread426.start()
thread427.start()
thread428.start()
thread429.start()
thread430.start()
thread431.start()
thread432.start()
thread433.start()
thread434.start()
thread435.start()
thread436.start()
thread437.start()
thread438.start()
thread439.start()
thread440.start()
thread441.start()
thread442.start()
thread443.start()
thread444.start()
thread445.start()
thread446.start()
thread447.start()
thread448.start()
thread449.start()
thread450.start()
thread451.start()
thread452.start()
thread453.start()
thread454.start()
thread455.start()
thread456.start()
thread457.start()
thread458.start()
thread459.start()
thread460.start()
thread461.start()
thread462.start()
thread463.start()
thread464.start()
thread465.start()
thread466.start()
thread467.start()
thread468.start()
thread469.start()
thread470.start()
thread471.start()
thread472.start()
thread473.start()
thread474.start()
thread475.start()
thread476.start()
thread477.start()
thread478.start()
thread479.start()
thread480.start()
thread481.start()
thread482.start()
thread483.start()
thread484.start()
thread485.start()
thread486.start()
thread487.start()
thread488.start()
thread489.start()
thread490.start()
thread491.start()
thread492.start()
thread493.start()
thread494.start()
thread495.start()
thread496.start()
thread497.start()
thread498.start()
thread499.start()
thread500.start()
thread501.start()
thread502.start()
thread503.start()
thread504.start()
thread505.start()
thread506.start()
thread507.start()
thread508.start()
thread509.start()
thread510.start()
thread511.start()
thread512.start()
thread513.start()
thread514.start()
thread515.start()
thread516.start()
thread517.start()
thread518.start()
thread519.start()
thread520.start()
thread521.start()
thread522.start()
thread523.start()
thread524.start()
thread525.start()
thread526.start()
thread527.start()
thread528.start()
thread529.start()
thread530.start()
thread531.start()
thread532.start()
thread533.start()
thread534.start()
thread535.start()
thread536.start()
thread537.start()
thread538.start()
thread539.start()
thread540.start()
thread541.start()
thread542.start()
thread543.start()
thread544.start()
thread545.start()
thread546.start()
thread547.start()
thread548.start()
thread549.start()
thread550.start()
thread551.start()
thread552.start()
thread553.start()
thread554.start()
thread555.start()
thread556.start()
thread557.start()
thread558.start()
thread559.start()
thread560.start()
thread561.start()
thread562.start()
thread563.start()
thread564.start()
thread565.start()
thread566.start()
thread567.start()
thread568.start()
thread569.start()
thread570.start()
thread571.start()
thread572.start()
thread573.start()
thread574.start()
thread575.start()
thread576.start()
thread577.start()
thread578.start()
thread579.start()
thread580.start()
thread581.start()
thread582.start()
thread583.start()
thread584.start()
thread585.start()
thread586.start()
thread587.start()
thread588.start()
thread589.start()
thread590.start()
thread591.start()
thread592.start()
thread593.start()
thread594.start()
thread595.start()
thread596.start()
thread597.start()
thread598.start()
thread599.start()
thread600.start()
thread601.start()
thread602.start()
thread603.start()
thread604.start()
thread605.start()
thread606.start()
thread607.start()
thread608.start()
thread609.start()
thread610.start()
thread611.start()
thread612.start()
thread613.start()
thread614.start()
thread615.start()
thread616.start()
thread617.start()
thread618.start()
thread619.start()
thread620.start()
thread621.start()
thread622.start()
thread623.start()
thread624.start()
thread625.start()
thread626.start()
thread627.start()
thread628.start()
thread629.start()
thread630.start()
thread631.start()
thread632.start()
thread633.start()
thread634.start()
thread635.start()
thread636.start()
thread637.start()
thread638.start()
thread639.start()
thread640.start()
thread641.start()
thread642.start()
thread643.start()
thread644.start()
thread645.start()
thread646.start()
thread647.start()
thread648.start()
thread649.start()
thread650.start()
thread651.start()
thread652.start()
thread653.start()
thread654.start()
thread655.start()
thread656.start()
thread657.start()
thread658.start()
thread659.start()
thread660.start()
thread661.start()
thread662.start()
thread663.start()
thread664.start()
thread665.start()
thread666.start()
thread667.start()
thread668.start()
thread669.start()
thread670.start()
thread671.start()
thread672.start()
thread673.start()
thread674.start()
thread675.start()
thread676.start()
thread677.start()
thread678.start()
thread679.start()
thread680.start()
thread681.start()
thread682.start()
thread683.start()
thread684.start()
thread685.start()
thread686.start()
thread687.start()
thread688.start()
thread689.start()
thread690.start()
thread691.start()
thread692.start()
thread693.start()
thread694.start()
thread695.start()
thread696.start()
thread697.start()
thread698.start()
thread699.start()
thread700.start()
thread701.start()
thread702.start()
thread703.start()
thread704.start()
thread705.start()
thread706.start()
thread707.start()
thread708.start()
thread709.start()
thread710.start()
thread711.start()
thread712.start()
thread713.start()
thread714.start()
thread715.start()
thread716.start()
thread717.start()
thread718.start()
thread719.start()
thread720.start()
thread721.start()
thread722.start()
thread723.start()
thread724.start()
thread725.start()
thread726.start()
thread727.start()
thread728.start()
thread729.start()
thread730.start()
thread731.start()
thread732.start()
thread733.start()
thread734.start()
thread735.start()
thread736.start()
thread737.start()
thread738.start()
thread739.start()
thread740.start()
thread741.start()
thread742.start()
thread743.start()
thread744.start()
thread745.start()
thread746.start()
thread747.start()
thread748.start()
thread749.start()
thread750.start()
thread751.start()
thread752.start()
thread753.start()
thread754.start()
thread755.start()
thread756.start()
thread757.start()
thread758.start()
thread759.start()
thread760.start()
thread761.start()
thread762.start()
thread763.start()
thread764.start()
thread765.start()
thread766.start()
thread767.start()
thread768.start()
thread769.start()
thread770.start()
thread771.start()
thread772.start()
thread773.start()
thread774.start()
thread775.start()
thread776.start()
thread777.start()
thread778.start()
thread779.start()
thread780.start()
thread781.start()
thread782.start()
thread783.start()
thread784.start()
thread785.start()
thread786.start()
thread787.start()
thread788.start()
thread789.start()
thread790.start()
thread791.start()
thread792.start()
thread793.start()
thread794.start()
thread795.start()
thread796.start()
thread797.start()
thread798.start()
thread799.start()
thread800.start()
thread801.start()
thread802.start()
thread803.start()
thread804.start()
thread805.start()
thread806.start()
thread807.start()
thread808.start()
thread809.start()
thread810.start()
thread811.start()
thread812.start()
thread813.start()
thread814.start()
thread815.start()
thread816.start()
thread817.start()
thread818.start()
thread819.start()
thread820.start()
thread821.start()
thread822.start()
thread823.start()
thread824.start()
thread825.start()
thread826.start()
thread827.start()
thread828.start()
thread829.start()
thread830.start()
thread831.start()
thread832.start()
thread833.start()
thread834.start()
thread835.start()
thread836.start()
thread837.start()
thread838.start()
thread839.start()
thread840.start()
thread841.start()
thread842.start()
thread843.start()
thread844.start()
thread845.start()
thread846.start()
thread847.start()
thread848.start()
thread849.start()
thread850.start()
thread851.start()
thread852.start()
thread853.start()
thread854.start()
thread855.start()
thread856.start()
thread857.start()
thread858.start()
thread859.start()
thread860.start()
thread861.start()
thread862.start()
thread863.start()
thread864.start()
thread865.start()
thread866.start()
thread867.start()
thread868.start()
thread869.start()
thread870.start()
thread871.start()
thread872.start()
thread873.start()
thread874.start()
thread875.start()
thread876.start()
thread877.start()
thread878.start()
thread879.start()
thread880.start()
thread881.start()
thread882.start()
thread883.start()
thread884.start()
thread885.start()
thread886.start()
thread887.start()
thread888.start()
thread889.start()
thread890.start()
thread891.start()
thread892.start()
thread893.start()
thread894.start()
thread895.start()
thread896.start()
thread897.start()
thread898.start()
thread899.start()
thread900.start()
thread901.start()
thread902.start()
thread903.start()
thread904.start()
thread905.start()
thread906.start()
thread907.start()
thread908.start()
thread909.start()
thread910.start()
thread911.start()
thread912.start()
thread913.start()
thread914.start()
thread915.start()
thread916.start()
thread917.start()
thread918.start()
thread919.start()
thread920.start()
thread921.start()
thread922.start()
thread923.start()
thread924.start()
thread925.start()
thread926.start()
thread927.start()
thread928.start()
thread929.start()
thread930.start()
thread931.start()
thread932.start()
thread933.start()
thread934.start()
thread935.start()
thread936.start()
thread937.start()
thread938.start()
thread939.start()
thread940.start()
thread941.start()
thread942.start()
thread943.start()
thread944.start()
thread945.start()
thread946.start()
thread947.start()
thread948.start()
thread949.start()
thread950.start()
thread951.start()
thread952.start()
thread953.start()
thread954.start()
thread955.start()
thread956.start()
thread957.start()
thread958.start()
thread959.start()
thread960.start()
thread961.start()
thread962.start()
thread963.start()
thread964.start()
thread965.start()
thread966.start()
thread967.start()
thread968.start()
thread969.start()
thread970.start()
thread971.start()
thread972.start()
thread973.start()
thread974.start()
thread975.start()
thread976.start()
thread977.start()
thread978.start()
thread979.start()
thread980.start()
thread981.start()
thread982.start()
thread983.start()
thread984.start()
thread985.start()
thread986.start()
thread987.start()
thread988.start()
thread989.start()
thread990.start()
thread991.start()
thread992.start()
thread993.start()
thread994.start()
thread995.start()
thread996.start()
thread997.start()
thread998.start()
thread999.start()
thread1000.start()
thread1001.start()
thread1002.start()
thread1003.start()
thread1004.start()
thread1005.start()
thread1006.start()
thread1007.start()
thread1008.start()
thread1009.start()
thread1010.start()
thread1011.start()
thread1012.start()
thread1013.start()
thread1014.start()
thread1015.start()
thread1016.start()
thread1017.start()
thread1018.start()
thread1019.start()
thread1020.start()
thread1021.start()
thread1022.start()
thread1023.start()
thread1024.start()
thread1025.start()
thread1026.start()
thread1027.start()
thread1028.start()
thread1029.start()
thread1030.start()
thread1031.start()
thread1032.start()
thread1033.start()
thread1034.start()
thread1035.start()
thread1036.start()
thread1037.start()
thread1038.start()
thread1039.start()
thread1040.start()
thread1041.start()
thread1042.start()
thread1043.start()
thread1044.start()
thread1045.start()
thread1046.start()
thread1047.start()
thread1048.start()
thread1049.start()
thread1050.start()
thread1051.start()
thread1052.start()
thread1053.start()
thread1054.start()
thread1055.start()
thread1056.start()
thread1057.start()
thread1058.start()
thread1059.start()
thread1060.start()
thread1061.start()
thread1062.start()
thread1063.start()
thread1064.start()
thread1065.start()
thread1066.start()
thread1067.start()
thread1068.start()
thread1069.start()
thread1070.start()
thread1071.start()
thread1072.start()
thread1073.start()
thread1074.start()
thread1075.start()
thread1076.start()
thread1077.start()
thread1078.start()
thread1079.start()
thread1080.start()
thread1081.start()
thread1082.start()
thread1083.start()
thread1084.start()
thread1085.start()
thread1086.start()
thread1087.start()
thread1088.start()
thread1089.start()
thread1090.start()
thread1091.start()
thread1092.start()
thread1093.start()
thread1094.start()
thread1095.start()
thread1096.start()
thread1097.start()
thread1098.start()
thread1099.start()
thread1100.start()
thread1101.start()
thread1102.start()
thread1103.start()
thread1104.start()
thread1105.start()
thread1106.start()
thread1107.start()
thread1108.start()
thread1109.start()
thread1110.start()
thread1111.start()
thread1112.start()
thread1113.start()
thread1114.start()
thread1115.start()
thread1116.start()
thread1117.start()
thread1118.start()
thread1119.start()
thread1120.start()
thread1121.start()
thread1122.start()
thread1123.start()
thread1124.start()
thread1125.start()
thread1126.start()
thread1127.start()
thread1128.start()
thread1129.start()
thread1130.start()
thread1131.start()
thread1132.start()
thread1133.start()
thread1134.start()
thread1135.start()
thread1136.start()
thread1137.start()
thread1138.start()
thread1139.start()
thread1140.start()
thread1141.start()
thread1142.start()
thread1143.start()
thread1144.start()
thread1145.start()
thread1146.start()
thread1147.start()
thread1148.start()
thread1149.start()
thread1150.start()
thread1151.start()
thread1152.start()
thread1153.start()
thread1154.start()
thread1155.start()
thread1156.start()
thread1157.start()
thread1158.start()
thread1159.start()
thread1160.start()
thread1161.start()
thread1162.start()
thread1163.start()
thread1164.start()
thread1165.start()
thread1166.start()
thread1167.start()
thread1168.start()
thread1169.start()
thread1170.start()
thread1171.start()
thread1172.start()
thread1173.start()
thread1174.start()
thread1175.start()
thread1176.start()
thread1177.start()
thread1178.start()
thread1179.start()
thread1180.start()
thread1181.start()
thread1182.start()
thread1183.start()
thread1184.start()
thread1185.start()
thread1186.start()
thread1187.start()
thread1188.start()
thread1189.start()
thread1190.start()
thread1191.start()
thread1192.start()
thread1193.start()
thread1194.start()
thread1195.start()
thread1196.start()
thread1197.start()
thread1198.start()
thread1199.start()
thread1200.start()
thread1201.start()
thread1202.start()
thread1203.start()
thread1204.start()
thread1205.start()
thread1206.start()
thread1207.start()
thread1208.start()
thread1209.start()
thread1210.start()
thread1211.start()
thread1212.start()
thread1213.start()
thread1214.start()
thread1215.start()
thread1216.start()
thread1217.start()
thread1218.start()
thread1219.start()
thread1220.start()
thread1221.start()
thread1222.start()
thread1223.start()
thread1224.start()
thread1225.start()
thread1226.start()
thread1227.start()
thread1228.start()
thread1229.start()
thread1230.start()
thread1231.start()
thread1232.start()
thread1233.start()
thread1234.start()
thread1235.start()
thread1236.start()
thread1237.start()
thread1238.start()
thread1239.start()
thread1240.start()
thread1241.start()
thread1242.start()
thread1243.start()
thread1244.start()
thread1245.start()
thread1246.start()
thread1247.start()
thread1248.start()
thread1249.start()
thread1250.start()
thread1251.start()
thread1252.start()
thread1253.start()
thread1254.start()
thread1255.start()
thread1256.start()
thread1257.start()
thread1258.start()
thread1259.start()
thread1260.start()
thread1261.start()
thread1262.start()
thread1263.start()
thread1264.start()
thread1265.start()
thread1266.start()
thread1267.start()
thread1268.start()
thread1269.start()
thread1270.start()
thread1271.start()
thread1272.start()
thread1273.start()
thread1274.start()
thread1275.start()
thread1276.start()
thread1277.start()
thread1278.start()
thread1279.start()
thread1280.start()
thread1281.start()
thread1282.start()
thread1283.start()
thread1284.start()
thread1285.start()
thread1286.start()
thread1287.start()
thread1288.start()
thread1289.start()
thread1290.start()
thread1291.start()
thread1292.start()
thread1293.start()
thread1294.start()
thread1295.start()
thread1296.start()
thread1297.start()
thread1298.start()
thread1299.start()
thread1300.start()
thread1301.start()
thread1302.start()
thread1303.start()
thread1304.start()
thread1305.start()
thread1306.start()
thread1307.start()
thread1308.start()
thread1309.start()
thread1310.start()
thread1311.start()
thread1312.start()
thread1313.start()
thread1314.start()
thread1315.start()
thread1316.start()
thread1317.start()
thread1318.start()
thread1319.start()
thread1320.start()
thread1321.start()
thread1322.start()
thread1323.start()
thread1324.start()
thread1325.start()
thread1326.start()
thread1327.start()
thread1328.start()
thread1329.start()
thread1330.start()
thread1331.start()
thread1332.start()
thread1333.start()
thread1334.start()
thread1335.start()
thread1336.start()
thread1337.start()
thread1338.start()
thread1339.start()
thread1340.start()
thread1341.start()
thread1342.start()
thread1343.start()
thread1344.start()
thread1345.start()
thread1346.start()
thread1347.start()
thread1348.start()
thread1349.start()
thread1350.start()
thread1351.start()
thread1352.start()
thread1353.start()
thread1354.start()
thread1355.start()
thread1356.start()
thread1357.start()
thread1358.start()
thread1359.start()
thread1360.start()
thread1361.start()
thread1362.start()
thread1363.start()
thread1364.start()
thread1365.start()
thread1366.start()
thread1367.start()
thread1368.start()
thread1369.start()
thread1370.start()
thread1371.start()
thread1372.start()
thread1373.start()
thread1374.start()
thread1375.start()
thread1376.start()
thread1377.start()
thread1378.start()
thread1379.start()
thread1380.start()
thread1381.start()
thread1382.start()
thread1383.start()
thread1384.start()
thread1385.start()
thread1386.start()
thread1387.start()
thread1388.start()
thread1389.start()
thread1390.start()
thread1391.start()
thread1392.start()
thread1393.start()
thread1394.start()
thread1395.start()
thread1396.start()
thread1397.start()
thread1398.start()
thread1399.start()
thread1400.start()
thread1401.start()
thread1402.start()
thread1403.start()
thread1404.start()
thread1405.start()
thread1406.start()
thread1407.start()
thread1408.start()
thread1409.start()
thread1410.start()
thread1411.start()
thread1412.start()
thread1413.start()
thread1414.start()
thread1415.start()
thread1416.start()
thread1417.start()
thread1418.start()
thread1419.start()
thread1420.start()
thread1421.start()
thread1422.start()
thread1423.start()
thread1424.start()
thread1425.start()
thread1426.start()
thread1427.start()
thread1428.start()
thread1429.start()
thread1430.start()
thread1431.start()
thread1432.start()
thread1433.start()
thread1434.start()
thread1435.start()
thread1436.start()
thread1437.start()
thread1438.start()
thread1439.start()
thread1440.start()
thread1441.start()
thread1442.start()
thread1443.start()
thread1444.start()
thread1445.start()
thread1446.start()
thread1447.start()
thread1448.start()
thread1449.start()
thread1450.start()
thread1451.start()
thread1452.start()
thread1453.start()
thread1454.start()
thread1455.start()
thread1456.start()
thread1457.start()
thread1458.start()
thread1459.start()
thread1460.start()
thread1461.start()
thread1462.start()
thread1463.start()
thread1464.start()
thread1465.start()
thread1466.start()
thread1467.start()
thread1468.start()
thread1469.start()
thread1470.start()
thread1471.start()
thread1472.start()
thread1473.start()
thread1474.start()
thread1475.start()
thread1476.start()
thread1477.start()
thread1478.start()
thread1479.start()
thread1480.start()
thread1481.start()
thread1482.start()
thread1483.start()
thread1484.start()
thread1485.start()
thread1486.start()
thread1487.start()
thread1488.start()
thread1489.start()
thread1490.start()
thread1491.start()
thread1492.start()
thread1493.start()
thread1494.start()
thread1495.start()
thread1496.start()
thread1497.start()
thread1498.start()
thread1499.start()
thread1500.start()
thread1501.start()
thread1502.start()
thread1503.start()
thread1504.start()
thread1505.start()
thread1506.start()
thread1507.start()
thread1508.start()
thread1509.start()
thread1510.start()
thread1511.start()
thread1512.start()
thread1513.start()
thread1514.start()
thread1515.start()
thread1516.start()
thread1517.start()
thread1518.start()
thread1519.start()
thread1520.start()
thread1521.start()
thread1522.start()
thread1523.start()
thread1524.start()
thread1525.start()
thread1526.start()
thread1527.start()
thread1528.start()
thread1529.start()
thread1530.start()
thread1531.start()
thread1532.start()
thread1533.start()
thread1534.start()
thread1535.start()
thread1536.start()
thread1537.start()
thread1538.start()
thread1539.start()
thread1540.start()
thread1541.start()
thread1542.start()
thread1543.start()
thread1544.start()
thread1545.start()
thread1546.start()
thread1547.start()
thread1548.start()
thread1549.start()
thread1550.start()
thread1551.start()
thread1552.start()
thread1553.start()
thread1554.start()
thread1555.start()
thread1556.start()
thread1557.start()
thread1558.start()
thread1559.start()
thread1560.start()
thread1561.start()
thread1562.start()
thread1563.start()
thread1564.start()
thread1565.start()
thread1566.start()
thread1567.start()
thread1568.start()
thread1569.start()
thread1570.start()
thread1571.start()
thread1572.start()
thread1573.start()
thread1574.start()
thread1575.start()
thread1576.start()
thread1577.start()
thread1578.start()
thread1579.start()
thread1580.start()
thread1581.start()
thread1582.start()
thread1583.start()
thread1584.start()
thread1585.start()
thread1586.start()
thread1587.start()
thread1588.start()
thread1589.start()
thread1590.start()
thread1591.start()
thread1592.start()
thread1593.start()
thread1594.start()
thread1595.start()
thread1596.start()
thread1597.start()
thread1598.start()
thread1599.start()
thread1600.start()
thread1601.start()
thread1602.start()
thread1603.start()
thread1604.start()
thread1605.start()
thread1606.start()
thread1607.start()
thread1608.start()
thread1609.start()
thread1610.start()
thread1611.start()
thread1612.start()
thread1613.start()
thread1614.start()
thread1615.start()
thread1616.start()
thread1617.start()
thread1618.start()
thread1619.start()
thread1620.start()
thread1621.start()
thread1622.start()
thread1623.start()
thread1624.start()
thread1625.start()
thread1626.start()
thread1627.start()
thread1628.start()
thread1629.start()
thread1630.start()
thread1631.start()
thread1632.start()
thread1633.start()
thread1634.start()
thread1635.start()
thread1636.start()
thread1637.start()
thread1638.start()
thread1639.start()
thread1640.start()
thread1641.start()
thread1642.start()
thread1643.start()
thread1644.start()
thread1645.start()
thread1646.start()
thread1647.start()
thread1648.start()
thread1649.start()
thread1650.start()
thread1651.start()
thread1652.start()
thread1653.start()
thread1654.start()
thread1655.start()
thread1656.start()
thread1657.start()
thread1658.start()
thread1659.start()
thread1660.start()
thread1661.start()
thread1662.start()
thread1663.start()
thread1664.start()
thread1665.start()
thread1666.start()
thread1667.start()
thread1668.start()
thread1669.start()
thread1670.start()
thread1671.start()
thread1672.start()
thread1673.start()
thread1674.start()
thread1675.start()
thread1676.start()
thread1677.start()
thread1678.start()
thread1679.start()
thread1680.start()
thread1681.start()
thread1682.start()
thread1683.start()
thread1684.start()
thread1685.start()
thread1686.start()
thread1687.start()
thread1688.start()
thread1689.start()
thread1690.start()
thread1691.start()
thread1692.start()
thread1693.start()
thread1694.start()
thread1695.start()
thread1696.start()
thread1697.start()
thread1698.start()
thread1699.start()
thread1700.start()
thread1701.start()
thread1702.start()
thread1703.start()
thread1704.start()
thread1705.start()
thread1706.start()
thread1707.start()
thread1708.start()
thread1709.start()
thread1710.start()
thread1711.start()
thread1712.start()
thread1713.start()
thread1714.start()
thread1715.start()
thread1716.start()
thread1717.start()
thread1718.start()
thread1719.start()
thread1720.start()
thread1721.start()
thread1722.start()
thread1723.start()
thread1724.start()
thread1725.start()
thread1726.start()
thread1727.start()
thread1728.start()
thread1729.start()
thread1730.start()
thread1731.start()
thread1732.start()
thread1733.start()
thread1734.start()
thread1735.start()
thread1736.start()
thread1737.start()
thread1738.start()
thread1739.start()
thread1740.start()
thread1741.start()
thread1742.start()
thread1743.start()
thread1744.start()
thread1745.start()
thread1746.start()
thread1747.start()
thread1748.start()
thread1749.start()
thread1750.start()
thread1751.start()
thread1752.start()
thread1753.start()
thread1754.start()
thread1755.start()
thread1756.start()
thread1757.start()
thread1758.start()
thread1759.start()
thread1760.start()
thread1761.start()
thread1762.start()
thread1763.start()
thread1764.start()
thread1765.start()
thread1766.start()
thread1767.start()
thread1768.start()
thread1769.start()
thread1770.start()
thread1771.start()
thread1772.start()
thread1773.start()
thread1774.start()
thread1775.start()
thread1776.start()
thread1777.start()
thread1778.start()
thread1779.start()
thread1780.start()
thread1781.start()
thread1782.start()
thread1783.start()
thread1784.start()
thread1785.start()
thread1786.start()
thread1787.start()
thread1788.start()
thread1789.start()
thread1790.start()
thread1791.start()
thread1792.start()
thread1793.start()
thread1794.start()
thread1795.start()
thread1796.start()
thread1797.start()
thread1798.start()
thread1799.start()
thread1800.start()
thread1801.start()
thread1802.start()
thread1803.start()
thread1804.start()
thread1805.start()
thread1806.start()
thread1807.start()
thread1808.start()
thread1809.start()
thread1810.start()
thread1811.start()
thread1812.start()
thread1813.start()
thread1814.start()
thread1815.start()
thread1816.start()
thread1817.start()
thread1818.start()
thread1819.start()
thread1820.start()
thread1821.start()
thread1822.start()
thread1823.start()
thread1824.start()
thread1825.start()
thread1826.start()
thread1827.start()
thread1828.start()
thread1829.start()
thread1830.start()
thread1831.start()
thread1832.start()
thread1833.start()
thread1834.start()
thread1835.start()
thread1836.start()
thread1837.start()
thread1838.start()
thread1839.start()
thread1840.start()
thread1841.start()
thread1842.start()
thread1843.start()
thread1844.start()
thread1845.start()
thread1846.start()
thread1847.start()
thread1848.start()
thread1849.start()
thread1850.start()
thread1851.start()
thread1852.start()
thread1853.start()
thread1854.start()
thread1855.start()
thread1856.start()
thread1857.start()
thread1858.start()
thread1859.start()
thread1860.start()
thread1861.start()
thread1862.start()
thread1863.start()
thread1864.start()
thread1865.start()
thread1866.start()
thread1867.start()
thread1868.start()
thread1869.start()
thread1870.start()
thread1871.start()
thread1872.start()
thread1873.start()
thread1874.start()
thread1875.start()
thread1876.start()
thread1877.start()
thread1878.start()
thread1879.start()
thread1880.start()
thread1881.start()
thread1882.start()
thread1883.start()
thread1884.start()
thread1885.start()
thread1886.start()
thread1887.start()
thread1888.start()
thread1889.start()
thread1890.start()
thread1891.start()
thread1892.start()
thread1893.start()
thread1894.start()
thread1895.start()
thread1896.start()
thread1897.start()
thread1898.start()
thread1899.start()
thread1900.start()
thread1901.start()
thread1902.start()
thread1903.start()
thread1904.start()
thread1905.start()
thread1906.start()
thread1907.start()
thread1908.start()
thread1909.start()
thread1910.start()
thread1911.start()
thread1912.start()
thread1913.start()
thread1914.start()
thread1915.start()
thread1916.start()
thread1917.start()
thread1918.start()
thread1919.start()
thread1920.start()
thread1921.start()
thread1922.start()
thread1923.start()
thread1924.start()
thread1925.start()
thread1926.start()
thread1927.start()
thread1928.start()
thread1929.start()
thread1930.start()
thread1931.start()
thread1932.start()
thread1933.start()
thread1934.start()
thread1935.start()
thread1936.start()
thread1937.start()
thread1938.start()
thread1939.start()
thread1940.start()
thread1941.start()
thread1942.start()
thread1943.start()
thread1944.start()
thread1945.start()
thread1946.start()
thread1947.start()
thread1948.start()
thread1949.start()
thread1950.start()
thread1951.start()
thread1952.start()
thread1953.start()
thread1954.start()
thread1955.start()
thread1956.start()
thread1957.start()
thread1958.start()
thread1959.start()
thread1960.start()
thread1961.start()
thread1962.start()
thread1963.start()
thread1964.start()
thread1965.start()
thread1966.start()
thread1967.start()
thread1968.start()
thread1969.start()
thread1970.start()
thread1971.start()
thread1972.start()
thread1973.start()
thread1974.start()
thread1975.start()
thread1976.start()
thread1977.start()
thread1978.start()
thread1979.start()
thread1980.start()
thread1981.start()
thread1982.start()
thread1983.start()
thread1984.start()
thread1985.start()
thread1986.start()
thread1987.start()
thread1988.start()
thread1989.start()
thread1990.start()
thread1991.start()
thread1992.start()
thread1993.start()
thread1994.start()
thread1995.start()
thread1996.start()
thread1997.start()
thread1998.start()
thread1999.start()
thread2000.start()
thread2001.start()
thread2002.start()
thread2003.start()
thread2004.start()
thread2005.start()
thread2006.start()
thread2007.start()
thread2008.start()
thread2009.start()
thread2010.start()
thread2011.start()
thread2012.start()
thread2013.start()
thread2014.start()
thread2015.start()
thread2016.start()
thread2017.start()
thread2018.start()
thread2019.start()
thread2020.start()
thread2021.start()
thread2022.start()
thread2023.start()
thread2024.start()
thread2025.start()
thread2026.start()
thread2027.start()
thread2028.start()
thread2029.start()
thread2030.start()
thread2031.start()
thread2032.start()
thread2033.start()
thread2034.start()
thread2035.start()
thread2036.start()
thread2037.start()
thread2038.start()
thread2039.start()
thread2040.start()
thread2041.start()
thread2042.start()
thread2043.start()
thread2044.start()
thread2045.start()
thread2046.start()
thread2047.start()
thread2048.start()
thread2049.start()
thread2050.start()
thread2051.start()
thread2052.start()
thread2053.start()
thread2054.start()
thread2055.start()
thread2056.start()
thread2057.start()
thread2058.start()
thread2059.start()
thread2060.start()
thread2061.start()
thread2062.start()
thread2063.start()
thread2064.start()
thread2065.start()
thread2066.start()
thread2067.start()
thread2068.start()
thread2069.start()
thread2070.start()
thread2071.start()
thread2072.start()
thread2073.start()
thread2074.start()
thread2075.start()
thread2076.start()
thread2077.start()
thread2078.start()
thread2079.start()
thread2080.start()
thread2081.start()
thread2082.start()
thread2083.start()
thread2084.start()
thread2085.start()
thread2086.start()
thread2087.start()
thread2088.start()
thread2089.start()
thread2090.start()
thread2091.start()
thread2092.start()
thread2093.start()
thread2094.start()
thread2095.start()
thread2096.start()
thread2097.start()
thread2098.start()
thread2099.start()
thread2100.start()
thread2101.start()
thread2102.start()
thread2103.start()
thread2104.start()
thread2105.start()
thread2106.start()
thread2107.start()
thread2108.start()
thread2109.start()
thread2110.start()
thread2111.start()
thread2112.start()
thread2113.start()
thread2114.start()
thread2115.start()
thread2116.start()
thread2117.start()
thread2118.start()
thread2119.start()
thread2120.start()
thread2121.start()
thread2122.start()
thread2123.start()
thread2124.start()
thread2125.start()
thread2126.start()
thread2127.start()
thread2128.start()
thread2129.start()
thread2130.start()
thread2131.start()
thread2132.start()
thread2133.start()
thread2134.start()
thread2135.start()
thread2136.start()
thread2137.start()
thread2138.start()
thread2139.start()
thread2140.start()
thread2141.start()
thread2142.start()
thread2143.start()
thread2144.start()
thread2145.start()
thread2146.start()
thread2147.start()
thread2148.start()
thread2149.start()
thread2150.start()
thread2151.start()
thread2152.start()
thread2153.start()
thread2154.start()
thread2155.start()
thread2156.start()
thread2157.start()
thread2158.start()
thread2159.start()
thread2160.start()
thread2161.start()
thread2162.start()
thread2163.start()
thread2164.start()
thread2165.start()
thread2166.start()
thread2167.start()
thread2168.start()
thread2169.start()
thread2170.start()
thread2171.start()
thread2172.start()
thread2173.start()
thread2174.start()
thread2175.start()
thread2176.start()
thread2177.start()
thread2178.start()
thread2179.start()
thread2180.start()
thread2181.start()
thread2182.start()
thread2183.start()
thread2184.start()
thread2185.start()
thread2186.start()
thread2187.start()
thread2188.start()
thread2189.start()
thread2190.start()
thread2191.start()
thread2192.start()
thread2193.start()
thread2194.start()
thread2195.start()
thread2196.start()
thread2197.start()
thread2198.start()
thread2199.start()
thread2200.start()
thread2201.start()
thread2202.start()
thread2203.start()
thread2204.start()
thread2205.start()
thread2206.start()
thread2207.start()
thread2208.start()
thread2209.start()
thread2210.start()
thread2211.start()
thread2212.start()
thread2213.start()
thread2214.start()
thread2215.start()
thread2216.start()
thread2217.start()
thread2218.start()
thread2219.start()
thread2220.start()
thread2221.start()
thread2222.start()
thread2223.start()
thread2224.start()
thread2225.start()
thread2226.start()
thread2227.start()
thread2228.start()
thread2229.start()
thread2230.start()
thread2231.start()
thread2232.start()
thread2233.start()
thread2234.start()
thread2235.start()
thread2236.start()
thread2237.start()
thread2238.start()
thread2239.start()
thread2240.start()
thread2241.start()
thread2242.start()
thread2243.start()
thread2244.start()
thread2245.start()
thread2246.start()
thread2247.start()
thread2248.start()
thread2249.start()
thread2250.start()
thread2251.start()
thread2252.start()
thread2253.start()
thread2254.start()
thread2255.start()
thread2256.start()
thread2257.start()
thread2258.start()
thread2259.start()
thread2260.start()
thread2261.start()
thread2262.start()
thread2263.start()
thread2264.start()
thread2265.start()
thread2266.start()
thread2267.start()
thread2268.start()
thread2269.start()
thread2270.start()
thread2271.start()
thread2272.start()
thread2273.start()
thread2274.start()
thread2275.start()
thread2276.start()
thread2277.start()
thread2278.start()
thread2279.start()
thread2280.start()
thread2281.start()
thread2282.start()
thread2283.start()
thread2284.start()
thread2285.start()
thread2286.start()
thread2287.start()
thread2288.start()
thread2289.start()
thread2290.start()
thread2291.start()
thread2292.start()
thread2293.start()
thread2294.start()
thread2295.start()
thread2296.start()
thread2297.start()
thread2298.start()
thread2299.start()
thread2300.start()
thread2301.start()
thread2302.start()
thread2303.start()
thread2304.start()
thread2305.start()
thread2306.start()
thread2307.start()
thread2308.start()
thread2309.start()
thread2310.start()
thread2311.start()
thread2312.start()
thread2313.start()
thread2314.start()
thread2315.start()
thread2316.start()
thread2317.start()
thread2318.start()
thread2319.start()
thread2320.start()
thread2321.start()
thread2322.start()
thread2323.start()
thread2324.start()
thread2325.start()
thread2326.start()
thread2327.start()
thread2328.start()
thread2329.start()
thread2330.start()
thread2331.start()
thread2332.start()
thread2333.start()
thread2334.start()
thread2335.start()
thread2336.start()
thread2337.start()
thread2338.start()
thread2339.start()
thread2340.start()
thread2341.start()
thread2342.start()
thread2343.start()
thread2344.start()
thread2345.start()
thread2346.start()
thread2347.start()
thread2348.start()
thread2349.start()
thread2350.start()
thread2351.start()
thread2352.start()
thread2353.start()
thread2354.start()
thread2355.start()
thread2356.start()
thread2357.start()
thread2358.start()
thread2359.start()
thread2360.start()
thread2361.start()
thread2362.start()
thread2363.start()
thread2364.start()
thread2365.start()
thread2366.start()
thread2367.start()
thread2368.start()
thread2369.start()
thread2370.start()
thread2371.start()
thread2372.start()
thread2373.start()
thread2374.start()
thread2375.start()
thread2376.start()
thread2377.start()
thread2378.start()
thread2379.start()
thread2380.start()
thread2381.start()
thread2382.start()
thread2383.start()
thread2384.start()
thread2385.start()
thread2386.start()
thread2387.start()
thread2388.start()
thread2389.start()
thread2390.start()
thread2391.start()
thread2392.start()
thread2393.start()
thread2394.start()
thread2395.start()
thread2396.start()
thread2397.start()
thread2398.start()
thread2399.start()
thread2400.start()
thread2401.start()
thread2402.start()
thread2403.start()
thread2404.start()
thread2405.start()
thread2406.start()
thread2407.start()
thread2408.start()
thread2409.start()
thread2410.start()
thread2411.start()
thread2412.start()
thread2413.start()
thread2414.start()
thread2415.start()
thread2416.start()
thread2417.start()
thread2418.start()
thread2419.start()
thread2420.start()
thread2421.start()
thread2422.start()
thread2423.start()
thread2424.start()
thread2425.start()
thread2426.start()
thread2427.start()
thread2428.start()
thread2429.start()
thread2430.start()
thread2431.start()
thread2432.start()
thread2433.start()
thread2434.start()
thread2435.start()
thread2436.start()
thread2437.start()
thread2438.start()
thread2439.start()
thread2440.start()
thread2441.start()
thread2442.start()
thread2443.start()
thread2444.start()
thread2445.start()
thread2446.start()
thread2447.start()
thread2448.start()
thread2449.start()
thread2450.start()
thread2451.start()
thread2452.start()
thread2453.start()
thread2454.start()
thread2455.start()
thread2456.start()
thread2457.start()
thread2458.start()
thread2459.start()
thread2460.start()
thread2461.start()
thread2462.start()
thread2463.start()
thread2464.start()
thread2465.start()
thread2466.start()
thread2467.start()
thread2468.start()
thread2469.start()
thread2470.start()
thread2471.start()
thread2472.start()
thread2473.start()
thread2474.start()
thread2475.start()
thread2476.start()
thread2477.start()
thread2478.start()
thread2479.start()
thread2480.start()
thread2481.start()
thread2482.start()
thread2483.start()
thread2484.start()
thread2485.start()
thread2486.start()
thread2487.start()
thread2488.start()
thread2489.start()
thread2490.start()
thread2491.start()
thread2492.start()
thread2493.start()
thread2494.start()
thread2495.start()
thread2496.start()
thread2497.start()
thread2498.start()
thread2499.start()
thread2500.start()
thread2501.start()
thread2502.start()
thread2503.start()
thread2504.start()
thread2505.start()
thread2506.start()
thread2507.start()
thread2508.start()
thread2509.start()
thread2510.start()
thread2511.start()
thread2512.start()
thread2513.start()
thread2514.start()
thread2515.start()
thread2516.start()
thread2517.start()
thread2518.start()
thread2519.start()
thread2520.start()
thread2521.start()
thread2522.start()
thread2523.start()
thread2524.start()
thread2525.start()
thread2526.start()
thread2527.start()
thread2528.start()
thread2529.start()
thread2530.start()
thread2531.start()
thread2532.start()
thread2533.start()
thread2534.start()
thread2535.start()
thread2536.start()
thread2537.start()
thread2538.start()
thread2539.start()
thread2540.start()
thread2541.start()
thread2542.start()
thread2543.start()
thread2544.start()
thread2545.start()
thread2546.start()
thread2547.start()
thread2548.start()
thread2549.start()
thread2550.start()
thread2551.start()
thread2552.start()
thread2553.start()
thread2554.start()
thread2555.start()
thread2556.start()
thread2557.start()
thread2558.start()
thread2559.start()
thread2560.start()
thread2561.start()
thread2562.start()
thread2563.start()
thread2564.start()
thread2565.start()
thread2566.start()
thread2567.start()
thread2568.start()
thread2569.start()
thread2570.start()
thread2571.start()
thread2572.start()
thread2573.start()
thread2574.start()
thread2575.start()
thread2576.start()
thread2577.start()
thread2578.start()
thread2579.start()
thread2580.start()
thread2581.start()
thread2582.start()
thread2583.start()
thread2584.start()
thread2585.start()
thread2586.start()
thread2587.start()
thread2588.start()
thread2589.start()
thread2590.start()
thread2591.start()
thread2592.start()
thread2593.start()
thread2594.start()
thread2595.start()
thread2596.start()
thread2597.start()
thread2598.start()
thread2599.start()
thread2600.start()
thread2601.start()
thread2602.start()
thread2603.start()
thread2604.start()
thread2605.start()
thread2606.start()
thread2607.start()
thread2608.start()
thread2609.start()
thread2610.start()
thread2611.start()
thread2612.start()
thread2613.start()
thread2614.start()
thread2615.start()
thread2616.start()
thread2617.start()
thread2618.start()
thread2619.start()
thread2620.start()
thread2621.start()
thread2622.start()
thread2623.start()
thread2624.start()
thread2625.start()
thread2626.start()
thread2627.start()
thread2628.start()
thread2629.start()
thread2630.start()
thread2631.start()
thread2632.start()
thread2633.start()
thread2634.start()
thread2635.start()
thread2636.start()
thread2637.start()
thread2638.start()
thread2639.start()
thread2640.start()
thread2641.start()
thread2642.start()
thread2643.start()
thread2644.start()
thread2645.start()
thread2646.start()
thread2647.start()
thread2648.start()
thread2649.start()
thread2650.start()
thread2651.start()
thread2652.start()
thread2653.start()
thread2654.start()
thread2655.start()
thread2656.start()
thread2657.start()
thread2658.start()
thread2659.start()
thread2660.start()
thread2661.start()
thread2662.start()
thread2663.start()
thread2664.start()
thread2665.start()
thread2666.start()
thread2667.start()
thread2668.start()
thread2669.start()
thread2670.start()
thread2671.start()
thread2672.start()
thread2673.start()
thread2674.start()
thread2675.start()
thread2676.start()
thread2677.start()
thread2678.start()
thread2679.start()
thread2680.start()
thread2681.start()
thread2682.start()
thread2683.start()
thread2684.start()
thread2685.start()
thread2686.start()
thread2687.start()
thread2688.start()
thread2689.start()
thread2690.start()
thread2691.start()
thread2692.start()
thread2693.start()
thread2694.start()
thread2695.start()
thread2696.start()
thread2697.start()
thread2698.start()
thread2699.start()
thread2700.start()
thread2701.start()
thread2702.start()
thread2703.start()
thread2704.start()
thread2705.start()
thread2706.start()
thread2707.start()
thread2708.start()
thread2709.start()
thread2710.start()
thread2711.start()
thread2712.start()
thread2713.start()
thread2714.start()
thread2715.start()
thread2716.start()
thread2717.start()
thread2718.start()
thread2719.start()
thread2720.start()
thread2721.start()
thread2722.start()
thread2723.start()
thread2724.start()
thread2725.start()
thread2726.start()
thread2727.start()
thread2728.start()
thread2729.start()
thread2730.start()
thread2731.start()
thread2732.start()
thread2733.start()
thread2734.start()
thread2735.start()
thread2736.start()
thread2737.start()
thread2738.start()
thread2739.start()
thread2740.start()
thread2741.start()
thread2742.start()
thread2743.start()
thread2744.start()
thread2745.start()
thread2746.start()
thread2747.start()
thread2748.start()
thread2749.start()
thread2750.start()
thread2751.start()
thread2752.start()
thread2753.start()
thread2754.start()
thread2755.start()
thread2756.start()